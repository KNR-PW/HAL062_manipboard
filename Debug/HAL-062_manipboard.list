
HAL-062_manipboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e14  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08009fe0  08009fe0  00019fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4d8  0800a4d8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4e0  0800a4e0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4e0  0800a4e0  0001a4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  2000007c  0800a564  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  0800a564  000208c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3f6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc8  00000000  00000000  0002e4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00031270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  00031db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b18  00000000  00000000  00032788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014289  00000000  00000000  000582a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb9e7  00000000  00000000  0006c529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137f10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  00137f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009fc4 	.word	0x08009fc4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	08009fc4 	.word	0x08009fc4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 ffc7 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f006 fc78 	bl	80077ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 ffe5 	bl	8001eb6 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 ffa7 	bl	8001e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000014 	.word	0x20000014
 8000f20:	20000004 	.word	0x20000004
 8000f24:	20000000 	.word	0x20000000

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	20000098 	.word	0x20000098

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000098 	.word	0x20000098

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]

  /* Check CAN handle */
  if (hcan == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_CAN_Init+0x16>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e0ed      	b.n	80011a2 <HAL_CAN_Init+0x1f2>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_CAN_Init+0x28>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f006 f816 	bl	8007004 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0202 	bic.w	r2, r2, #2
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe8:	f7ff ffb2 	bl	8000f50 <HAL_GetTick>
 8000fec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000fee:	e012      	b.n	8001016 <HAL_CAN_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ff0:	f7ff ffae 	bl	8000f50 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b0a      	cmp	r3, #10
 8000ffc:	d90b      	bls.n	8001016 <HAL_CAN_Init+0x66>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2205      	movs	r2, #5
 800100e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e0c5      	b.n	80011a2 <HAL_CAN_Init+0x1f2>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1e5      	bne.n	8000ff0 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001034:	f7ff ff8c 	bl	8000f50 <HAL_GetTick>
 8001038:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 800103a:	e012      	b.n	8001062 <HAL_CAN_Init+0xb2>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800103c:	f7ff ff88 	bl	8000f50 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b0a      	cmp	r3, #10
 8001048:	d90b      	bls.n	8001062 <HAL_CAN_Init+0xb2>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2205      	movs	r2, #5
 800105a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e09f      	b.n	80011a2 <HAL_CAN_Init+0x1f2>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0e5      	beq.n	800103c <HAL_CAN_Init+0x8c>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7e1b      	ldrb	r3, [r3, #24]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d108      	bne.n	800108a <HAL_CAN_Init+0xda>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e007      	b.n	800109a <HAL_CAN_Init+0xea>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7e5b      	ldrb	r3, [r3, #25]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d108      	bne.n	80010b4 <HAL_CAN_Init+0x104>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e007      	b.n	80010c4 <HAL_CAN_Init+0x114>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7e9b      	ldrb	r3, [r3, #26]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d108      	bne.n	80010de <HAL_CAN_Init+0x12e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0220 	orr.w	r2, r2, #32
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e007      	b.n	80010ee <HAL_CAN_Init+0x13e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0220 	bic.w	r2, r2, #32
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7edb      	ldrb	r3, [r3, #27]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d108      	bne.n	8001108 <HAL_CAN_Init+0x158>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0210 	bic.w	r2, r2, #16
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e007      	b.n	8001118 <HAL_CAN_Init+0x168>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0210 	orr.w	r2, r2, #16
 8001116:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7f1b      	ldrb	r3, [r3, #28]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d108      	bne.n	8001132 <HAL_CAN_Init+0x182>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0208 	orr.w	r2, r2, #8
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e007      	b.n	8001142 <HAL_CAN_Init+0x192>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0208 	bic.w	r2, r2, #8
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7f5b      	ldrb	r3, [r3, #29]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d108      	bne.n	800115c <HAL_CAN_Init+0x1ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0204 	orr.w	r2, r2, #4
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e007      	b.n	800116c <HAL_CAN_Init+0x1bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0204 	bic.w	r2, r2, #4
 800116a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	ea42 0103 	orr.w	r1, r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  CAN_TypeDef *can_ip = hcan->Instance;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	60bb      	str	r3, [r7, #8]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d006      	beq.n	80011da <HAL_CAN_ConfigFilter+0x2e>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d2:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	f040 80bc 	bne.w	8001352 <HAL_CAN_ConfigFilter+0x1a6>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80011da:	4b64      	ldr	r3, [pc, #400]	; (800136c <HAL_CAN_ConfigFilter+0x1c0>)
 80011dc:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011e4:	f043 0201 	orr.w	r2, r3, #1
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	431a      	orrs	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	2201      	movs	r2, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	401a      	ands	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d123      	bne.n	8001280 <HAL_CAN_ConfigFilter+0xd4>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800125a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3248      	adds	r2, #72	; 0x48
 8001260:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001274:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	3348      	adds	r3, #72	; 0x48
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d122      	bne.n	80012ce <HAL_CAN_ConfigFilter+0x122>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	431a      	orrs	r2, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3248      	adds	r2, #72	; 0x48
 80012ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	3348      	adds	r3, #72	; 0x48
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_CAN_ConfigFilter+0x13e>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	401a      	ands	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80012e8:	e007      	b.n	80012fa <HAL_CAN_ConfigFilter+0x14e>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <HAL_CAN_ConfigFilter+0x16a>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	401a      	ands	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001314:	e007      	b.n	8001326 <HAL_CAN_ConfigFilter+0x17a>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	431a      	orrs	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == ENABLE)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d107      	bne.n	800133e <HAL_CAN_ConfigFilter+0x192>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	431a      	orrs	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001344:	f023 0201 	bic.w	r2, r3, #1
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e006      	b.n	8001360 <HAL_CAN_ConfigFilter+0x1b4>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
  }
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40006400 	.word	0x40006400

08001370 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]

  if (hcan->State == HAL_CAN_STATE_READY)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d12e      	bne.n	80013e6 <HAL_CAN_Start+0x76>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013a0:	f7ff fdd6 	bl	8000f50 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 80013a6:	e012      	b.n	80013ce <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013a8:	f7ff fdd2 	bl	8000f50 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d90b      	bls.n	80013ce <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2205      	movs	r2, #5
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e012      	b.n	80013f4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e5      	bne.n	80013a8 <HAL_CAN_Start+0x38>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e006      	b.n	80013f4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
  }
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d006      	beq.n	8001424 <HAL_CAN_AddTxMessage+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141c:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800141e:	2b02      	cmp	r3, #2
 8001420:	f040 80b5 	bne.w	800158e <HAL_CAN_AddTxMessage+0x192>
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10e      	bne.n	8001450 <HAL_CAN_AddTxMessage+0x54>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 800143c:	2b00      	cmp	r3, #0
 800143e:	d107      	bne.n	8001450 <HAL_CAN_AddTxMessage+0x54>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8097 	beq.w	800157e <HAL_CAN_AddTxMessage+0x182>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	0e1b      	lsrs	r3, r3, #24
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10d      	bne.n	800148c <HAL_CAN_AddTxMessage+0x90>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800147a:	68f9      	ldr	r1, [r7, #12]
 800147c:	6809      	ldr	r1, [r1, #0]
 800147e:	431a      	orrs	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3318      	adds	r3, #24
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	440b      	add	r3, r1
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e00f      	b.n	80014ac <HAL_CAN_AddTxMessage+0xb0>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001496:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014a0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3318      	adds	r3, #24
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	440b      	add	r3, r1
 80014aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3318      	adds	r3, #24
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	440b      	add	r3, r1
 80014bc:	3304      	adds	r3, #4
 80014be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	7d1b      	ldrb	r3, [r3, #20]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d111      	bne.n	80014ec <HAL_CAN_AddTxMessage+0xf0>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3318      	adds	r3, #24
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	3304      	adds	r3, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	6811      	ldr	r1, [r2, #0]
 80014dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3318      	adds	r3, #24
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	440b      	add	r3, r1
 80014e8:	3304      	adds	r3, #4
 80014ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3307      	adds	r3, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	061a      	lsls	r2, r3, #24
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3306      	adds	r3, #6
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	041b      	lsls	r3, r3, #16
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3305      	adds	r3, #5
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	4313      	orrs	r3, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	3204      	adds	r2, #4
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	4610      	mov	r0, r2
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	6811      	ldr	r1, [r2, #0]
 8001514:	ea43 0200 	orr.w	r2, r3, r0
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	440b      	add	r3, r1
 800151e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001522:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3303      	adds	r3, #3
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	061a      	lsls	r2, r3, #24
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3302      	adds	r3, #2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3301      	adds	r3, #1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	4313      	orrs	r3, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	4610      	mov	r0, r2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	6811      	ldr	r1, [r2, #0]
 800154a:	ea43 0200 	orr.w	r2, r3, r0
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	440b      	add	r3, r1
 8001554:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001558:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3318      	adds	r3, #24
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	6811      	ldr	r1, [r2, #0]
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3318      	adds	r3, #24
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	440b      	add	r3, r1
 8001578:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e00e      	b.n	800159c <HAL_CAN_AddTxMessage+0x1a0>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e006      	b.n	800159c <HAL_CAN_AddTxMessage+0x1a0>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
  }
}
 800159c:	4618      	mov	r0, r3
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d006      	beq.n	80015d0 <HAL_CAN_GetRxMessage+0x28>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c8:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	f040 80fa 	bne.w	80017c4 <HAL_CAN_GetRxMessage+0x21c>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10e      	bne.n	80015f4 <HAL_CAN_GetRxMessage+0x4c>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d119      	bne.n	8001618 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0ee      	b.n	80017d2 <HAL_CAN_GetRxMessage+0x22a>
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10e      	bne.n	8001618 <HAL_CAN_GetRxMessage+0x70>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d107      	bne.n	8001618 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0dc      	b.n	80017d2 <HAL_CAN_GetRxMessage+0x22a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	331b      	adds	r3, #27
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0204 	and.w	r2, r3, #4
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10c      	bne.n	8001650 <HAL_CAN_GetRxMessage+0xa8>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	331b      	adds	r3, #27
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0d5b      	lsrs	r3, r3, #21
 8001646:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e00b      	b.n	8001668 <HAL_CAN_GetRxMessage+0xc0>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	331b      	adds	r3, #27
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	4413      	add	r3, r2
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	331b      	adds	r3, #27
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	f003 0201 	and.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	331b      	adds	r3, #27
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	3304      	adds	r3, #4
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 020f 	and.w	r2, r3, #15
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	331b      	adds	r3, #27
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	3304      	adds	r3, #4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	331b      	adds	r3, #27
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	3304      	adds	r3, #4
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0a1a      	lsrs	r2, r3, #8
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0c1a      	lsrs	r2, r3, #16
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3302      	adds	r3, #2
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0e1a      	lsrs	r2, r3, #24
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	3303      	adds	r3, #3
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	701a      	strb	r2, [r3, #0]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4413      	add	r3, r2
 8001736:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	3304      	adds	r3, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	701a      	strb	r2, [r3, #0]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	4413      	add	r3, r2
 800174e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0a1a      	lsrs	r2, r3, #8
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	3305      	adds	r3, #5
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	4413      	add	r3, r2
 8001768:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0c1a      	lsrs	r2, r3, #16
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	3306      	adds	r3, #6
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	701a      	strb	r2, [r3, #0]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0e1a      	lsrs	r2, r3, #24
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3307      	adds	r3, #7
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d108      	bne.n	80017aa <HAL_CAN_GetRxMessage+0x202>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0220 	orr.w	r2, r2, #32
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	e00a      	b.n	80017c0 <HAL_CAN_GetRxMessage+0x218>
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d107      	bne.n	80017c0 <HAL_CAN_GetRxMessage+0x218>
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0220 	orr.w	r2, r2, #32
 80017be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e006      	b.n	80017d2 <HAL_CAN_GetRxMessage+0x22a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d005      	beq.n	8001800 <HAL_CAN_ActivateNotification+0x22>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017fa:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d109      	bne.n	8001814 <HAL_CAN_ActivateNotification+0x36>
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6959      	ldr	r1, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e006      	b.n	8001822 <HAL_CAN_ActivateNotification+0x44>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
  }
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b08a      	sub	sp, #40	; 0x28
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d07c      	beq.n	800196e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d023      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2201      	movs	r2, #1
 8001884:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f983 	bl	8001b9c <HAL_CAN_TxMailbox0CompleteCallback>
 8001896:	e016      	b.n	80018c6 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
 80018aa:	e00c      	b.n	80018c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e002      	b.n	80018c6 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f989 	bl	8001bd8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d024      	beq.n	800191a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f963 	bl	8001bb0 <HAL_CAN_TxMailbox1CompleteCallback>
 80018ea:	e016      	b.n	800191a <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
 80018fe:	e00c      	b.n	800191a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e002      	b.n	800191a <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f969 	bl	8001bec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d024      	beq.n	800196e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800192c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f943 	bl	8001bc4 <HAL_CAN_TxMailbox2CompleteCallback>
 800193e:	e016      	b.n	800196e <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	e00c      	b.n	800196e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e002      	b.n	800196e <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f949 	bl	8001c00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001988:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2210      	movs	r2, #16
 8001990:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00b      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2208      	movs	r2, #8
 80019ac:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f930 	bl	8001c14 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f004 fec1 	bl	8006754 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00c      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2210      	movs	r2, #16
 80019f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00b      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d006      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2208      	movs	r2, #8
 8001a10:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f908 	bl	8001c28 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f004 fec1 	bl	80067b8 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00b      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2210      	movs	r2, #16
 8001a50:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f8f2 	bl	8001c3c <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00b      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2208      	movs	r2, #8
 8001a72:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f8eb 	bl	8001c50 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != RESET)
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d07b      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d072      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != RESET))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != RESET))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != RESET))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d043      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != RESET))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03e      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001afc:	2b60      	cmp	r3, #96	; 0x60
 8001afe:	d02b      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x32a>
 8001b00:	2b60      	cmp	r3, #96	; 0x60
 8001b02:	d82e      	bhi.n	8001b62 <HAL_CAN_IRQHandler+0x334>
 8001b04:	2b50      	cmp	r3, #80	; 0x50
 8001b06:	d022      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x320>
 8001b08:	2b50      	cmp	r3, #80	; 0x50
 8001b0a:	d82a      	bhi.n	8001b62 <HAL_CAN_IRQHandler+0x334>
 8001b0c:	2b40      	cmp	r3, #64	; 0x40
 8001b0e:	d019      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x316>
 8001b10:	2b40      	cmp	r3, #64	; 0x40
 8001b12:	d826      	bhi.n	8001b62 <HAL_CAN_IRQHandler+0x334>
 8001b14:	2b30      	cmp	r3, #48	; 0x30
 8001b16:	d010      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x30c>
 8001b18:	2b30      	cmp	r3, #48	; 0x30
 8001b1a:	d822      	bhi.n	8001b62 <HAL_CAN_IRQHandler+0x334>
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d002      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x2f8>
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	d005      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b24:	e01d      	b.n	8001b62 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b2e:	e019      	b.n	8001b64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	f043 0310 	orr.w	r3, r3, #16
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b38:	e014      	b.n	8001b64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b42:	e00f      	b.n	8001b64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b4c:	e00a      	b.n	8001b64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b56:	e005      	b.n	8001b64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b60:	e000      	b.n	8001b64 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b62:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b72:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f868 	bl	8001c64 <HAL_CAN_ErrorCallback>
  }
}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4907      	ldr	r1, [pc, #28]	; (8001d0c <NVIC_EnableIRQ+0x30>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da0b      	bge.n	8001d3c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <NVIC_SetPriority+0x4c>)
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	3b04      	subs	r3, #4
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3a:	e009      	b.n	8001d50 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4907      	ldr	r1, [pc, #28]	; (8001d60 <NVIC_SetPriority+0x50>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd0:	f3bf 8f4f 	dsb	sy
}
 8001dd4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <NVIC_SystemReset+0x28>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001dde:	4905      	ldr	r1, [pc, #20]	; (8001df4 <NVIC_SystemReset+0x28>)
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <NVIC_SystemReset+0x2c>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001de6:	f3bf 8f4f 	dsb	sy
}
 8001dea:	bf00      	nop
  __ASM volatile ("nop");
 8001dec:	bf00      	nop
}
 8001dee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001df0:	e7fc      	b.n	8001dec <NVIC_SystemReset+0x20>
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00
 8001df8:	05fa0004 	.word	0x05fa0004

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f7ff ff76 	bl	8001d10 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff15 	bl	8001c78 <NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff2a 	bl	8001cc0 <NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff76 	bl	8001d64 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff45 	bl	8001d10 <NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff1d 	bl	8001cdc <NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001eae:	f7ff ff8d 	bl	8001dcc <NVIC_SystemReset>
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ff9c 	bl	8001dfc <SysTick_Config>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d106      	bne.n	8001eec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001eea:	e005      	b.n	8001ef8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ef2:	f023 0304 	bic.w	r3, r3, #4
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f0c:	f005 f9b4 	bl	8007278 <HAL_SYSTICK_Callback>
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00c      	b.n	8001f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2205      	movs	r2, #5
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f64:	4b8e      	ldr	r3, [pc, #568]	; (80021a0 <HAL_DMA_IRQHandler+0x248>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a8e      	ldr	r2, [pc, #568]	; (80021a4 <HAL_DMA_IRQHandler+0x24c>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2208      	movs	r2, #8
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2204      	movs	r2, #4
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2204      	movs	r2, #4
 800201e:	409a      	lsls	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2210      	movs	r2, #16
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d043      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03c      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2210      	movs	r2, #16
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d024      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
 8002086:	e01f      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	e016      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0208 	bic.w	r2, r2, #8
 80020b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	2220      	movs	r2, #32
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 808f 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8087 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2220      	movs	r2, #32
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d136      	bne.n	8002170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_IRQHandler+0x1da>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	223f      	movs	r2, #63	; 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07e      	beq.n	8002264 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
        }
        return;
 800216e:	e079      	b.n	8002264 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	2b00      	cmp	r3, #0
 8002192:	d031      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e02c      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
 800219e:	bf00      	nop
 80021a0:	20000014 	.word	0x20000014
 80021a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e01e      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0210 	bic.w	r2, r2, #16
 80021d6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d032      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d022      	beq.n	8002252 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2205      	movs	r2, #5
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d307      	bcc.n	8002240 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f2      	bne.n	8002224 <HAL_DMA_IRQHandler+0x2cc>
 800223e:	e000      	b.n	8002242 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002240:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e000      	b.n	8002266 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002264:	bf00      	nop
    }
  }
}
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e165      	b.n	8002554 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 8154 	bne.w	800254e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x4a>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d123      	bne.n	80022fe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d00b      	beq.n	8002352 <HAL_GPIO_Init+0xe6>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d007      	beq.n	8002352 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002346:	2b11      	cmp	r3, #17
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b12      	cmp	r3, #18
 8002350:	d130      	bne.n	80023b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0201 	and.w	r2, r3, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2203      	movs	r2, #3
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80ae 	beq.w	800254e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_GPIO_Init+0x300>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a5c      	ldr	r2, [pc, #368]	; (800256c <HAL_GPIO_Init+0x300>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b5a      	ldr	r3, [pc, #360]	; (800256c <HAL_GPIO_Init+0x300>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240e:	4a58      	ldr	r2, [pc, #352]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4f      	ldr	r2, [pc, #316]	; (8002574 <HAL_GPIO_Init+0x308>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d025      	beq.n	8002486 <HAL_GPIO_Init+0x21a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4e      	ldr	r2, [pc, #312]	; (8002578 <HAL_GPIO_Init+0x30c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01f      	beq.n	8002482 <HAL_GPIO_Init+0x216>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4d      	ldr	r2, [pc, #308]	; (800257c <HAL_GPIO_Init+0x310>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d019      	beq.n	800247e <HAL_GPIO_Init+0x212>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4c      	ldr	r2, [pc, #304]	; (8002580 <HAL_GPIO_Init+0x314>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_GPIO_Init+0x20e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4b      	ldr	r2, [pc, #300]	; (8002584 <HAL_GPIO_Init+0x318>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00d      	beq.n	8002476 <HAL_GPIO_Init+0x20a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4a      	ldr	r2, [pc, #296]	; (8002588 <HAL_GPIO_Init+0x31c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <HAL_GPIO_Init+0x206>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a49      	ldr	r2, [pc, #292]	; (800258c <HAL_GPIO_Init+0x320>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_GPIO_Init+0x202>
 800246a:	2306      	movs	r3, #6
 800246c:	e00c      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 800246e:	2307      	movs	r3, #7
 8002470:	e00a      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 8002472:	2305      	movs	r3, #5
 8002474:	e008      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 8002476:	2304      	movs	r3, #4
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 800247a:	2303      	movs	r3, #3
 800247c:	e004      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 800247e:	2302      	movs	r3, #2
 8002480:	e002      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_GPIO_Init+0x21c>
 8002486:	2300      	movs	r3, #0
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	f002 0203 	and.w	r2, r2, #3
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	4093      	lsls	r3, r2
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002498:	4935      	ldr	r1, [pc, #212]	; (8002570 <HAL_GPIO_Init+0x304>)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a6:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ca:	4a31      	ldr	r2, [pc, #196]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024d0:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f4:	4a26      	ldr	r2, [pc, #152]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fa:	4b25      	ldr	r3, [pc, #148]	; (8002590 <HAL_GPIO_Init+0x324>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_GPIO_Init+0x324>)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_GPIO_Init+0x324>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <HAL_GPIO_Init+0x324>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b0f      	cmp	r3, #15
 8002558:	f67f ae96 	bls.w	8002288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40013800 	.word	0x40013800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020400 	.word	0x40020400
 800257c:	40020800 	.word	0x40020800
 8002580:	40020c00 	.word	0x40020c00
 8002584:	40021000 	.word	0x40021000
 8002588:	40021400 	.word	0x40021400
 800258c:	40021800 	.word	0x40021800
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b0:	e003      	b.n	80025ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80025d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0ca      	b.n	8002792 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b67      	ldr	r3, [pc, #412]	; (800279c <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d90c      	bls.n	8002624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b64      	ldr	r3, [pc, #400]	; (800279c <HAL_RCC_ClockConfig+0x1b4>)
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b62      	ldr	r3, [pc, #392]	; (800279c <HAL_RCC_ClockConfig+0x1b4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b6      	b.n	8002792 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800265a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800265e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494c      	ldr	r1, [pc, #304]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d044      	beq.n	8002708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b46      	ldr	r3, [pc, #280]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d119      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07d      	b.n	8002792 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06d      	b.n	8002792 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e065      	b.n	8002792 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4933      	ldr	r1, [pc, #204]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7fe fc3a 	bl	8000f50 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7fe fc36 	bl	8000f50 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e04d      	b.n	8002792 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_RCC_ClockConfig+0x1b4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d20c      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_RCC_ClockConfig+0x1b4>)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b1f      	ldr	r3, [pc, #124]	; (800279c <HAL_RCC_ClockConfig+0x1b4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e030      	b.n	8002792 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4915      	ldr	r1, [pc, #84]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490d      	ldr	r1, [pc, #52]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800276e:	f000 fb53 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4909      	ldr	r1, [pc, #36]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800278a:	2000      	movs	r0, #0
 800278c:	f7fe fb9c 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023c00 	.word	0x40023c00
 80027a0:	40023800 	.word	0x40023800
 80027a4:	0800a030 	.word	0x0800a030
 80027a8:	20000014 	.word	0x20000014

080027ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000014 	.word	0x20000014

080027c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002802:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	496c      	ldr	r1, [pc, #432]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800281a:	2301      	movs	r3, #1
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800282a:	4b64      	ldr	r3, [pc, #400]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800282c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002830:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	4960      	ldr	r1, [pc, #384]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002848:	2301      	movs	r3, #1
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d017      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002858:	4b58      	ldr	r3, [pc, #352]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800285a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800285e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4955      	ldr	r1, [pc, #340]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002876:	d101      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002878:	2301      	movs	r3, #1
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002884:	2301      	movs	r3, #1
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d017      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002894:	4b49      	ldr	r3, [pc, #292]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	4946      	ldr	r1, [pc, #280]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b2:	d101      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80028c0:	2301      	movs	r3, #1
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 808a 	beq.w	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a38      	ldr	r2, [pc, #224]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028ee:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028fa:	f7fe fb29 	bl	8000f50 <HAL_GetTick>
 80028fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7fe fb25 	bl	8000f50 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e278      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002928:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02f      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002938:	6a3a      	ldr	r2, [r7, #32]
 800293a:	429a      	cmp	r2, r3
 800293c:	d028      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002948:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800294e:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d014      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe faf3 	bl	8000f50 <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe faef 	bl	8000f50 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	; 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e240      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ee      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800299c:	d114      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b2:	4902      	ldr	r1, [pc, #8]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
 80029b8:	e00c      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42470e40 	.word	0x42470e40
 80029c8:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a49      	ldr	r2, [pc, #292]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029d2:	6093      	str	r3, [r2, #8]
 80029d4:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	4944      	ldr	r1, [pc, #272]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80029f8:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80029fa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	4937      	ldr	r1, [pc, #220]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a2a:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a30:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a38:	492e      	ldr	r1, [pc, #184]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d011      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a4c:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a52:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	4926      	ldr	r1, [pc, #152]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	491a      	ldr	r1, [pc, #104]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d011      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	4911      	ldr	r1, [pc, #68]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad0:	f040 80ff 	bne.w	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ada:	f7fe fa39 	bl	8000f50 <HAL_GetTick>
 8002ade:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ae0:	e00e      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ae2:	f7fe fa35 	bl	8000f50 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d907      	bls.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e188      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002af4:	40023800 	.word	0x40023800
 8002af8:	424711e0 	.word	0x424711e0
 8002afc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b00:	4b7e      	ldr	r3, [pc, #504]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1ea      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d028      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d124      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b34:	4b71      	ldr	r3, [pc, #452]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	3301      	adds	r3, #1
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b46:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4c:	0e1b      	lsrs	r3, r3, #24
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	019b      	lsls	r3, r3, #6
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	3b01      	subs	r3, #1
 8002b66:	041b      	lsls	r3, r3, #16
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	071b      	lsls	r3, r3, #28
 8002b76:	4961      	ldr	r1, [pc, #388]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d035      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba8:	d130      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002baa:	4b54      	ldr	r3, [pc, #336]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc2:	0f1b      	lsrs	r3, r3, #28
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	019b      	lsls	r3, r3, #6
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	071b      	lsls	r3, r3, #28
 8002bec:	4943      	ldr	r1, [pc, #268]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bf4:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	f023 021f 	bic.w	r2, r3, #31
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	493d      	ldr	r1, [pc, #244]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d029      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c20:	d124      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c22:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c34:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3a:	0f1b      	lsrs	r3, r3, #28
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	019b      	lsls	r3, r3, #6
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	3b01      	subs	r3, #1
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	071b      	lsls	r3, r3, #28
 8002c64:	4925      	ldr	r1, [pc, #148]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d016      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	061b      	lsls	r3, r3, #24
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	071b      	lsls	r3, r3, #28
 8002c9e:	4917      	ldr	r1, [pc, #92]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe f950 	bl	8000f50 <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cb4:	f7fe f94c 	bl	8000f50 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e09f      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	f040 8095 	bne.w	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe f936 	bl	8000f50 <HAL_GetTick>
 8002ce4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce6:	e00f      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ce8:	f7fe f932 	bl	8000f50 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d908      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e085      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	42470068 	.word	0x42470068
 8002d04:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d08:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d14:	d0e8      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d02b      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d127      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d3e:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	3b01      	subs	r3, #1
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	061b      	lsls	r3, r3, #24
 8002d6c:	4928      	ldr	r1, [pc, #160]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d74:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	3b01      	subs	r3, #1
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	4922      	ldr	r1, [pc, #136]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01d      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da2:	d118      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	0e1b      	lsrs	r3, r3, #24
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	019b      	lsls	r3, r3, #6
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	4910      	ldr	r1, [pc, #64]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe f8b8 	bl	8000f50 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002de4:	f7fe f8b4 	bl	8000f50 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e007      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e02:	d1ef      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3730      	adds	r7, #48	; 0x30
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	42470070 	.word	0x42470070

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e1c:	b0ae      	sub	sp, #184	; 0xb8
 8002e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e3e:	4bcb      	ldr	r3, [pc, #812]	; (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	f200 8206 	bhi.w	8003258 <HAL_RCC_GetSysClockFreq+0x440>
 8002e4c:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e89 	.word	0x08002e89
 8002e58:	08003259 	.word	0x08003259
 8002e5c:	08003259 	.word	0x08003259
 8002e60:	08003259 	.word	0x08003259
 8002e64:	08002e91 	.word	0x08002e91
 8002e68:	08003259 	.word	0x08003259
 8002e6c:	08003259 	.word	0x08003259
 8002e70:	08003259 	.word	0x08003259
 8002e74:	08002e99 	.word	0x08002e99
 8002e78:	08003259 	.word	0x08003259
 8002e7c:	08003259 	.word	0x08003259
 8002e80:	08003259 	.word	0x08003259
 8002e84:	08003089 	.word	0x08003089
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4bb9      	ldr	r3, [pc, #740]	; (8003170 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e8e:	e1e7      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e90:	4bb8      	ldr	r3, [pc, #736]	; (8003174 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e96:	e1e3      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e98:	4bb4      	ldr	r3, [pc, #720]	; (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea4:	4bb1      	ldr	r3, [pc, #708]	; (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d071      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb0:	4bae      	ldr	r3, [pc, #696]	; (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ebc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	0159      	lsls	r1, r3, #5
 8002ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee8:	0150      	lsls	r0, r2, #5
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4621      	mov	r1, r4
 8002ef0:	1a51      	subs	r1, r2, r1
 8002ef2:	6439      	str	r1, [r7, #64]	; 0x40
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8002efa:	647b      	str	r3, [r7, #68]	; 0x44
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f08:	4649      	mov	r1, r9
 8002f0a:	018b      	lsls	r3, r1, #6
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f12:	4641      	mov	r1, r8
 8002f14:	018a      	lsls	r2, r1, #6
 8002f16:	4641      	mov	r1, r8
 8002f18:	1a51      	subs	r1, r2, r1
 8002f1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f30:	4649      	mov	r1, r9
 8002f32:	00cb      	lsls	r3, r1, #3
 8002f34:	4641      	mov	r1, r8
 8002f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	00ca      	lsls	r2, r1, #3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	4622      	mov	r2, r4
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4a:	462b      	mov	r3, r5
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	eb42 0303 	adc.w	r3, r2, r3
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f60:	4629      	mov	r1, r5
 8002f62:	024b      	lsls	r3, r1, #9
 8002f64:	4621      	mov	r1, r4
 8002f66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	024a      	lsls	r2, r1, #9
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f84:	f7fd fdfc 	bl	8000b80 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f92:	e067      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f94:	4b75      	ldr	r3, [pc, #468]	; (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fa0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fac:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fae:	2300      	movs	r3, #0
 8002fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	0159      	lsls	r1, r3, #5
 8002fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc8:	0150      	lsls	r0, r2, #5
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4621      	mov	r1, r4
 8002fd0:	1a51      	subs	r1, r2, r1
 8002fd2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fe8:	4649      	mov	r1, r9
 8002fea:	018b      	lsls	r3, r1, #6
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	018a      	lsls	r2, r1, #6
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800300e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003016:	4692      	mov	sl, r2
 8003018:	469b      	mov	fp, r3
 800301a:	4623      	mov	r3, r4
 800301c:	eb1a 0303 	adds.w	r3, sl, r3
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	462b      	mov	r3, r5
 8003024:	eb4b 0303 	adc.w	r3, fp, r3
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003036:	4629      	mov	r1, r5
 8003038:	028b      	lsls	r3, r1, #10
 800303a:	4621      	mov	r1, r4
 800303c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003040:	4621      	mov	r1, r4
 8003042:	028a      	lsls	r2, r1, #10
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800304c:	2200      	movs	r2, #0
 800304e:	673b      	str	r3, [r7, #112]	; 0x70
 8003050:	677a      	str	r2, [r7, #116]	; 0x74
 8003052:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003056:	f7fd fd93 	bl	8000b80 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4613      	mov	r3, r2
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003064:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	3301      	adds	r3, #1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800307a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003086:	e0eb      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003088:	4b38      	ldr	r3, [pc, #224]	; (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003094:	4b35      	ldr	r3, [pc, #212]	; (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d06b      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	2200      	movs	r2, #0
 80030a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80030aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b2:	663b      	str	r3, [r7, #96]	; 0x60
 80030b4:	2300      	movs	r3, #0
 80030b6:	667b      	str	r3, [r7, #100]	; 0x64
 80030b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030bc:	4622      	mov	r2, r4
 80030be:	462b      	mov	r3, r5
 80030c0:	f04f 0000 	mov.w	r0, #0
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	0159      	lsls	r1, r3, #5
 80030ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ce:	0150      	lsls	r0, r2, #5
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4621      	mov	r1, r4
 80030d6:	1a51      	subs	r1, r2, r1
 80030d8:	61b9      	str	r1, [r7, #24]
 80030da:	4629      	mov	r1, r5
 80030dc:	eb63 0301 	sbc.w	r3, r3, r1
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030ee:	4659      	mov	r1, fp
 80030f0:	018b      	lsls	r3, r1, #6
 80030f2:	4651      	mov	r1, sl
 80030f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030f8:	4651      	mov	r1, sl
 80030fa:	018a      	lsls	r2, r1, #6
 80030fc:	4651      	mov	r1, sl
 80030fe:	ebb2 0801 	subs.w	r8, r2, r1
 8003102:	4659      	mov	r1, fp
 8003104:	eb63 0901 	sbc.w	r9, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003114:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003118:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311c:	4690      	mov	r8, r2
 800311e:	4699      	mov	r9, r3
 8003120:	4623      	mov	r3, r4
 8003122:	eb18 0303 	adds.w	r3, r8, r3
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	462b      	mov	r3, r5
 800312a:	eb49 0303 	adc.w	r3, r9, r3
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800313c:	4629      	mov	r1, r5
 800313e:	024b      	lsls	r3, r1, #9
 8003140:	4621      	mov	r1, r4
 8003142:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003146:	4621      	mov	r1, r4
 8003148:	024a      	lsls	r2, r1, #9
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003152:	2200      	movs	r2, #0
 8003154:	65bb      	str	r3, [r7, #88]	; 0x58
 8003156:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003158:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800315c:	f7fd fd10 	bl	8000b80 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800316a:	e065      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x420>
 800316c:	40023800 	.word	0x40023800
 8003170:	00f42400 	.word	0x00f42400
 8003174:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003178:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_GetSysClockFreq+0x458>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	2200      	movs	r2, #0
 8003180:	4618      	mov	r0, r3
 8003182:	4611      	mov	r1, r2
 8003184:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003188:	653b      	str	r3, [r7, #80]	; 0x50
 800318a:	2300      	movs	r3, #0
 800318c:	657b      	str	r3, [r7, #84]	; 0x54
 800318e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003192:	4642      	mov	r2, r8
 8003194:	464b      	mov	r3, r9
 8003196:	f04f 0000 	mov.w	r0, #0
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	0159      	lsls	r1, r3, #5
 80031a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a4:	0150      	lsls	r0, r2, #5
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4641      	mov	r1, r8
 80031ac:	1a51      	subs	r1, r2, r1
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	4649      	mov	r1, r9
 80031b2:	eb63 0301 	sbc.w	r3, r3, r1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031c4:	4659      	mov	r1, fp
 80031c6:	018b      	lsls	r3, r1, #6
 80031c8:	4651      	mov	r1, sl
 80031ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ce:	4651      	mov	r1, sl
 80031d0:	018a      	lsls	r2, r1, #6
 80031d2:	4651      	mov	r1, sl
 80031d4:	1a54      	subs	r4, r2, r1
 80031d6:	4659      	mov	r1, fp
 80031d8:	eb63 0501 	sbc.w	r5, r3, r1
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	00eb      	lsls	r3, r5, #3
 80031e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ea:	00e2      	lsls	r2, r4, #3
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	4643      	mov	r3, r8
 80031f2:	18e3      	adds	r3, r4, r3
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	464b      	mov	r3, r9
 80031f8:	eb45 0303 	adc.w	r3, r5, r3
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320a:	4629      	mov	r1, r5
 800320c:	028b      	lsls	r3, r1, #10
 800320e:	4621      	mov	r1, r4
 8003210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003214:	4621      	mov	r1, r4
 8003216:	028a      	lsls	r2, r1, #10
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003220:	2200      	movs	r2, #0
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
 8003224:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003226:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800322a:	f7fd fca9 	bl	8000b80 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4613      	mov	r3, r2
 8003234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003238:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <HAL_RCC_GetSysClockFreq+0x458>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0f1b      	lsrs	r3, r3, #28
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800324a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003256:	e003      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_GetSysClockFreq+0x45c>)
 800325a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800325e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003264:	4618      	mov	r0, r3
 8003266:	37b8      	adds	r7, #184	; 0xb8
 8003268:	46bd      	mov	sp, r7
 800326a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	00f42400 	.word	0x00f42400

08003278 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8083 	beq.w	8003398 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003292:	4b95      	ldr	r3, [pc, #596]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b04      	cmp	r3, #4
 800329c:	d019      	beq.n	80032d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800329e:	4b92      	ldr	r3, [pc, #584]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d106      	bne.n	80032b8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032aa:	4b8f      	ldr	r3, [pc, #572]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b6:	d00c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b8:	4b8b      	ldr	r3, [pc, #556]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d112      	bne.n	80032ea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c4:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d0:	d10b      	bne.n	80032ea <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d2:	4b85      	ldr	r3, [pc, #532]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d05b      	beq.n	8003396 <HAL_RCC_OscConfig+0x11e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d157      	bne.n	8003396 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e216      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x8a>
 80032f4:	4b7c      	ldr	r3, [pc, #496]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7b      	ldr	r2, [pc, #492]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	e01d      	b.n	800333e <HAL_RCC_OscConfig+0xc6>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800330a:	d10c      	bne.n	8003326 <HAL_RCC_OscConfig+0xae>
 800330c:	4b76      	ldr	r3, [pc, #472]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a75      	ldr	r2, [pc, #468]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b73      	ldr	r3, [pc, #460]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a72      	ldr	r2, [pc, #456]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e00b      	b.n	800333e <HAL_RCC_OscConfig+0xc6>
 8003326:	4b70      	ldr	r3, [pc, #448]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6f      	ldr	r2, [pc, #444]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 800332c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6c      	ldr	r2, [pc, #432]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d013      	beq.n	800336e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd fe03 	bl	8000f50 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334e:	f7fd fdff 	bl	8000f50 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b64      	cmp	r3, #100	; 0x64
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1db      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003360:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0xd6>
 800336c:	e014      	b.n	8003398 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fd fdef 	bl	8000f50 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003376:	f7fd fdeb 	bl	8000f50 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b64      	cmp	r3, #100	; 0x64
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1c7      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003388:	4b57      	ldr	r3, [pc, #348]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0xfe>
 8003394:	e000      	b.n	8003398 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003396:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d06f      	beq.n	8003484 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d017      	beq.n	80033e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033b0:	4b4d      	ldr	r3, [pc, #308]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033bc:	4b4a      	ldr	r3, [pc, #296]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c8:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d11c      	bne.n	800340e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d4:	4b44      	ldr	r3, [pc, #272]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d116      	bne.n	800340e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e0:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_OscConfig+0x180>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e18f      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4938      	ldr	r1, [pc, #224]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340c:	e03a      	b.n	8003484 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003416:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_RCC_OscConfig+0x274>)
 8003418:	2201      	movs	r2, #1
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd fd98 	bl	8000f50 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003424:	f7fd fd94 	bl	8000f50 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e170      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003436:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4925      	ldr	r1, [pc, #148]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
 8003456:	e015      	b.n	8003484 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_OscConfig+0x274>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fd fd77 	bl	8000f50 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003466:	f7fd fd73 	bl	8000f50 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e14f      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003478:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d037      	beq.n	8003500 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d016      	beq.n	80034c6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_RCC_OscConfig+0x278>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349e:	f7fd fd57 	bl	8000f50 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a6:	f7fd fd53 	bl	8000f50 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e12f      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_OscConfig+0x270>)
 80034ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x22e>
 80034c4:	e01c      	b.n	8003500 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_OscConfig+0x278>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fd fd40 	bl	8000f50 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d2:	e00f      	b.n	80034f4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d4:	f7fd fd3c 	bl	8000f50 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d908      	bls.n	80034f4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e118      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	42470000 	.word	0x42470000
 80034f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b8a      	ldr	r3, [pc, #552]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80034f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e9      	bne.n	80034d4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8097 	beq.w	800363c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b83      	ldr	r3, [pc, #524]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b7f      	ldr	r3, [pc, #508]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a7e      	ldr	r2, [pc, #504]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b7c      	ldr	r3, [pc, #496]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	4b79      	ldr	r3, [pc, #484]	; (8003724 <HAL_RCC_OscConfig+0x4ac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d118      	bne.n	800357c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	; (8003724 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003556:	f7fd fcfb 	bl	8000f50 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355e:	f7fd fcf7 	bl	8000f50 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0d3      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	4b6c      	ldr	r3, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x4ac>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x31a>
 8003584:	4b66      	ldr	r3, [pc, #408]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	4a65      	ldr	r2, [pc, #404]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	; 0x70
 8003590:	e01c      	b.n	80035cc <HAL_RCC_OscConfig+0x354>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x33c>
 800359a:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a60      	ldr	r2, [pc, #384]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a5d      	ldr	r2, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0x354>
 80035b4:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a59      	ldr	r2, [pc, #356]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
 80035c0:	4b57      	ldr	r3, [pc, #348]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a56      	ldr	r2, [pc, #344]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80035c6:	f023 0304 	bic.w	r3, r3, #4
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d015      	beq.n	8003600 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fd fcbc 	bl	8000f50 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fd fcb8 	bl	8000f50 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e092      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ee      	beq.n	80035dc <HAL_RCC_OscConfig+0x364>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd fca6 	bl	8000f50 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fd fca2 	bl	8000f50 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e07c      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	4b40      	ldr	r3, [pc, #256]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1ee      	bne.n	8003608 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a3a      	ldr	r2, [pc, #232]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d068      	beq.n	8003716 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d060      	beq.n	8003712 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d145      	bne.n	80036e4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_RCC_OscConfig+0x4b0>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd fc77 	bl	8000f50 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003666:	f7fd fc73 	bl	8000f50 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e04f      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	019b      	lsls	r3, r3, #6
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	3b01      	subs	r3, #1
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	071b      	lsls	r3, r3, #28
 80036b0:	491b      	ldr	r1, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b6:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <HAL_RCC_OscConfig+0x4b0>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd fc48 	bl	8000f50 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fd fc44 	bl	8000f50 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e020      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x44c>
 80036e2:	e018      	b.n	8003716 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCC_OscConfig+0x4b0>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fd fc31 	bl	8000f50 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fd fc2d 	bl	8000f50 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e009      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_OscConfig+0x4a8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x47a>
 8003710:	e001      	b.n	8003716 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000
 8003728:	42470060 	.word	0x42470060

0800372c <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_UART_IRQHandler+0x52>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f990 	bl	8003a9c <UART_Receive_IT>
      return;
 800377c:	e0cb      	b.n	8003916 <HAL_UART_IRQHandler+0x1ea>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80ab 	beq.w	80038dc <HAL_UART_IRQHandler+0x1b0>
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_UART_IRQHandler+0x70>
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80a0 	beq.w	80038dc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_UART_IRQHandler+0x90>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_UART_IRQHandler+0xb0>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	f043 0202 	orr.w	r2, r3, #2
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_UART_IRQHandler+0xd0>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	f043 0204 	orr.w	r2, r3, #4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_UART_IRQHandler+0xf0>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	f043 0208 	orr.w	r2, r3, #8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d077      	beq.n	8003914 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_UART_IRQHandler+0x112>
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f92f 	bl	8003a9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <HAL_UART_IRQHandler+0x13a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d031      	beq.n	80038ca <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f878 	bl	800395c <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d023      	beq.n	80038c2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003888:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	4a21      	ldr	r2, [pc, #132]	; (800391c <HAL_UART_IRQHandler+0x1f0>)
 8003898:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fb38 	bl	8001f14 <HAL_DMA_Abort_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038b4:	4610      	mov	r0, r2
 80038b6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	e00e      	b.n	80038d8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f844 	bl	8003948 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00a      	b.n	80038d8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f840 	bl	8003948 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e006      	b.n	80038d8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f83c 	bl	8003948 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80038d6:	e01d      	b.n	8003914 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	bf00      	nop
    return;
 80038da:	e01b      	b.n	8003914 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_UART_IRQHandler+0x1cc>
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f865 	bl	80039c0 <UART_Transmit_IT>
    return;
 80038f6:	e00e      	b.n	8003916 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_UART_IRQHandler+0x1ea>
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8ad 	bl	8003a6c <UART_EndTransmit_IT>
    return;
 8003912:	e000      	b.n	8003916 <HAL_UART_IRQHandler+0x1ea>
    return;
 8003914:	bf00      	nop
  }
}
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	08003999 	.word	0x08003999

08003920 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003972:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f7ff ffc8 	bl	8003948 <HAL_UART_ErrorCallback>
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b21      	cmp	r3, #33	; 0x21
 80039d2:	d144      	bne.n	8003a5e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039dc:	d11a      	bne.n	8003a14 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]
 8003a06:	e00e      	b.n	8003a26 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	621a      	str	r2, [r3, #32]
 8003a12:	e008      	b.n	8003a26 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	1c59      	adds	r1, r3, #1
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6211      	str	r1, [r2, #32]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4619      	mov	r1, r3
 8003a34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a82:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff47 	bl	8003920 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b22      	cmp	r3, #34	; 0x22
 8003aae:	d169      	bne.n	8003b84 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d123      	bne.n	8003b02 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10e      	bne.n	8003ae6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	1c9a      	adds	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae4:	e029      	b.n	8003b3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
 8003b00:	e01b      	b.n	8003b3a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6858      	ldr	r0, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	1c59      	adds	r1, r3, #1
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6291      	str	r1, [r2, #40]	; 0x28
 8003b1a:	b2c2      	uxtb	r2, r0
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e00c      	b.n	8003b3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	1c58      	adds	r0, r3, #1
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	6288      	str	r0, [r1, #40]	; 0x28
 8003b32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4619      	mov	r1, r3
 8003b48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d118      	bne.n	8003b80 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fedc 	bl	8003934 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e002      	b.n	8003b86 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <DH_Matrix>:
#include "ForwardKinematics.h"

void CopyDHToPoisition(arm_matrix_instance_f32  *DH, float *Position);

void DH_Matrix (arm_matrix_instance_f32 *T, float alpha, float theta, float a, float d)
{
 8003b8e:	b590      	push	{r4, r7, lr}
 8003b90:	ed2d 8b02 	vpush	{d8}
 8003b94:	b087      	sub	sp, #28
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6178      	str	r0, [r7, #20]
 8003b9a:	ed87 0a04 	vstr	s0, [r7, #16]
 8003b9e:	edc7 0a03 	vstr	s1, [r7, #12]
 8003ba2:	ed87 1a02 	vstr	s2, [r7, #8]
 8003ba6:	edc7 1a01 	vstr	s3, [r7, #4]
	T->pData[0]=cosf(theta);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	685c      	ldr	r4, [r3, #4]
 8003bae:	ed97 0a03 	vldr	s0, [r7, #12]
 8003bb2:	f003 ffc5 	bl	8007b40 <cosf>
 8003bb6:	eef0 7a40 	vmov.f32	s15, s0
 8003bba:	edc4 7a00 	vstr	s15, [r4]
	T->pData[1]=-sinf(theta)*cosf(alpha);
 8003bbe:	ed97 0a03 	vldr	s0, [r7, #12]
 8003bc2:	f004 f801 	bl	8007bc8 <sinf>
 8003bc6:	eef0 7a40 	vmov.f32	s15, s0
 8003bca:	eeb1 8a67 	vneg.f32	s16, s15
 8003bce:	ed97 0a04 	vldr	s0, [r7, #16]
 8003bd2:	f003 ffb5 	bl	8007b40 <cosf>
 8003bd6:	eef0 7a40 	vmov.f32	s15, s0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003be4:	edc3 7a00 	vstr	s15, [r3]
	T->pData[2]=sinf(theta)*sinf(alpha);
 8003be8:	ed97 0a03 	vldr	s0, [r7, #12]
 8003bec:	f003 ffec 	bl	8007bc8 <sinf>
 8003bf0:	eeb0 8a40 	vmov.f32	s16, s0
 8003bf4:	ed97 0a04 	vldr	s0, [r7, #16]
 8003bf8:	f003 ffe6 	bl	8007bc8 <sinf>
 8003bfc:	eef0 7a40 	vmov.f32	s15, s0
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	3308      	adds	r3, #8
 8003c06:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003c0a:	edc3 7a00 	vstr	s15, [r3]
	T->pData[3]=a*cosf(theta);
 8003c0e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c12:	f003 ff95 	bl	8007b40 <cosf>
 8003c16:	eeb0 7a40 	vmov.f32	s14, s0
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c28:	edc3 7a00 	vstr	s15, [r3]

	T->pData[4]=sinf(theta);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f103 0410 	add.w	r4, r3, #16
 8003c34:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c38:	f003 ffc6 	bl	8007bc8 <sinf>
 8003c3c:	eef0 7a40 	vmov.f32	s15, s0
 8003c40:	edc4 7a00 	vstr	s15, [r4]
	T->pData[5]=cosf(theta)*cosf(alpha);
 8003c44:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c48:	f003 ff7a 	bl	8007b40 <cosf>
 8003c4c:	eeb0 8a40 	vmov.f32	s16, s0
 8003c50:	ed97 0a04 	vldr	s0, [r7, #16]
 8003c54:	f003 ff74 	bl	8007b40 <cosf>
 8003c58:	eef0 7a40 	vmov.f32	s15, s0
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	3314      	adds	r3, #20
 8003c62:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003c66:	edc3 7a00 	vstr	s15, [r3]
	T->pData[6]=-sinf(alpha)*cosf(theta);
 8003c6a:	ed97 0a04 	vldr	s0, [r7, #16]
 8003c6e:	f003 ffab 	bl	8007bc8 <sinf>
 8003c72:	eef0 7a40 	vmov.f32	s15, s0
 8003c76:	eeb1 8a67 	vneg.f32	s16, s15
 8003c7a:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c7e:	f003 ff5f 	bl	8007b40 <cosf>
 8003c82:	eef0 7a40 	vmov.f32	s15, s0
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003c90:	edc3 7a00 	vstr	s15, [r3]
	T->pData[7]=sinf(theta)*a;
 8003c94:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c98:	f003 ff96 	bl	8007bc8 <sinf>
 8003c9c:	eeb0 7a40 	vmov.f32	s14, s0
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	331c      	adds	r3, #28
 8003ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc3 7a00 	vstr	s15, [r3]

	T->pData[8]=0.0;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
	T->pData[9]=sinf(alpha);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8003cc6:	ed97 0a04 	vldr	s0, [r7, #16]
 8003cca:	f003 ff7d 	bl	8007bc8 <sinf>
 8003cce:	eef0 7a40 	vmov.f32	s15, s0
 8003cd2:	edc4 7a00 	vstr	s15, [r4]
	T->pData[10]=cosf(alpha);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8003cde:	ed97 0a04 	vldr	s0, [r7, #16]
 8003ce2:	f003 ff2d 	bl	8007b40 <cosf>
 8003ce6:	eef0 7a40 	vmov.f32	s15, s0
 8003cea:	edc4 7a00 	vstr	s15, [r4]
	T->pData[11]=d;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	332c      	adds	r3, #44	; 0x2c
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	601a      	str	r2, [r3, #0]

	T->pData[12]=0.0;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	3330      	adds	r3, #48	; 0x30
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
	T->pData[13]=0.0;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	3334      	adds	r3, #52	; 0x34
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
	T->pData[14]=0.0;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	3338      	adds	r3, #56	; 0x38
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
	T->pData[15]=1.0;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	333c      	adds	r3, #60	; 0x3c
 8003d22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d26:	601a      	str	r2, [r3, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	ecbd 8b02 	vpop	{d8}
 8003d32:	bd90      	pop	{r4, r7, pc}

08003d34 <CopyDHToPoisition>:
void CopyDHToPoisition(arm_matrix_instance_f32  *DH, float Position[])
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
	Position[0]=DH->pData[3];
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	601a      	str	r2, [r3, #0]
	Position[1]=DH->pData[7];
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	69d2      	ldr	r2, [r2, #28]
 8003d52:	601a      	str	r2, [r3, #0]
	Position[2]=DH->pData[11];
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d5e:	601a      	str	r2, [r3, #0]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	0000      	movs	r0, r0
	...

08003d70 <CalculateForwardKinematics>:
void CalculateForwardKinematics(float Joints[], float Position[][3],
		uint8_t mode, arm_matrix_instance_f32 *DHMatrix)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b0ba      	sub	sp, #232	; 0xe8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71fb      	strb	r3, [r7, #7]
	/*mode=0 zwraca macierz T05
	 * mode-1 zwraca macierz T06
	 */
	arm_matrix_instance_f32 temp, temp1, temp2;
	float temp_f32[16], temp1_f32[16], temp2_f32[16];
	arm_mat_init_f32(&temp, 4, 4, temp_f32);
 8003d80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d84:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8003d88:	2204      	movs	r2, #4
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	f003 fb94 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp1, 4, 4, temp1_f32);
 8003d90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d94:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8003d98:	2204      	movs	r2, #4
 8003d9a:	2104      	movs	r1, #4
 8003d9c:	f003 fb8c 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp2, 4, 4, temp2_f32);
 8003da0:	f107 0310 	add.w	r3, r7, #16
 8003da4:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003da8:	2204      	movs	r2, #4
 8003daa:	2104      	movs	r1, #4
 8003dac:	f003 fb84 	bl	80074b8 <arm_mat_init_f32>

	/*1 DOF*/
	DH_Matrix(&temp1, -M_PI / 2, Joints[0], 0, 0);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003dba:	eddf 1a8b 	vldr	s3, [pc, #556]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003dbe:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003dc2:	eef0 0a67 	vmov.f32	s1, s15
 8003dc6:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8003fec <CalculateForwardKinematics+0x27c>
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fedf 	bl	8003b8e <DH_Matrix>
	CopyDHToPoisition(&temp1, Position[0]);
 8003dd0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff ffac 	bl	8003d34 <CopyDHToPoisition>

	/*2 DOF*/
	DH_Matrix(&temp, 0, Joints[1]-M_PI/2, DOF2_3Distance, 0);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3304      	adds	r3, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc fb74 	bl	80004d0 <__aeabi_f2d>
 8003de8:	a37d      	add	r3, pc, #500	; (adr r3, 8003fe0 <CalculateForwardKinematics+0x270>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc fa0f 	bl	8000210 <__aeabi_dsub>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f7fc fe71 	bl	8000ae0 <__aeabi_d2f>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003e04:	eddf 1a78 	vldr	s3, [pc, #480]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003e08:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8003ff0 <CalculateForwardKinematics+0x280>
 8003e0c:	ee00 2a90 	vmov	s1, r2
 8003e10:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff feba 	bl	8003b8e <DH_Matrix>
	arm_mat_mult_f32(&temp1, &temp, &temp2);
 8003e1a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003e1e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8003e22:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003e26:	4618      	mov	r0, r3
 8003e28:	f003 fb5e 	bl	80074e8 <arm_mat_mult_f32>
	CopyDHToPoisition(&temp2, Position[1]);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f103 020c 	add.w	r2, r3, #12
 8003e32:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff7b 	bl	8003d34 <CopyDHToPoisition>

	/*3 DOF*/
	DH_Matrix(&temp, -M_PI / 2, Joints[2], 0, 0);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3308      	adds	r3, #8
 8003e42:	edd3 7a00 	vldr	s15, [r3]
 8003e46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003e4a:	eddf 1a67 	vldr	s3, [pc, #412]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003e4e:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003e52:	eef0 0a67 	vmov.f32	s1, s15
 8003e56:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8003fec <CalculateForwardKinematics+0x27c>
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fe97 	bl	8003b8e <DH_Matrix>
	arm_mat_mult_f32(&temp2, &temp, &temp1);
 8003e60:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003e64:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8003e68:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f003 fb3b 	bl	80074e8 <arm_mat_mult_f32>
	CopyDHToPoisition(&temp1, Position[2]);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f103 0218 	add.w	r2, r3, #24
 8003e78:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff58 	bl	8003d34 <CopyDHToPoisition>

	/*4 DOF*/
	DH_Matrix(&temp, M_PI / 2, Joints[3], 0, DOF3_5Distance);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	330c      	adds	r3, #12
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003e90:	eddf 1a58 	vldr	s3, [pc, #352]	; 8003ff4 <CalculateForwardKinematics+0x284>
 8003e94:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003e98:	eef0 0a67 	vmov.f32	s1, s15
 8003e9c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8003ff8 <CalculateForwardKinematics+0x288>
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fe74 	bl	8003b8e <DH_Matrix>
	arm_mat_mult_f32(&temp1, &temp, &temp2);
 8003ea6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003eaa:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8003eae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f003 fb18 	bl	80074e8 <arm_mat_mult_f32>
	CopyDHToPoisition(&temp2, Position[3]);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003ebe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff35 	bl	8003d34 <CopyDHToPoisition>

	if (mode == 0)
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d141      	bne.n	8003f54 <CalculateForwardKinematics+0x1e4>
	{

		/*5 DOF*/
		DH_Matrix(&temp, -M_PI / 2, Joints[4], 0, 0);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3310      	adds	r3, #16
 8003ed4:	edd3 7a00 	vldr	s15, [r3]
 8003ed8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003edc:	eddf 1a42 	vldr	s3, [pc, #264]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003ee0:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003ee4:	eef0 0a67 	vmov.f32	s1, s15
 8003ee8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8003fec <CalculateForwardKinematics+0x27c>
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fe4e 	bl	8003b8e <DH_Matrix>
		arm_mat_mult_f32(&temp2, &temp, DHMatrix);
 8003ef2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8003ef6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f003 faf3 	bl	80074e8 <arm_mat_mult_f32>
		CopyDHToPoisition(DHMatrix, Position[4]);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3330      	adds	r3, #48	; 0x30
 8003f06:	4619      	mov	r1, r3
 8003f08:	6838      	ldr	r0, [r7, #0]
 8003f0a:	f7ff ff13 	bl	8003d34 <CopyDHToPoisition>

		/*6 DOF*/
		DH_Matrix(&temp, 0, Joints[5], 0, GripperLenght);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3314      	adds	r3, #20
 8003f12:	edd3 7a00 	vldr	s15, [r3]
 8003f16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f1a:	eddf 1a38 	vldr	s3, [pc, #224]	; 8003ffc <CalculateForwardKinematics+0x28c>
 8003f1e:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003f22:	eef0 0a67 	vmov.f32	s1, s15
 8003f26:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fe2f 	bl	8003b8e <DH_Matrix>
		arm_mat_mult_f32(DHMatrix, &temp, &temp2);
 8003f30:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003f34:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6838      	ldr	r0, [r7, #0]
 8003f3c:	f003 fad4 	bl	80074e8 <arm_mat_mult_f32>
		CopyDHToPoisition(&temp2, Position[5]);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003f46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fef1 	bl	8003d34 <CopyDHToPoisition>
		DH_Matrix(&temp, 0, Joints[5], 0, GripperLenght);
		arm_mat_mult_f32(&temp1, &temp, DHMatrix);
		CopyDHToPoisition(DHMatrix, Position[5]);
	}

}
 8003f52:	e041      	b.n	8003fd8 <CalculateForwardKinematics+0x268>
		DH_Matrix(&temp, -M_PI / 2, Joints[4], 0, 0);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3310      	adds	r3, #16
 8003f58:	edd3 7a00 	vldr	s15, [r3]
 8003f5c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f60:	eddf 1a21 	vldr	s3, [pc, #132]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003f64:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003f68:	eef0 0a67 	vmov.f32	s1, s15
 8003f6c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003fec <CalculateForwardKinematics+0x27c>
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff fe0c 	bl	8003b8e <DH_Matrix>
		arm_mat_mult_f32(&temp2, &temp, &temp1);
 8003f76:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003f7a:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8003f7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 fab0 	bl	80074e8 <arm_mat_mult_f32>
		CopyDHToPoisition(&temp1, Position[4]);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fecd 	bl	8003d34 <CopyDHToPoisition>
		DH_Matrix(&temp, 0, Joints[5], 0, GripperLenght);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003fa6:	eddf 1a15 	vldr	s3, [pc, #84]	; 8003ffc <CalculateForwardKinematics+0x28c>
 8003faa:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003fae:	eef0 0a67 	vmov.f32	s1, s15
 8003fb2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003fe8 <CalculateForwardKinematics+0x278>
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fde9 	bl	8003b8e <DH_Matrix>
		arm_mat_mult_f32(&temp1, &temp, DHMatrix);
 8003fbc:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8003fc0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f003 fa8e 	bl	80074e8 <arm_mat_mult_f32>
		CopyDHToPoisition(DHMatrix, Position[5]);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	333c      	adds	r3, #60	; 0x3c
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	6838      	ldr	r0, [r7, #0]
 8003fd4:	f7ff feae 	bl	8003d34 <CopyDHToPoisition>
}
 8003fd8:	bf00      	nop
 8003fda:	37e8      	adds	r7, #232	; 0xe8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	54442d18 	.word	0x54442d18
 8003fe4:	3ff921fb 	.word	0x3ff921fb
 8003fe8:	00000000 	.word	0x00000000
 8003fec:	bfc90fdb 	.word	0xbfc90fdb
 8003ff0:	44098000 	.word	0x44098000
 8003ff4:	43ff0000 	.word	0x43ff0000
 8003ff8:	3fc90fdb 	.word	0x3fc90fdb
 8003ffc:	42c80000 	.word	0x42c80000

08004000 <CalculatePositionIncrement>:
	if (ManipulatorMode > VELOCITY) {
		CalculateInverseKinematics();
	}
}
void CalculatePositionIncrement()
{
 8004000:	b5b0      	push	{r4, r5, r7, lr}
 8004002:	b092      	sub	sp, #72	; 0x48
 8004004:	af00      	add	r7, sp, #0

	if (ManipulatorMode==VEL_GLOB)
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <CalculatePositionIncrement+0xe8>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b05      	cmp	r3, #5
 800400c:	f040 8134 	bne.w	8004278 <CalculatePositionIncrement+0x278>
	{
		if (DisconnectDoF==DOF456)
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <CalculatePositionIncrement+0xec>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d16f      	bne.n	80040f8 <CalculatePositionIncrement+0xf8>
		{
			WristPosition.x=WristPosition.x+Velocity.x*VELOCITY_DELTA_T;
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <CalculatePositionIncrement+0xf0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc fa57 	bl	80004d0 <__aeabi_f2d>
 8004022:	4604      	mov	r4, r0
 8004024:	460d      	mov	r5, r1
 8004026:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <CalculatePositionIncrement+0xf4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fc fa50 	bl	80004d0 <__aeabi_f2d>
 8004030:	a32b      	add	r3, pc, #172	; (adr r3, 80040e0 <CalculatePositionIncrement+0xe0>)
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f7fc faa3 	bl	8000580 <__aeabi_dmul>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4620      	mov	r0, r4
 8004040:	4629      	mov	r1, r5
 8004042:	f7fc f8e7 	bl	8000214 <__adddf3>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	f7fc fd47 	bl	8000ae0 <__aeabi_d2f>
 8004052:	4603      	mov	r3, r0
 8004054:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <CalculatePositionIncrement+0xf0>)
 8004056:	6013      	str	r3, [r2, #0]
			WristPosition.y=WristPosition.y+Velocity.y*VELOCITY_DELTA_T;
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <CalculatePositionIncrement+0xf0>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	f7fc fa37 	bl	80004d0 <__aeabi_f2d>
 8004062:	4604      	mov	r4, r0
 8004064:	460d      	mov	r5, r1
 8004066:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <CalculatePositionIncrement+0xf4>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fa30 	bl	80004d0 <__aeabi_f2d>
 8004070:	a31b      	add	r3, pc, #108	; (adr r3, 80040e0 <CalculatePositionIncrement+0xe0>)
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f7fc fa83 	bl	8000580 <__aeabi_dmul>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4620      	mov	r0, r4
 8004080:	4629      	mov	r1, r5
 8004082:	f7fc f8c7 	bl	8000214 <__adddf3>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4610      	mov	r0, r2
 800408c:	4619      	mov	r1, r3
 800408e:	f7fc fd27 	bl	8000ae0 <__aeabi_d2f>
 8004092:	4603      	mov	r3, r0
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <CalculatePositionIncrement+0xf0>)
 8004096:	6053      	str	r3, [r2, #4]
			WristPosition.z=WristPosition.z+Velocity.z*VELOCITY_DELTA_T;
 8004098:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <CalculatePositionIncrement+0xf0>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fc fa17 	bl	80004d0 <__aeabi_f2d>
 80040a2:	4604      	mov	r4, r0
 80040a4:	460d      	mov	r5, r1
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <CalculatePositionIncrement+0xf4>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fa10 	bl	80004d0 <__aeabi_f2d>
 80040b0:	a30b      	add	r3, pc, #44	; (adr r3, 80040e0 <CalculatePositionIncrement+0xe0>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc fa63 	bl	8000580 <__aeabi_dmul>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4620      	mov	r0, r4
 80040c0:	4629      	mov	r1, r5
 80040c2:	f7fc f8a7 	bl	8000214 <__adddf3>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fc fd07 	bl	8000ae0 <__aeabi_d2f>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4a06      	ldr	r2, [pc, #24]	; (80040f0 <CalculatePositionIncrement+0xf0>)
 80040d6:	6093      	str	r3, [r2, #8]
 80040d8:	e0ce      	b.n	8004278 <CalculatePositionIncrement+0x278>
 80040da:	bf00      	nop
 80040dc:	f3af 8000 	nop.w
 80040e0:	47ae147b 	.word	0x47ae147b
 80040e4:	3f847ae1 	.word	0x3f847ae1
 80040e8:	200000d8 	.word	0x200000d8
 80040ec:	200000d9 	.word	0x200000d9
 80040f0:	2000009c 	.word	0x2000009c
 80040f4:	200000b4 	.word	0x200000b4

		}
		else
		{
			TCPPosition.x=TCPPosition.x+Velocity.x*VELOCITY_DELTA_T;
 80040f8:	4b9f      	ldr	r3, [pc, #636]	; (8004378 <CalculatePositionIncrement+0x378>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc f9e7 	bl	80004d0 <__aeabi_f2d>
 8004102:	4604      	mov	r4, r0
 8004104:	460d      	mov	r5, r1
 8004106:	4b9d      	ldr	r3, [pc, #628]	; (800437c <CalculatePositionIncrement+0x37c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc f9e0 	bl	80004d0 <__aeabi_f2d>
 8004110:	a397      	add	r3, pc, #604	; (adr r3, 8004370 <CalculatePositionIncrement+0x370>)
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f7fc fa33 	bl	8000580 <__aeabi_dmul>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4620      	mov	r0, r4
 8004120:	4629      	mov	r1, r5
 8004122:	f7fc f877 	bl	8000214 <__adddf3>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f7fc fcd7 	bl	8000ae0 <__aeabi_d2f>
 8004132:	4603      	mov	r3, r0
 8004134:	4a90      	ldr	r2, [pc, #576]	; (8004378 <CalculatePositionIncrement+0x378>)
 8004136:	6013      	str	r3, [r2, #0]
			TCPPosition.y=TCPPosition.y+Velocity.y*VELOCITY_DELTA_T;
 8004138:	4b8f      	ldr	r3, [pc, #572]	; (8004378 <CalculatePositionIncrement+0x378>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4618      	mov	r0, r3
 800413e:	f7fc f9c7 	bl	80004d0 <__aeabi_f2d>
 8004142:	4604      	mov	r4, r0
 8004144:	460d      	mov	r5, r1
 8004146:	4b8d      	ldr	r3, [pc, #564]	; (800437c <CalculatePositionIncrement+0x37c>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc f9c0 	bl	80004d0 <__aeabi_f2d>
 8004150:	a387      	add	r3, pc, #540	; (adr r3, 8004370 <CalculatePositionIncrement+0x370>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f7fc fa13 	bl	8000580 <__aeabi_dmul>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4620      	mov	r0, r4
 8004160:	4629      	mov	r1, r5
 8004162:	f7fc f857 	bl	8000214 <__adddf3>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f7fc fcb7 	bl	8000ae0 <__aeabi_d2f>
 8004172:	4603      	mov	r3, r0
 8004174:	4a80      	ldr	r2, [pc, #512]	; (8004378 <CalculatePositionIncrement+0x378>)
 8004176:	6053      	str	r3, [r2, #4]
			TCPPosition.z=TCPPosition.z+Velocity.z*VELOCITY_DELTA_T;
 8004178:	4b7f      	ldr	r3, [pc, #508]	; (8004378 <CalculatePositionIncrement+0x378>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc f9a7 	bl	80004d0 <__aeabi_f2d>
 8004182:	4604      	mov	r4, r0
 8004184:	460d      	mov	r5, r1
 8004186:	4b7d      	ldr	r3, [pc, #500]	; (800437c <CalculatePositionIncrement+0x37c>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc f9a0 	bl	80004d0 <__aeabi_f2d>
 8004190:	a377      	add	r3, pc, #476	; (adr r3, 8004370 <CalculatePositionIncrement+0x370>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f7fc f9f3 	bl	8000580 <__aeabi_dmul>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4620      	mov	r0, r4
 80041a0:	4629      	mov	r1, r5
 80041a2:	f7fc f837 	bl	8000214 <__adddf3>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	f7fc fc97 	bl	8000ae0 <__aeabi_d2f>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a70      	ldr	r2, [pc, #448]	; (8004378 <CalculatePositionIncrement+0x378>)
 80041b6:	6093      	str	r3, [r2, #8]
			TCPOrientation.yaw=TCPOrientation.yaw+Omega.yaw*VELOCITY_DELTA_T;
 80041b8:	4b71      	ldr	r3, [pc, #452]	; (8004380 <CalculatePositionIncrement+0x380>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fc f987 	bl	80004d0 <__aeabi_f2d>
 80041c2:	4604      	mov	r4, r0
 80041c4:	460d      	mov	r5, r1
 80041c6:	4b6f      	ldr	r3, [pc, #444]	; (8004384 <CalculatePositionIncrement+0x384>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f980 	bl	80004d0 <__aeabi_f2d>
 80041d0:	a367      	add	r3, pc, #412	; (adr r3, 8004370 <CalculatePositionIncrement+0x370>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f7fc f9d3 	bl	8000580 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4620      	mov	r0, r4
 80041e0:	4629      	mov	r1, r5
 80041e2:	f7fc f817 	bl	8000214 <__adddf3>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
 80041ee:	f7fc fc77 	bl	8000ae0 <__aeabi_d2f>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4a62      	ldr	r2, [pc, #392]	; (8004380 <CalculatePositionIncrement+0x380>)
 80041f6:	6013      	str	r3, [r2, #0]
			TCPOrientation.pitch=TCPOrientation.pitch+Omega.pitch*VELOCITY_DELTA_T;
 80041f8:	4b61      	ldr	r3, [pc, #388]	; (8004380 <CalculatePositionIncrement+0x380>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc f967 	bl	80004d0 <__aeabi_f2d>
 8004202:	4604      	mov	r4, r0
 8004204:	460d      	mov	r5, r1
 8004206:	4b5f      	ldr	r3, [pc, #380]	; (8004384 <CalculatePositionIncrement+0x384>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f960 	bl	80004d0 <__aeabi_f2d>
 8004210:	a357      	add	r3, pc, #348	; (adr r3, 8004370 <CalculatePositionIncrement+0x370>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f7fc f9b3 	bl	8000580 <__aeabi_dmul>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4620      	mov	r0, r4
 8004220:	4629      	mov	r1, r5
 8004222:	f7fb fff7 	bl	8000214 <__adddf3>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	f7fc fc57 	bl	8000ae0 <__aeabi_d2f>
 8004232:	4603      	mov	r3, r0
 8004234:	4a52      	ldr	r2, [pc, #328]	; (8004380 <CalculatePositionIncrement+0x380>)
 8004236:	6053      	str	r3, [r2, #4]
			TCPOrientation.roll=TCPOrientation.roll+Omega.roll*VELOCITY_DELTA_T;
 8004238:	4b51      	ldr	r3, [pc, #324]	; (8004380 <CalculatePositionIncrement+0x380>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc f947 	bl	80004d0 <__aeabi_f2d>
 8004242:	4604      	mov	r4, r0
 8004244:	460d      	mov	r5, r1
 8004246:	4b4f      	ldr	r3, [pc, #316]	; (8004384 <CalculatePositionIncrement+0x384>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc f940 	bl	80004d0 <__aeabi_f2d>
 8004250:	a347      	add	r3, pc, #284	; (adr r3, 8004370 <CalculatePositionIncrement+0x370>)
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f7fc f993 	bl	8000580 <__aeabi_dmul>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4620      	mov	r0, r4
 8004260:	4629      	mov	r1, r5
 8004262:	f7fb ffd7 	bl	8000214 <__adddf3>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	f7fc fc37 	bl	8000ae0 <__aeabi_d2f>
 8004272:	4603      	mov	r3, r0
 8004274:	4a42      	ldr	r2, [pc, #264]	; (8004380 <CalculatePositionIncrement+0x380>)
 8004276:	6093      	str	r3, [r2, #8]
		}
	}
	if (ManipulatorMode==VEL_TOOL)
 8004278:	4b43      	ldr	r3, [pc, #268]	; (8004388 <CalculatePositionIncrement+0x388>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b06      	cmp	r3, #6
 800427e:	f040 815c 	bne.w	800453a <CalculatePositionIncrement+0x53a>
	{
		if(DisconnectDoF==DOF456)
 8004282:	4b42      	ldr	r3, [pc, #264]	; (800438c <CalculatePositionIncrement+0x38c>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b02      	cmp	r3, #2
 8004288:	f040 8084 	bne.w	8004394 <CalculatePositionIncrement+0x394>
		{
			float tempVector[]={Velocity.x,Velocity.y,Velocity.z};
 800428c:	4b3b      	ldr	r3, [pc, #236]	; (800437c <CalculatePositionIncrement+0x37c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004292:	4b3a      	ldr	r3, [pc, #232]	; (800437c <CalculatePositionIncrement+0x37c>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
 8004298:	4b38      	ldr	r3, [pc, #224]	; (800437c <CalculatePositionIncrement+0x37c>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
			float VectorOut[3];
			TransformToolWrist(tempVector,VectorOut);
 800429e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80042a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 feab 	bl	8006004 <TransformToolWrist>
			WristPosition.x=WristPosition.x+VectorOut[0]*VELOCITY_DELTA_T;
 80042ae:	4b38      	ldr	r3, [pc, #224]	; (8004390 <CalculatePositionIncrement+0x390>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f90c 	bl	80004d0 <__aeabi_f2d>
 80042b8:	4604      	mov	r4, r0
 80042ba:	460d      	mov	r5, r1
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc f906 	bl	80004d0 <__aeabi_f2d>
 80042c4:	a32a      	add	r3, pc, #168	; (adr r3, 8004370 <CalculatePositionIncrement+0x370>)
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f7fc f959 	bl	8000580 <__aeabi_dmul>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4620      	mov	r0, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	f7fb ff9d 	bl	8000214 <__adddf3>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4610      	mov	r0, r2
 80042e0:	4619      	mov	r1, r3
 80042e2:	f7fc fbfd 	bl	8000ae0 <__aeabi_d2f>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4a29      	ldr	r2, [pc, #164]	; (8004390 <CalculatePositionIncrement+0x390>)
 80042ea:	6013      	str	r3, [r2, #0]
			WristPosition.y=WristPosition.y+VectorOut[1]*VELOCITY_DELTA_T;
 80042ec:	4b28      	ldr	r3, [pc, #160]	; (8004390 <CalculatePositionIncrement+0x390>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc f8ed 	bl	80004d0 <__aeabi_f2d>
 80042f6:	4604      	mov	r4, r0
 80042f8:	460d      	mov	r5, r1
 80042fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc f8e7 	bl	80004d0 <__aeabi_f2d>
 8004302:	a31b      	add	r3, pc, #108	; (adr r3, 8004370 <CalculatePositionIncrement+0x370>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fc f93a 	bl	8000580 <__aeabi_dmul>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4620      	mov	r0, r4
 8004312:	4629      	mov	r1, r5
 8004314:	f7fb ff7e 	bl	8000214 <__adddf3>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	f7fc fbde 	bl	8000ae0 <__aeabi_d2f>
 8004324:	4603      	mov	r3, r0
 8004326:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <CalculatePositionIncrement+0x390>)
 8004328:	6053      	str	r3, [r2, #4]
			WristPosition.z=WristPosition.z+VectorOut[2]*VELOCITY_DELTA_T;
 800432a:	4b19      	ldr	r3, [pc, #100]	; (8004390 <CalculatePositionIncrement+0x390>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc f8ce 	bl	80004d0 <__aeabi_f2d>
 8004334:	4604      	mov	r4, r0
 8004336:	460d      	mov	r5, r1
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc f8c8 	bl	80004d0 <__aeabi_f2d>
 8004340:	a30b      	add	r3, pc, #44	; (adr r3, 8004370 <CalculatePositionIncrement+0x370>)
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f7fc f91b 	bl	8000580 <__aeabi_dmul>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4620      	mov	r0, r4
 8004350:	4629      	mov	r1, r5
 8004352:	f7fb ff5f 	bl	8000214 <__adddf3>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	f7fc fbbf 	bl	8000ae0 <__aeabi_d2f>
 8004362:	4603      	mov	r3, r0
 8004364:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <CalculatePositionIncrement+0x390>)
 8004366:	6093      	str	r3, [r2, #8]


		}
	}

}
 8004368:	e0e7      	b.n	800453a <CalculatePositionIncrement+0x53a>
 800436a:	bf00      	nop
 800436c:	f3af 8000 	nop.w
 8004370:	47ae147b 	.word	0x47ae147b
 8004374:	3f847ae1 	.word	0x3f847ae1
 8004378:	200000a8 	.word	0x200000a8
 800437c:	200000b4 	.word	0x200000b4
 8004380:	200000c0 	.word	0x200000c0
 8004384:	200000cc 	.word	0x200000cc
 8004388:	200000d8 	.word	0x200000d8
 800438c:	200000d9 	.word	0x200000d9
 8004390:	2000009c 	.word	0x2000009c
			float tempVector[]={Velocity.x,Velocity.y,Velocity.z,Omega.yaw,Omega.pitch,Omega.roll};
 8004394:	4b6e      	ldr	r3, [pc, #440]	; (8004550 <CalculatePositionIncrement+0x550>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <CalculatePositionIncrement+0x550>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	4b6b      	ldr	r3, [pc, #428]	; (8004550 <CalculatePositionIncrement+0x550>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	623b      	str	r3, [r7, #32]
 80043a6:	4b6b      	ldr	r3, [pc, #428]	; (8004554 <CalculatePositionIncrement+0x554>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	4b69      	ldr	r3, [pc, #420]	; (8004554 <CalculatePositionIncrement+0x554>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b2:	4b68      	ldr	r3, [pc, #416]	; (8004554 <CalculatePositionIncrement+0x554>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			TransformToolFull(tempVector,TransformedVector);
 80043b8:	463a      	mov	r2, r7
 80043ba:	f107 0318 	add.w	r3, r7, #24
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 fae7 	bl	8005994 <TransformToolFull>
			TCPPosition.x=TCPPosition.x+TransformedVector[0]*VELOCITY_DELTA_T;
 80043c6:	4b64      	ldr	r3, [pc, #400]	; (8004558 <CalculatePositionIncrement+0x558>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fc f880 	bl	80004d0 <__aeabi_f2d>
 80043d0:	4604      	mov	r4, r0
 80043d2:	460d      	mov	r5, r1
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc f87a 	bl	80004d0 <__aeabi_f2d>
 80043dc:	a35a      	add	r3, pc, #360	; (adr r3, 8004548 <CalculatePositionIncrement+0x548>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fc f8cd 	bl	8000580 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f7fb ff11 	bl	8000214 <__adddf3>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	f7fc fb71 	bl	8000ae0 <__aeabi_d2f>
 80043fe:	4603      	mov	r3, r0
 8004400:	4a55      	ldr	r2, [pc, #340]	; (8004558 <CalculatePositionIncrement+0x558>)
 8004402:	6013      	str	r3, [r2, #0]
			TCPPosition.y=TCPPosition.y+TransformedVector[1]*VELOCITY_DELTA_T;
 8004404:	4b54      	ldr	r3, [pc, #336]	; (8004558 <CalculatePositionIncrement+0x558>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc f861 	bl	80004d0 <__aeabi_f2d>
 800440e:	4604      	mov	r4, r0
 8004410:	460d      	mov	r5, r1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4618      	mov	r0, r3
 8004416:	f7fc f85b 	bl	80004d0 <__aeabi_f2d>
 800441a:	a34b      	add	r3, pc, #300	; (adr r3, 8004548 <CalculatePositionIncrement+0x548>)
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f7fc f8ae 	bl	8000580 <__aeabi_dmul>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4620      	mov	r0, r4
 800442a:	4629      	mov	r1, r5
 800442c:	f7fb fef2 	bl	8000214 <__adddf3>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	f7fc fb52 	bl	8000ae0 <__aeabi_d2f>
 800443c:	4603      	mov	r3, r0
 800443e:	4a46      	ldr	r2, [pc, #280]	; (8004558 <CalculatePositionIncrement+0x558>)
 8004440:	6053      	str	r3, [r2, #4]
			TCPPosition.z=TCPPosition.z+TransformedVector[2]*VELOCITY_DELTA_T;
 8004442:	4b45      	ldr	r3, [pc, #276]	; (8004558 <CalculatePositionIncrement+0x558>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc f842 	bl	80004d0 <__aeabi_f2d>
 800444c:	4604      	mov	r4, r0
 800444e:	460d      	mov	r5, r1
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc f83c 	bl	80004d0 <__aeabi_f2d>
 8004458:	a33b      	add	r3, pc, #236	; (adr r3, 8004548 <CalculatePositionIncrement+0x548>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fc f88f 	bl	8000580 <__aeabi_dmul>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4620      	mov	r0, r4
 8004468:	4629      	mov	r1, r5
 800446a:	f7fb fed3 	bl	8000214 <__adddf3>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	f7fc fb33 	bl	8000ae0 <__aeabi_d2f>
 800447a:	4603      	mov	r3, r0
 800447c:	4a36      	ldr	r2, [pc, #216]	; (8004558 <CalculatePositionIncrement+0x558>)
 800447e:	6093      	str	r3, [r2, #8]
			TCPOrientation.yaw=TCPOrientation.yaw+TransformedVector[3]*VELOCITY_DELTA_T;
 8004480:	4b36      	ldr	r3, [pc, #216]	; (800455c <CalculatePositionIncrement+0x55c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7fc f823 	bl	80004d0 <__aeabi_f2d>
 800448a:	4604      	mov	r4, r0
 800448c:	460d      	mov	r5, r1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc f81d 	bl	80004d0 <__aeabi_f2d>
 8004496:	a32c      	add	r3, pc, #176	; (adr r3, 8004548 <CalculatePositionIncrement+0x548>)
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fc f870 	bl	8000580 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4620      	mov	r0, r4
 80044a6:	4629      	mov	r1, r5
 80044a8:	f7fb feb4 	bl	8000214 <__adddf3>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	f7fc fb14 	bl	8000ae0 <__aeabi_d2f>
 80044b8:	4603      	mov	r3, r0
 80044ba:	4a28      	ldr	r2, [pc, #160]	; (800455c <CalculatePositionIncrement+0x55c>)
 80044bc:	6013      	str	r3, [r2, #0]
			TCPOrientation.pitch=TCPOrientation.pitch+TransformedVector[4]*VELOCITY_DELTA_T;
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <CalculatePositionIncrement+0x55c>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fc f804 	bl	80004d0 <__aeabi_f2d>
 80044c8:	4604      	mov	r4, r0
 80044ca:	460d      	mov	r5, r1
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fb fffe 	bl	80004d0 <__aeabi_f2d>
 80044d4:	a31c      	add	r3, pc, #112	; (adr r3, 8004548 <CalculatePositionIncrement+0x548>)
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f7fc f851 	bl	8000580 <__aeabi_dmul>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4620      	mov	r0, r4
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7fb fe95 	bl	8000214 <__adddf3>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4610      	mov	r0, r2
 80044f0:	4619      	mov	r1, r3
 80044f2:	f7fc faf5 	bl	8000ae0 <__aeabi_d2f>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4a18      	ldr	r2, [pc, #96]	; (800455c <CalculatePositionIncrement+0x55c>)
 80044fa:	6053      	str	r3, [r2, #4]
			TCPOrientation.roll=TCPOrientation.roll+TransformedVector[5]*VELOCITY_DELTA_T;
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <CalculatePositionIncrement+0x55c>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fb ffe5 	bl	80004d0 <__aeabi_f2d>
 8004506:	4604      	mov	r4, r0
 8004508:	460d      	mov	r5, r1
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb ffdf 	bl	80004d0 <__aeabi_f2d>
 8004512:	a30d      	add	r3, pc, #52	; (adr r3, 8004548 <CalculatePositionIncrement+0x548>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fc f832 	bl	8000580 <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4620      	mov	r0, r4
 8004522:	4629      	mov	r1, r5
 8004524:	f7fb fe76 	bl	8000214 <__adddf3>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	f7fc fad6 	bl	8000ae0 <__aeabi_d2f>
 8004534:	4603      	mov	r3, r0
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <CalculatePositionIncrement+0x55c>)
 8004538:	6093      	str	r3, [r2, #8]
}
 800453a:	bf00      	nop
 800453c:	3748      	adds	r7, #72	; 0x48
 800453e:	46bd      	mov	sp, r7
 8004540:	bdb0      	pop	{r4, r5, r7, pc}
 8004542:	bf00      	nop
 8004544:	f3af 8000 	nop.w
 8004548:	47ae147b 	.word	0x47ae147b
 800454c:	3f847ae1 	.word	0x3f847ae1
 8004550:	200000b4 	.word	0x200000b4
 8004554:	200000cc 	.word	0x200000cc
 8004558:	200000a8 	.word	0x200000a8
 800455c:	200000c0 	.word	0x200000c0

08004560 <InverseKinematicsInit>:
/*atan 2 ma kolejno y,x. Zwraca wartosci od (-pi;pi>*/
void InverseKinematicsInit()
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
	/*	WristPosition.x=400.0;
	 WristPosition.y=.0;
	 WristPosition.z=700.0;*/
	TCPPosition.x = 400.0;
 8004564:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <InverseKinematicsInit+0x80>)
 8004566:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <InverseKinematicsInit+0x84>)
 8004568:	601a      	str	r2, [r3, #0]
	TCPPosition.y = 000.0;
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <InverseKinematicsInit+0x80>)
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	605a      	str	r2, [r3, #4]
	TCPPosition.z = 750.0;
 8004572:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <InverseKinematicsInit+0x80>)
 8004574:	4a1c      	ldr	r2, [pc, #112]	; (80045e8 <InverseKinematicsInit+0x88>)
 8004576:	609a      	str	r2, [r3, #8]
	/*	WristPosition.x=300.0;
	 WristPosition.y=100.0;
	 WristPosition.z=300.0;*/
	TCPOrientation.yaw = 0;
 8004578:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <InverseKinematicsInit+0x8c>)
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
	TCPOrientation.pitch = M_PI_2;
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <InverseKinematicsInit+0x8c>)
 8004582:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <InverseKinematicsInit+0x90>)
 8004584:	605a      	str	r2, [r3, #4]
	TCPOrientation.roll = 0;
 8004586:	4b19      	ldr	r3, [pc, #100]	; (80045ec <InverseKinematicsInit+0x8c>)
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
	arm_mat_init_f32(&DH_T03, 4, 4, DH_T03_f32);
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <InverseKinematicsInit+0x94>)
 8004590:	2204      	movs	r2, #4
 8004592:	2104      	movs	r1, #4
 8004594:	4818      	ldr	r0, [pc, #96]	; (80045f8 <InverseKinematicsInit+0x98>)
 8004596:	f002 ff8f 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&DH_T06, 4, 4, DH_T06_f32);
 800459a:	4b18      	ldr	r3, [pc, #96]	; (80045fc <InverseKinematicsInit+0x9c>)
 800459c:	2204      	movs	r2, #4
 800459e:	2104      	movs	r1, #4
 80045a0:	4817      	ldr	r0, [pc, #92]	; (8004600 <InverseKinematicsInit+0xa0>)
 80045a2:	f002 ff89 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&DH_TCPtoWCP, 4, 1, DH_TCPtoWCP_f32);
 80045a6:	4b17      	ldr	r3, [pc, #92]	; (8004604 <InverseKinematicsInit+0xa4>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	2104      	movs	r1, #4
 80045ac:	4816      	ldr	r0, [pc, #88]	; (8004608 <InverseKinematicsInit+0xa8>)
 80045ae:	f002 ff83 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&DH_WCP, 4, 1, DH_WCP_f32);
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <InverseKinematicsInit+0xac>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	2104      	movs	r1, #4
 80045b8:	4815      	ldr	r0, [pc, #84]	; (8004610 <InverseKinematicsInit+0xb0>)
 80045ba:	f002 ff7d 	bl	80074b8 <arm_mat_init_f32>

	DH_TCPtoWCP_f32[0] = 0.0;
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <InverseKinematicsInit+0xa4>)
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
	DH_TCPtoWCP_f32[1] = 0.0;
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <InverseKinematicsInit+0xa4>)
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	605a      	str	r2, [r3, #4]
	DH_TCPtoWCP_f32[2] = -GripperLenght;
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <InverseKinematicsInit+0xa4>)
 80045d0:	4a10      	ldr	r2, [pc, #64]	; (8004614 <InverseKinematicsInit+0xb4>)
 80045d2:	609a      	str	r2, [r3, #8]
	DH_TCPtoWCP_f32[3] = 1.0;
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <InverseKinematicsInit+0xa4>)
 80045d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045da:	60da      	str	r2, [r3, #12]
}
 80045dc:	bf00      	nop
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	200000a8 	.word	0x200000a8
 80045e4:	43c80000 	.word	0x43c80000
 80045e8:	443b8000 	.word	0x443b8000
 80045ec:	200000c0 	.word	0x200000c0
 80045f0:	3fc90fdb 	.word	0x3fc90fdb
 80045f4:	20000298 	.word	0x20000298
 80045f8:	20000170 	.word	0x20000170
 80045fc:	20000238 	.word	0x20000238
 8004600:	20000158 	.word	0x20000158
 8004604:	20000278 	.word	0x20000278
 8004608:	20000160 	.word	0x20000160
 800460c:	20000288 	.word	0x20000288
 8004610:	20000168 	.word	0x20000168
 8004614:	c2c80000 	.word	0xc2c80000

08004618 <CalculateInverseKinematics>:
void CalculateInverseKinematics()
{
 8004618:	b580      	push	{r7, lr}
 800461a:	ed2d 8b02 	vpush	{d8}
 800461e:	b09a      	sub	sp, #104	; 0x68
 8004620:	af00      	add	r7, sp, #0
	arm_matrix_instance_f32 DHMatrixTemp;
	float DHMatrixTemp_f32[16];
	arm_mat_init_f32(&DHMatrixTemp,4,4,DHMatrixTemp_f32);
 8004622:	f107 031c 	add.w	r3, r7, #28
 8004626:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800462a:	2204      	movs	r2, #4
 800462c:	2104      	movs	r1, #4
 800462e:	f002 ff43 	bl	80074b8 <arm_mat_init_f32>

	/*Step 1. Load input*/
	if (ManipulatorMode == XYZ_GLOBAL || ManipulatorMode == TRAJECTORY)
 8004632:	4b3a      	ldr	r3, [pc, #232]	; (800471c <CalculateInverseKinematics+0x104>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b04      	cmp	r3, #4
 8004638:	d003      	beq.n	8004642 <CalculateInverseKinematics+0x2a>
 800463a:	4b38      	ldr	r3, [pc, #224]	; (800471c <CalculateInverseKinematics+0x104>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b08      	cmp	r3, #8
 8004640:	d129      	bne.n	8004696 <CalculateInverseKinematics+0x7e>
	{
		if (DisconnectDoF == DOF456)
 8004642:	4b37      	ldr	r3, [pc, #220]	; (8004720 <CalculateInverseKinematics+0x108>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d10c      	bne.n	8004664 <CalculateInverseKinematics+0x4c>
		{
			WristPosition.x = kinematics_in.f[0];
 800464a:	4b36      	ldr	r3, [pc, #216]	; (8004724 <CalculateInverseKinematics+0x10c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a36      	ldr	r2, [pc, #216]	; (8004728 <CalculateInverseKinematics+0x110>)
 8004650:	6013      	str	r3, [r2, #0]
			WristPosition.y = kinematics_in.f[1];
 8004652:	4b34      	ldr	r3, [pc, #208]	; (8004724 <CalculateInverseKinematics+0x10c>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4a34      	ldr	r2, [pc, #208]	; (8004728 <CalculateInverseKinematics+0x110>)
 8004658:	6053      	str	r3, [r2, #4]
			WristPosition.z = kinematics_in.f[2];
 800465a:	4b32      	ldr	r3, [pc, #200]	; (8004724 <CalculateInverseKinematics+0x10c>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4a32      	ldr	r2, [pc, #200]	; (8004728 <CalculateInverseKinematics+0x110>)
 8004660:	6093      	str	r3, [r2, #8]
		if (DisconnectDoF == DOF456)
 8004662:	e0b0      	b.n	80047c6 <CalculateInverseKinematics+0x1ae>
		}
		else
		{
			TCPPosition.x = kinematics_in.f[0];
 8004664:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <CalculateInverseKinematics+0x10c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a30      	ldr	r2, [pc, #192]	; (800472c <CalculateInverseKinematics+0x114>)
 800466a:	6013      	str	r3, [r2, #0]
			TCPPosition.y = kinematics_in.f[1];
 800466c:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <CalculateInverseKinematics+0x10c>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a2e      	ldr	r2, [pc, #184]	; (800472c <CalculateInverseKinematics+0x114>)
 8004672:	6053      	str	r3, [r2, #4]
			TCPPosition.z = kinematics_in.f[2];
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <CalculateInverseKinematics+0x10c>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a2c      	ldr	r2, [pc, #176]	; (800472c <CalculateInverseKinematics+0x114>)
 800467a:	6093      	str	r3, [r2, #8]
			TCPOrientation.yaw = kinematics_in.f[3];
 800467c:	4b29      	ldr	r3, [pc, #164]	; (8004724 <CalculateInverseKinematics+0x10c>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a2b      	ldr	r2, [pc, #172]	; (8004730 <CalculateInverseKinematics+0x118>)
 8004682:	6013      	str	r3, [r2, #0]
			TCPOrientation.pitch = kinematics_in.f[4];
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <CalculateInverseKinematics+0x10c>)
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	4a29      	ldr	r2, [pc, #164]	; (8004730 <CalculateInverseKinematics+0x118>)
 800468a:	6053      	str	r3, [r2, #4]
			TCPOrientation.roll = kinematics_in.f[5];
 800468c:	4b25      	ldr	r3, [pc, #148]	; (8004724 <CalculateInverseKinematics+0x10c>)
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	4a27      	ldr	r2, [pc, #156]	; (8004730 <CalculateInverseKinematics+0x118>)
 8004692:	6093      	str	r3, [r2, #8]
		if (DisconnectDoF == DOF456)
 8004694:	e097      	b.n	80047c6 <CalculateInverseKinematics+0x1ae>
		}
	}
	else if (ManipulatorMode==VEL_GLOB || ManipulatorMode==VEL_TOOL)
 8004696:	4b21      	ldr	r3, [pc, #132]	; (800471c <CalculateInverseKinematics+0x104>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d003      	beq.n	80046a6 <CalculateInverseKinematics+0x8e>
 800469e:	4b1f      	ldr	r3, [pc, #124]	; (800471c <CalculateInverseKinematics+0x104>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d14a      	bne.n	800473c <CalculateInverseKinematics+0x124>
	{
		if (DisconnectDoF == DOF456)
 80046a6:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <CalculateInverseKinematics+0x108>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d118      	bne.n	80046e0 <CalculateInverseKinematics+0xc8>
		{
			Velocity.x=kinematics_in.f[0];
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <CalculateInverseKinematics+0x10c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a20      	ldr	r2, [pc, #128]	; (8004734 <CalculateInverseKinematics+0x11c>)
 80046b4:	6013      	str	r3, [r2, #0]
			Velocity.y=kinematics_in.f[1];
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <CalculateInverseKinematics+0x10c>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <CalculateInverseKinematics+0x11c>)
 80046bc:	6053      	str	r3, [r2, #4]
			Velocity.z=kinematics_in.f[2];
 80046be:	4b19      	ldr	r3, [pc, #100]	; (8004724 <CalculateInverseKinematics+0x10c>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <CalculateInverseKinematics+0x11c>)
 80046c4:	6093      	str	r3, [r2, #8]
			Omega.yaw=0.0;
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <CalculateInverseKinematics+0x120>)
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
			Omega.pitch=0.0;
 80046ce:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <CalculateInverseKinematics+0x120>)
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	605a      	str	r2, [r3, #4]
			Omega.roll=0.0;
 80046d6:	4b18      	ldr	r3, [pc, #96]	; (8004738 <CalculateInverseKinematics+0x120>)
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	e017      	b.n	8004710 <CalculateInverseKinematics+0xf8>
		}
		else
		{
			Velocity.x=kinematics_in.f[0];
 80046e0:	4b10      	ldr	r3, [pc, #64]	; (8004724 <CalculateInverseKinematics+0x10c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a13      	ldr	r2, [pc, #76]	; (8004734 <CalculateInverseKinematics+0x11c>)
 80046e6:	6013      	str	r3, [r2, #0]
			Velocity.y=kinematics_in.f[1];
 80046e8:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <CalculateInverseKinematics+0x10c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4a11      	ldr	r2, [pc, #68]	; (8004734 <CalculateInverseKinematics+0x11c>)
 80046ee:	6053      	str	r3, [r2, #4]
			Velocity.z=kinematics_in.f[2];
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <CalculateInverseKinematics+0x10c>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a0f      	ldr	r2, [pc, #60]	; (8004734 <CalculateInverseKinematics+0x11c>)
 80046f6:	6093      	str	r3, [r2, #8]
			Omega.yaw=kinematics_in.f[3];
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <CalculateInverseKinematics+0x10c>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a0e      	ldr	r2, [pc, #56]	; (8004738 <CalculateInverseKinematics+0x120>)
 80046fe:	6013      	str	r3, [r2, #0]
			Omega.pitch=kinematics_in.f[4];
 8004700:	4b08      	ldr	r3, [pc, #32]	; (8004724 <CalculateInverseKinematics+0x10c>)
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	4a0c      	ldr	r2, [pc, #48]	; (8004738 <CalculateInverseKinematics+0x120>)
 8004706:	6053      	str	r3, [r2, #4]
			Omega.roll=kinematics_in.f[5];
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <CalculateInverseKinematics+0x10c>)
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <CalculateInverseKinematics+0x120>)
 800470e:	6093      	str	r3, [r2, #8]
		}
		CalculatePositionIncrement(&DHMatrixTemp);
 8004710:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fc73 	bl	8004000 <CalculatePositionIncrement>
 800471a:	e054      	b.n	80047c6 <CalculateInverseKinematics+0x1ae>
 800471c:	200000d8 	.word	0x200000d8
 8004720:	200000d9 	.word	0x200000d9
 8004724:	2000013c 	.word	0x2000013c
 8004728:	2000009c 	.word	0x2000009c
 800472c:	200000a8 	.word	0x200000a8
 8004730:	200000c0 	.word	0x200000c0
 8004734:	200000b4 	.word	0x200000b4
 8004738:	200000cc 	.word	0x200000cc
	}
	else if (ManipulatorMode==DELTA_TOOL)
 800473c:	4bd7      	ldr	r3, [pc, #860]	; (8004a9c <CalculateInverseKinematics+0x484>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b07      	cmp	r3, #7
 8004742:	d140      	bne.n	80047c6 <CalculateInverseKinematics+0x1ae>
	{
		float TransforedIncrements[6];
		TransformToolFull(kinematics_in.f,TransforedIncrements);
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	4619      	mov	r1, r3
 8004748:	48d5      	ldr	r0, [pc, #852]	; (8004aa0 <CalculateInverseKinematics+0x488>)
 800474a:	f001 f923 	bl	8005994 <TransformToolFull>
		TCPPosition.x = TCPPosition.x+TransforedIncrements[0];
 800474e:	4bd5      	ldr	r3, [pc, #852]	; (8004aa4 <CalculateInverseKinematics+0x48c>)
 8004750:	ed93 7a00 	vldr	s14, [r3]
 8004754:	edd7 7a01 	vldr	s15, [r7, #4]
 8004758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800475c:	4bd1      	ldr	r3, [pc, #836]	; (8004aa4 <CalculateInverseKinematics+0x48c>)
 800475e:	edc3 7a00 	vstr	s15, [r3]
		TCPPosition.y = TCPPosition.y+TransforedIncrements[1];
 8004762:	4bd0      	ldr	r3, [pc, #832]	; (8004aa4 <CalculateInverseKinematics+0x48c>)
 8004764:	ed93 7a01 	vldr	s14, [r3, #4]
 8004768:	edd7 7a02 	vldr	s15, [r7, #8]
 800476c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004770:	4bcc      	ldr	r3, [pc, #816]	; (8004aa4 <CalculateInverseKinematics+0x48c>)
 8004772:	edc3 7a01 	vstr	s15, [r3, #4]
		TCPPosition.z = TCPPosition.z+TransforedIncrements[2];
 8004776:	4bcb      	ldr	r3, [pc, #812]	; (8004aa4 <CalculateInverseKinematics+0x48c>)
 8004778:	ed93 7a02 	vldr	s14, [r3, #8]
 800477c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004784:	4bc7      	ldr	r3, [pc, #796]	; (8004aa4 <CalculateInverseKinematics+0x48c>)
 8004786:	edc3 7a02 	vstr	s15, [r3, #8]
		TCPOrientation.yaw = TCPOrientation.yaw + TransforedIncrements[3];
 800478a:	4bc7      	ldr	r3, [pc, #796]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 800478c:	ed93 7a00 	vldr	s14, [r3]
 8004790:	edd7 7a04 	vldr	s15, [r7, #16]
 8004794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004798:	4bc3      	ldr	r3, [pc, #780]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 800479a:	edc3 7a00 	vstr	s15, [r3]
		TCPOrientation.pitch = TCPOrientation.pitch + TransforedIncrements[4];
 800479e:	4bc2      	ldr	r3, [pc, #776]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80047a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80047a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80047a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ac:	4bbe      	ldr	r3, [pc, #760]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80047ae:	edc3 7a01 	vstr	s15, [r3, #4]
		TCPOrientation.roll = TCPOrientation.roll + TransforedIncrements[5];
 80047b2:	4bbd      	ldr	r3, [pc, #756]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80047b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80047b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80047bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c0:	4bb9      	ldr	r3, [pc, #740]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80047c2:	edc3 7a02 	vstr	s15, [r3, #8]
	}

	/*Step 2. Create transformation matrix if working with more than 3 DOFs*/
	if (DisconnectDoF != DOF456)
 80047c6:	4bb9      	ldr	r3, [pc, #740]	; (8004aac <CalculateInverseKinematics+0x494>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	f000 818a 	beq.w	8004ae4 <CalculateInverseKinematics+0x4cc>
	{

		DH_T06_f32[0] = cosf(TCPOrientation.yaw) * cosf(TCPOrientation.pitch);
 80047d0:	4bb5      	ldr	r3, [pc, #724]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	eeb0 0a67 	vmov.f32	s0, s15
 80047da:	f003 f9b1 	bl	8007b40 <cosf>
 80047de:	eeb0 8a40 	vmov.f32	s16, s0
 80047e2:	4bb1      	ldr	r3, [pc, #708]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80047e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80047e8:	eeb0 0a67 	vmov.f32	s0, s15
 80047ec:	f003 f9a8 	bl	8007b40 <cosf>
 80047f0:	eef0 7a40 	vmov.f32	s15, s0
 80047f4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80047f8:	4bad      	ldr	r3, [pc, #692]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 80047fa:	edc3 7a00 	vstr	s15, [r3]
		DH_T06_f32[1] = cosf(TCPOrientation.yaw) * sinf(TCPOrientation.pitch)
 80047fe:	4baa      	ldr	r3, [pc, #680]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004800:	edd3 7a00 	vldr	s15, [r3]
 8004804:	eeb0 0a67 	vmov.f32	s0, s15
 8004808:	f003 f99a 	bl	8007b40 <cosf>
 800480c:	eeb0 8a40 	vmov.f32	s16, s0
 8004810:	4ba5      	ldr	r3, [pc, #660]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004812:	edd3 7a01 	vldr	s15, [r3, #4]
 8004816:	eeb0 0a67 	vmov.f32	s0, s15
 800481a:	f003 f9d5 	bl	8007bc8 <sinf>
 800481e:	eef0 7a40 	vmov.f32	s15, s0
 8004822:	ee28 8a27 	vmul.f32	s16, s16, s15
				* sinf(TCPOrientation.roll)
 8004826:	4ba0      	ldr	r3, [pc, #640]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004828:	edd3 7a02 	vldr	s15, [r3, #8]
 800482c:	eeb0 0a67 	vmov.f32	s0, s15
 8004830:	f003 f9ca 	bl	8007bc8 <sinf>
 8004834:	eef0 7a40 	vmov.f32	s15, s0
 8004838:	ee28 8a27 	vmul.f32	s16, s16, s15
				- sinf(TCPOrientation.yaw) * cosf(TCPOrientation.roll);
 800483c:	4b9a      	ldr	r3, [pc, #616]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 800483e:	edd3 7a00 	vldr	s15, [r3]
 8004842:	eeb0 0a67 	vmov.f32	s0, s15
 8004846:	f003 f9bf 	bl	8007bc8 <sinf>
 800484a:	eef0 8a40 	vmov.f32	s17, s0
 800484e:	4b96      	ldr	r3, [pc, #600]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004850:	edd3 7a02 	vldr	s15, [r3, #8]
 8004854:	eeb0 0a67 	vmov.f32	s0, s15
 8004858:	f003 f972 	bl	8007b40 <cosf>
 800485c:	eef0 7a40 	vmov.f32	s15, s0
 8004860:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004864:	ee78 7a67 	vsub.f32	s15, s16, s15
		DH_T06_f32[1] = cosf(TCPOrientation.yaw) * sinf(TCPOrientation.pitch)
 8004868:	4b91      	ldr	r3, [pc, #580]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 800486a:	edc3 7a01 	vstr	s15, [r3, #4]
		DH_T06_f32[2] = cosf(TCPOrientation.yaw) * sinf(TCPOrientation.pitch)
 800486e:	4b8e      	ldr	r3, [pc, #568]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004870:	edd3 7a00 	vldr	s15, [r3]
 8004874:	eeb0 0a67 	vmov.f32	s0, s15
 8004878:	f003 f962 	bl	8007b40 <cosf>
 800487c:	eeb0 8a40 	vmov.f32	s16, s0
 8004880:	4b89      	ldr	r3, [pc, #548]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004882:	edd3 7a01 	vldr	s15, [r3, #4]
 8004886:	eeb0 0a67 	vmov.f32	s0, s15
 800488a:	f003 f99d 	bl	8007bc8 <sinf>
 800488e:	eef0 7a40 	vmov.f32	s15, s0
 8004892:	ee28 8a27 	vmul.f32	s16, s16, s15
				* cosf(TCPOrientation.roll)
 8004896:	4b84      	ldr	r3, [pc, #528]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004898:	edd3 7a02 	vldr	s15, [r3, #8]
 800489c:	eeb0 0a67 	vmov.f32	s0, s15
 80048a0:	f003 f94e 	bl	8007b40 <cosf>
 80048a4:	eef0 7a40 	vmov.f32	s15, s0
 80048a8:	ee28 8a27 	vmul.f32	s16, s16, s15
				+ sinf(TCPOrientation.yaw) * sinf(TCPOrientation.roll);
 80048ac:	4b7e      	ldr	r3, [pc, #504]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80048ae:	edd3 7a00 	vldr	s15, [r3]
 80048b2:	eeb0 0a67 	vmov.f32	s0, s15
 80048b6:	f003 f987 	bl	8007bc8 <sinf>
 80048ba:	eef0 8a40 	vmov.f32	s17, s0
 80048be:	4b7a      	ldr	r3, [pc, #488]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80048c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80048c4:	eeb0 0a67 	vmov.f32	s0, s15
 80048c8:	f003 f97e 	bl	8007bc8 <sinf>
 80048cc:	eef0 7a40 	vmov.f32	s15, s0
 80048d0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80048d4:	ee78 7a27 	vadd.f32	s15, s16, s15
		DH_T06_f32[2] = cosf(TCPOrientation.yaw) * sinf(TCPOrientation.pitch)
 80048d8:	4b75      	ldr	r3, [pc, #468]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 80048da:	edc3 7a02 	vstr	s15, [r3, #8]
		DH_T06_f32[3] = TCPPosition.x;
 80048de:	4b71      	ldr	r3, [pc, #452]	; (8004aa4 <CalculateInverseKinematics+0x48c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a73      	ldr	r2, [pc, #460]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 80048e4:	60d3      	str	r3, [r2, #12]
		DH_T06_f32[4] = sinf(TCPOrientation.yaw) * cosf(TCPOrientation.pitch);
 80048e6:	4b70      	ldr	r3, [pc, #448]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80048e8:	edd3 7a00 	vldr	s15, [r3]
 80048ec:	eeb0 0a67 	vmov.f32	s0, s15
 80048f0:	f003 f96a 	bl	8007bc8 <sinf>
 80048f4:	eeb0 8a40 	vmov.f32	s16, s0
 80048f8:	4b6b      	ldr	r3, [pc, #428]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80048fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80048fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004902:	f003 f91d 	bl	8007b40 <cosf>
 8004906:	eef0 7a40 	vmov.f32	s15, s0
 800490a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800490e:	4b68      	ldr	r3, [pc, #416]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 8004910:	edc3 7a04 	vstr	s15, [r3, #16]
		DH_T06_f32[5] = sinf(TCPOrientation.yaw) * sinf(TCPOrientation.pitch)
 8004914:	4b64      	ldr	r3, [pc, #400]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004916:	edd3 7a00 	vldr	s15, [r3]
 800491a:	eeb0 0a67 	vmov.f32	s0, s15
 800491e:	f003 f953 	bl	8007bc8 <sinf>
 8004922:	eeb0 8a40 	vmov.f32	s16, s0
 8004926:	4b60      	ldr	r3, [pc, #384]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004928:	edd3 7a01 	vldr	s15, [r3, #4]
 800492c:	eeb0 0a67 	vmov.f32	s0, s15
 8004930:	f003 f94a 	bl	8007bc8 <sinf>
 8004934:	eef0 7a40 	vmov.f32	s15, s0
 8004938:	ee28 8a27 	vmul.f32	s16, s16, s15
				* sinf(TCPOrientation.roll)
 800493c:	4b5a      	ldr	r3, [pc, #360]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 800493e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004942:	eeb0 0a67 	vmov.f32	s0, s15
 8004946:	f003 f93f 	bl	8007bc8 <sinf>
 800494a:	eef0 7a40 	vmov.f32	s15, s0
 800494e:	ee28 8a27 	vmul.f32	s16, s16, s15
				+ cosf(TCPOrientation.yaw) * cosf(TCPOrientation.roll);
 8004952:	4b55      	ldr	r3, [pc, #340]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004954:	edd3 7a00 	vldr	s15, [r3]
 8004958:	eeb0 0a67 	vmov.f32	s0, s15
 800495c:	f003 f8f0 	bl	8007b40 <cosf>
 8004960:	eef0 8a40 	vmov.f32	s17, s0
 8004964:	4b50      	ldr	r3, [pc, #320]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004966:	edd3 7a02 	vldr	s15, [r3, #8]
 800496a:	eeb0 0a67 	vmov.f32	s0, s15
 800496e:	f003 f8e7 	bl	8007b40 <cosf>
 8004972:	eef0 7a40 	vmov.f32	s15, s0
 8004976:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800497a:	ee78 7a27 	vadd.f32	s15, s16, s15
		DH_T06_f32[5] = sinf(TCPOrientation.yaw) * sinf(TCPOrientation.pitch)
 800497e:	4b4c      	ldr	r3, [pc, #304]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 8004980:	edc3 7a05 	vstr	s15, [r3, #20]
		DH_T06_f32[6] = sinf(TCPOrientation.yaw) * sinf(TCPOrientation.pitch)
 8004984:	4b48      	ldr	r3, [pc, #288]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004986:	edd3 7a00 	vldr	s15, [r3]
 800498a:	eeb0 0a67 	vmov.f32	s0, s15
 800498e:	f003 f91b 	bl	8007bc8 <sinf>
 8004992:	eeb0 8a40 	vmov.f32	s16, s0
 8004996:	4b44      	ldr	r3, [pc, #272]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004998:	edd3 7a01 	vldr	s15, [r3, #4]
 800499c:	eeb0 0a67 	vmov.f32	s0, s15
 80049a0:	f003 f912 	bl	8007bc8 <sinf>
 80049a4:	eef0 7a40 	vmov.f32	s15, s0
 80049a8:	ee28 8a27 	vmul.f32	s16, s16, s15
				* cosf(TCPOrientation.roll)
 80049ac:	4b3e      	ldr	r3, [pc, #248]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80049ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80049b2:	eeb0 0a67 	vmov.f32	s0, s15
 80049b6:	f003 f8c3 	bl	8007b40 <cosf>
 80049ba:	eef0 7a40 	vmov.f32	s15, s0
 80049be:	ee28 8a27 	vmul.f32	s16, s16, s15
				- cosf(TCPOrientation.yaw) * sinf(TCPOrientation.roll);
 80049c2:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80049c4:	edd3 7a00 	vldr	s15, [r3]
 80049c8:	eeb0 0a67 	vmov.f32	s0, s15
 80049cc:	f003 f8b8 	bl	8007b40 <cosf>
 80049d0:	eef0 8a40 	vmov.f32	s17, s0
 80049d4:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80049d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80049da:	eeb0 0a67 	vmov.f32	s0, s15
 80049de:	f003 f8f3 	bl	8007bc8 <sinf>
 80049e2:	eef0 7a40 	vmov.f32	s15, s0
 80049e6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80049ea:	ee78 7a67 	vsub.f32	s15, s16, s15
		DH_T06_f32[6] = sinf(TCPOrientation.yaw) * sinf(TCPOrientation.pitch)
 80049ee:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 80049f0:	edc3 7a06 	vstr	s15, [r3, #24]
		DH_T06_f32[7] = TCPPosition.y;
 80049f4:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <CalculateInverseKinematics+0x48c>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4a2d      	ldr	r2, [pc, #180]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 80049fa:	61d3      	str	r3, [r2, #28]
		DH_T06_f32[8] = -sinf(TCPOrientation.pitch);
 80049fc:	4b2a      	ldr	r3, [pc, #168]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 80049fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a02:	eeb0 0a67 	vmov.f32	s0, s15
 8004a06:	f003 f8df 	bl	8007bc8 <sinf>
 8004a0a:	eef0 7a40 	vmov.f32	s15, s0
 8004a0e:	eef1 7a67 	vneg.f32	s15, s15
 8004a12:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 8004a14:	edc3 7a08 	vstr	s15, [r3, #32]
		DH_T06_f32[9] = -cosf(TCPOrientation.pitch) * sinf(TCPOrientation.roll);
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004a1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a22:	f003 f88d 	bl	8007b40 <cosf>
 8004a26:	eef0 7a40 	vmov.f32	s15, s0
 8004a2a:	eeb1 8a67 	vneg.f32	s16, s15
 8004a2e:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004a30:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a34:	eeb0 0a67 	vmov.f32	s0, s15
 8004a38:	f003 f8c6 	bl	8007bc8 <sinf>
 8004a3c:	eef0 7a40 	vmov.f32	s15, s0
 8004a40:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004a44:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 8004a46:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		DH_T06_f32[10] = cosf(TCPOrientation.pitch) * cosf(TCPOrientation.roll);
 8004a4a:	4b17      	ldr	r3, [pc, #92]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004a4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a50:	eeb0 0a67 	vmov.f32	s0, s15
 8004a54:	f003 f874 	bl	8007b40 <cosf>
 8004a58:	eeb0 8a40 	vmov.f32	s16, s0
 8004a5c:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <CalculateInverseKinematics+0x490>)
 8004a5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a62:	eeb0 0a67 	vmov.f32	s0, s15
 8004a66:	f003 f86b 	bl	8007b40 <cosf>
 8004a6a:	eef0 7a40 	vmov.f32	s15, s0
 8004a6e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 8004a74:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		DH_T06_f32[11] = TCPPosition.z;
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <CalculateInverseKinematics+0x48c>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 8004a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
		DH_T06_f32[12] = 0.0;
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
		DH_T06_f32[13] = 0.0;
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	635a      	str	r2, [r3, #52]	; 0x34
		DH_T06_f32[14] = 0.0;
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <CalculateInverseKinematics+0x498>)
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
 8004a98:	e00c      	b.n	8004ab4 <CalculateInverseKinematics+0x49c>
 8004a9a:	bf00      	nop
 8004a9c:	200000d8 	.word	0x200000d8
 8004aa0:	2000013c 	.word	0x2000013c
 8004aa4:	200000a8 	.word	0x200000a8
 8004aa8:	200000c0 	.word	0x200000c0
 8004aac:	200000d9 	.word	0x200000d9
 8004ab0:	20000238 	.word	0x20000238
		DH_T06_f32[15] = 1.0;
 8004ab4:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <CalculateInverseKinematics+0x518>)
 8004ab6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004aba:	63da      	str	r2, [r3, #60]	; 0x3c
		arm_mat_mult_f32(&DH_T06, &DH_TCPtoWCP, &DH_WCP);
 8004abc:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <CalculateInverseKinematics+0x51c>)
 8004abe:	491e      	ldr	r1, [pc, #120]	; (8004b38 <CalculateInverseKinematics+0x520>)
 8004ac0:	481e      	ldr	r0, [pc, #120]	; (8004b3c <CalculateInverseKinematics+0x524>)
 8004ac2:	f002 fd11 	bl	80074e8 <arm_mat_mult_f32>
		WristPosition.x = DH_WCP.pData[0];
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <CalculateInverseKinematics+0x51c>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <CalculateInverseKinematics+0x528>)
 8004ace:	6013      	str	r3, [r2, #0]
		WristPosition.y = DH_WCP.pData[1];
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <CalculateInverseKinematics+0x51c>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <CalculateInverseKinematics+0x528>)
 8004ad8:	6053      	str	r3, [r2, #4]
		WristPosition.z = DH_WCP.pData[2];
 8004ada:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <CalculateInverseKinematics+0x51c>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <CalculateInverseKinematics+0x528>)
 8004ae2:	6093      	str	r3, [r2, #8]
	}
	/*Step 3. Calculate inverse kinematics. If working with DOF 1-3 only calculate Lower Angles*/
	if (DisconnectDoF != DOF456)
 8004ae4:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <CalculateInverseKinematics+0x52c>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d004      	beq.n	8004af6 <CalculateInverseKinematics+0x4de>
	{
		CalculateLowerAngles();
 8004aec:	f000 f830 	bl	8004b50 <CalculateLowerAngles>
		CalculateUpperAngles();
 8004af0:	f000 fb76 	bl	80051e0 <CalculateUpperAngles>
 8004af4:	e001      	b.n	8004afa <CalculateInverseKinematics+0x4e2>
	}
	else
	{
		CalculateLowerAngles();
 8004af6:	f000 f82b 	bl	8004b50 <CalculateLowerAngles>
	}
	NormalizeSolutions();
 8004afa:	f000 facd 	bl	8005098 <NormalizeSolutions>
	CheckSolutions();
 8004afe:	f000 ff13 	bl	8005928 <CheckSolutions>
	int x = ChooseSolution(choosedSolution);
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <CalculateInverseKinematics+0x530>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fad6 	bl	80060b8 <ChooseSolution>
 8004b0c:	6678      	str	r0, [r7, #100]	; 0x64
	choosedSolution = x;
 8004b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <CalculateInverseKinematics+0x530>)
 8004b14:	701a      	strb	r2, [r3, #0]
	if(x<9)
 8004b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	dc03      	bgt.n	8004b24 <CalculateInverseKinematics+0x50c>
	{
		WriteSolution(x);
 8004b1c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004b1e:	f001 fb1d 	bl	800615c <WriteSolution>
	}
	return;
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
}
 8004b26:	3768      	adds	r7, #104	; 0x68
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	ecbd 8b02 	vpop	{d8}
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20000238 	.word	0x20000238
 8004b34:	20000168 	.word	0x20000168
 8004b38:	20000160 	.word	0x20000160
 8004b3c:	20000158 	.word	0x20000158
 8004b40:	2000009c 	.word	0x2000009c
 8004b44:	200000d9 	.word	0x200000d9
 8004b48:	200002e0 	.word	0x200002e0
 8004b4c:	00000000 	.word	0x00000000

08004b50 <CalculateLowerAngles>:
void CalculateLowerAngles()
{
 8004b50:	b5b0      	push	{r4, r5, r7, lr}
 8004b52:	ed2d 8b02 	vpush	{d8}
 8004b56:	b094      	sub	sp, #80	; 0x50
 8004b58:	af00      	add	r7, sp, #0
	float thetaDOF1fwd, thetaDOF1bwd, temp1, temp2, thetaDOF2fwdTop,
			thetaDOF2bwdTop, thetaDOF3Top, thetaDOF2fwdBottom,
			thetaDOF2bwdBottom, thetaDOF3Bottom;
	if (fabs(WristPosition.x) < 0.001 && fabs(WristPosition.y) < 0.001)
 8004b5a:	4bb3      	ldr	r3, [pc, #716]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004b5c:	edd3 7a00 	vldr	s15, [r3]
 8004b60:	eef0 7ae7 	vabs.f32	s15, s15
 8004b64:	ee17 0a90 	vmov	r0, s15
 8004b68:	f7fb fcb2 	bl	80004d0 <__aeabi_f2d>
 8004b6c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004df0 <CalculateLowerAngles+0x2a0>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f7fb ff77 	bl	8000a64 <__aeabi_dcmplt>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d017      	beq.n	8004bac <CalculateLowerAngles+0x5c>
 8004b7c:	4baa      	ldr	r3, [pc, #680]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004b7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b82:	eef0 7ae7 	vabs.f32	s15, s15
 8004b86:	ee17 0a90 	vmov	r0, s15
 8004b8a:	f7fb fca1 	bl	80004d0 <__aeabi_f2d>
 8004b8e:	a398      	add	r3, pc, #608	; (adr r3, 8004df0 <CalculateLowerAngles+0x2a0>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb ff66 	bl	8000a64 <__aeabi_dcmplt>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <CalculateLowerAngles+0x5c>
	{
		thetaDOF1fwd = angle.f[0];
 8004b9e:	4ba3      	ldr	r3, [pc, #652]	; (8004e2c <CalculateLowerAngles+0x2dc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
		thetaDOF1bwd = angle.f[0];
 8004ba4:	4ba1      	ldr	r3, [pc, #644]	; (8004e2c <CalculateLowerAngles+0x2dc>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004baa:	e046      	b.n	8004c3a <CalculateLowerAngles+0xea>
	}
	else
	{
		temp1 = atan2f(WristPosition.y, WristPosition.x);
 8004bac:	4b9e      	ldr	r3, [pc, #632]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004bae:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bb2:	4b9d      	ldr	r3, [pc, #628]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004bb4:	ed93 7a00 	vldr	s14, [r3]
 8004bb8:	eef0 0a47 	vmov.f32	s1, s14
 8004bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc0:	f003 f8d6 	bl	8007d70 <atan2f>
 8004bc4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

		if (temp1 > 0.0)
 8004bc8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	dd10      	ble.n	8004bf8 <CalculateLowerAngles+0xa8>
			temp2 = temp1 - M_PI;
 8004bd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bd8:	f7fb fc7a 	bl	80004d0 <__aeabi_f2d>
 8004bdc:	a386      	add	r3, pc, #536	; (adr r3, 8004df8 <CalculateLowerAngles+0x2a8>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	f7fb fb15 	bl	8000210 <__aeabi_dsub>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	f7fb ff77 	bl	8000ae0 <__aeabi_d2f>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf6:	e00f      	b.n	8004c18 <CalculateLowerAngles+0xc8>
		else
			temp2 = temp1 + M_PI;
 8004bf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bfa:	f7fb fc69 	bl	80004d0 <__aeabi_f2d>
 8004bfe:	a37e      	add	r3, pc, #504	; (adr r3, 8004df8 <CalculateLowerAngles+0x2a8>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fb06 	bl	8000214 <__adddf3>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f7fb ff66 	bl	8000ae0 <__aeabi_d2f>
 8004c14:	4603      	mov	r3, r0
 8004c16:	647b      	str	r3, [r7, #68]	; 0x44
		if (WristPosition.x > 0.0)
 8004c18:	4b83      	ldr	r3, [pc, #524]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004c1a:	edd3 7a00 	vldr	s15, [r3]
 8004c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c26:	dd04      	ble.n	8004c32 <CalculateLowerAngles+0xe2>
		{
			thetaDOF1fwd = temp1;
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
			thetaDOF1bwd = temp2;
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c30:	e003      	b.n	8004c3a <CalculateLowerAngles+0xea>
		}
		else
		{
			thetaDOF1fwd = temp2;
 8004c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c34:	64fb      	str	r3, [r7, #76]	; 0x4c
			thetaDOF1bwd = temp1;
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}
	float x2y2 = powf(WristPosition.x, 2.0) + powf(WristPosition.y, 2.0);
 8004c3a:	4b7b      	ldr	r3, [pc, #492]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004c3c:	edd3 7a00 	vldr	s15, [r3]
 8004c40:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8004c44:	eeb0 0a67 	vmov.f32	s0, s15
 8004c48:	f003 f894 	bl	8007d74 <powf>
 8004c4c:	eeb0 8a40 	vmov.f32	s16, s0
 8004c50:	4b75      	ldr	r3, [pc, #468]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004c52:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c56:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8004c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5e:	f003 f889 	bl	8007d74 <powf>
 8004c62:	eef0 7a40 	vmov.f32	s15, s0
 8004c66:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004c6a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	volatile float c2 = x2y2 + powf(WristPosition.z, 2.0);
 8004c6e:	4b6e      	ldr	r3, [pc, #440]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004c70:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c74:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8004c78:	eeb0 0a67 	vmov.f32	s0, s15
 8004c7c:	f003 f87a 	bl	8007d74 <powf>
 8004c80:	eeb0 7a40 	vmov.f32	s14, s0
 8004c84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c8c:	edc7 7a06 	vstr	s15, [r7, #24]
	volatile float c = sqrtf(c2);
 8004c90:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c94:	eeb0 0a67 	vmov.f32	s0, s15
 8004c98:	f003 f8c4 	bl	8007e24 <sqrtf>
 8004c9c:	eef0 7a40 	vmov.f32	s15, s0
 8004ca0:	edc7 7a05 	vstr	s15, [r7, #20]
	volatile float alfa = acosf(
			((pow(DOF3_5Distance, 2.0) - pow(DOF2_3Distance, 2.0) - c2))
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb fc12 	bl	80004d0 <__aeabi_f2d>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	a153      	add	r1, pc, #332	; (adr r1, 8004e00 <CalculateLowerAngles+0x2b0>)
 8004cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cb6:	f7fb faab 	bl	8000210 <__aeabi_dsub>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	461d      	mov	r5, r3
					/ (-2.0 * DOF2_3Distance * c));
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fb fc03 	bl	80004d0 <__aeabi_f2d>
 8004cca:	a34f      	add	r3, pc, #316	; (adr r3, 8004e08 <CalculateLowerAngles+0x2b8>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fc56 	bl	8000580 <__aeabi_dmul>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f7fb fd7a 	bl	80007d4 <__aeabi_ddiv>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
	volatile float alfa = acosf(
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f7fb fefa 	bl	8000ae0 <__aeabi_d2f>
 8004cec:	4603      	mov	r3, r0
 8004cee:	ee00 3a10 	vmov	s0, r3
 8004cf2:	f002 ffe5 	bl	8007cc0 <acosf>
 8004cf6:	eef0 7a40 	vmov.f32	s15, s0
 8004cfa:	edc7 7a04 	vstr	s15, [r7, #16]
	volatile float gamma = acosf(
			(c2 - pow(DOF2_3Distance, 2.0) - pow(DOF3_5Distance, 2.0))
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fb fbe5 	bl	80004d0 <__aeabi_f2d>
 8004d06:	a342      	add	r3, pc, #264	; (adr r3, 8004e10 <CalculateLowerAngles+0x2c0>)
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f7fb fa80 	bl	8000210 <__aeabi_dsub>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	a33f      	add	r3, pc, #252	; (adr r3, 8004e18 <CalculateLowerAngles+0x2c8>)
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f7fb fa77 	bl	8000210 <__aeabi_dsub>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
					/ (-2.0 * DOF2_3Distance * DOF3_5Distance));
 8004d2a:	a33d      	add	r3, pc, #244	; (adr r3, 8004e20 <CalculateLowerAngles+0x2d0>)
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f7fb fd50 	bl	80007d4 <__aeabi_ddiv>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
	volatile float gamma = acosf(
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f7fb fed0 	bl	8000ae0 <__aeabi_d2f>
 8004d40:	4603      	mov	r3, r0
 8004d42:	ee00 3a10 	vmov	s0, r3
 8004d46:	f002 ffbb 	bl	8007cc0 <acosf>
 8004d4a:	eef0 7a40 	vmov.f32	s15, s0
 8004d4e:	edc7 7a03 	vstr	s15, [r7, #12]
	volatile float delta_forward, delta_backward;

	if (WristPosition.x > 0.0)
 8004d52:	4b35      	ldr	r3, [pc, #212]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d60:	dd66      	ble.n	8004e30 <CalculateLowerAngles+0x2e0>
	{
		delta_forward = atan2(WristPosition.z, sqrtf(x2y2));
 8004d62:	4b31      	ldr	r3, [pc, #196]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fb fbb2 	bl	80004d0 <__aeabi_f2d>
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	460d      	mov	r5, r1
 8004d70:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8004d74:	f003 f856 	bl	8007e24 <sqrtf>
 8004d78:	ee10 3a10 	vmov	r3, s0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fb fba7 	bl	80004d0 <__aeabi_f2d>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	ec43 2b11 	vmov	d1, r2, r3
 8004d8a:	ec45 4b10 	vmov	d0, r4, r5
 8004d8e:	f002 ff95 	bl	8007cbc <atan2>
 8004d92:	ec53 2b10 	vmov	r2, r3, d0
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7fb fea1 	bl	8000ae0 <__aeabi_d2f>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	60bb      	str	r3, [r7, #8]
		delta_backward = atan2(WristPosition.z, -sqrtf(x2y2));
 8004da2:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <CalculateLowerAngles+0x2d8>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fb fb92 	bl	80004d0 <__aeabi_f2d>
 8004dac:	4604      	mov	r4, r0
 8004dae:	460d      	mov	r5, r1
 8004db0:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8004db4:	f003 f836 	bl	8007e24 <sqrtf>
 8004db8:	eef0 7a40 	vmov.f32	s15, s0
 8004dbc:	eef1 7a67 	vneg.f32	s15, s15
 8004dc0:	ee17 3a90 	vmov	r3, s15
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fb fb83 	bl	80004d0 <__aeabi_f2d>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	ec43 2b11 	vmov	d1, r2, r3
 8004dd2:	ec45 4b10 	vmov	d0, r4, r5
 8004dd6:	f002 ff71 	bl	8007cbc <atan2>
 8004dda:	ec53 2b10 	vmov	r2, r3, d0
 8004dde:	4610      	mov	r0, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	f7fb fe7d 	bl	8000ae0 <__aeabi_d2f>
 8004de6:	4603      	mov	r3, r0
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	e065      	b.n	8004eb8 <CalculateLowerAngles+0x368>
 8004dec:	f3af 8000 	nop.w
 8004df0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004df4:	3f50624d 	.word	0x3f50624d
 8004df8:	54442d18 	.word	0x54442d18
 8004dfc:	400921fb 	.word	0x400921fb
 8004e00:	00000000 	.word	0x00000000
 8004e04:	c0e4b400 	.word	0xc0e4b400
 8004e08:	00000000 	.word	0x00000000
 8004e0c:	c0913000 	.word	0xc0913000
 8004e10:	00000000 	.word	0x00000000
 8004e14:	41127690 	.word	0x41127690
 8004e18:	00000000 	.word	0x00000000
 8004e1c:	410fc020 	.word	0x410fc020
 8004e20:	00000000 	.word	0x00000000
 8004e24:	c1211ed0 	.word	0xc1211ed0
 8004e28:	2000009c 	.word	0x2000009c
 8004e2c:	200000dc 	.word	0x200000dc

	}
	else
	{
		delta_forward = atan2(WristPosition.z, -sqrtf(x2y2));
 8004e30:	4b97      	ldr	r3, [pc, #604]	; (8005090 <CalculateLowerAngles+0x540>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fb fb4b 	bl	80004d0 <__aeabi_f2d>
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	460d      	mov	r5, r1
 8004e3e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8004e42:	f002 ffef 	bl	8007e24 <sqrtf>
 8004e46:	eef0 7a40 	vmov.f32	s15, s0
 8004e4a:	eef1 7a67 	vneg.f32	s15, s15
 8004e4e:	ee17 3a90 	vmov	r3, s15
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb fb3c 	bl	80004d0 <__aeabi_f2d>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	ec43 2b11 	vmov	d1, r2, r3
 8004e60:	ec45 4b10 	vmov	d0, r4, r5
 8004e64:	f002 ff2a 	bl	8007cbc <atan2>
 8004e68:	ec53 2b10 	vmov	r2, r3, d0
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	f7fb fe36 	bl	8000ae0 <__aeabi_d2f>
 8004e74:	4603      	mov	r3, r0
 8004e76:	60bb      	str	r3, [r7, #8]
		delta_backward = atan2(WristPosition.z, sqrtf(x2y2));
 8004e78:	4b85      	ldr	r3, [pc, #532]	; (8005090 <CalculateLowerAngles+0x540>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb27 	bl	80004d0 <__aeabi_f2d>
 8004e82:	4604      	mov	r4, r0
 8004e84:	460d      	mov	r5, r1
 8004e86:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8004e8a:	f002 ffcb 	bl	8007e24 <sqrtf>
 8004e8e:	ee10 3a10 	vmov	r3, s0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fb fb1c 	bl	80004d0 <__aeabi_f2d>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	ec43 2b11 	vmov	d1, r2, r3
 8004ea0:	ec45 4b10 	vmov	d0, r4, r5
 8004ea4:	f002 ff0a 	bl	8007cbc <atan2>
 8004ea8:	ec53 2b10 	vmov	r2, r3, d0
 8004eac:	4610      	mov	r0, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	f7fb fe16 	bl	8000ae0 <__aeabi_d2f>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	607b      	str	r3, [r7, #4]
	}
	thetaDOF2fwdTop = M_PI / 2 - (alfa + delta_forward);
 8004eb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ec4:	ee17 0a90 	vmov	r0, s15
 8004ec8:	f7fb fb02 	bl	80004d0 <__aeabi_f2d>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	a16b      	add	r1, pc, #428	; (adr r1, 8005080 <CalculateLowerAngles+0x530>)
 8004ed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ed6:	f7fb f99b 	bl	8000210 <__aeabi_dsub>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f7fb fdfd 	bl	8000ae0 <__aeabi_d2f>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30
	thetaDOF2bwdTop = M_PI / 2 - (alfa + delta_backward);
 8004eea:	ed97 7a04 	vldr	s14, [r7, #16]
 8004eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef6:	ee17 0a90 	vmov	r0, s15
 8004efa:	f7fb fae9 	bl	80004d0 <__aeabi_f2d>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	a15f      	add	r1, pc, #380	; (adr r1, 8005080 <CalculateLowerAngles+0x530>)
 8004f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f08:	f7fb f982 	bl	8000210 <__aeabi_dsub>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	f7fb fde4 	bl	8000ae0 <__aeabi_d2f>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	thetaDOF3Top = M_PI / 2 - gamma;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb fad6 	bl	80004d0 <__aeabi_f2d>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	a155      	add	r1, pc, #340	; (adr r1, 8005080 <CalculateLowerAngles+0x530>)
 8004f2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f2e:	f7fb f96f 	bl	8000210 <__aeabi_dsub>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f7fb fdd1 	bl	8000ae0 <__aeabi_d2f>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28

	thetaDOF2fwdBottom = M_PI / 2 - (delta_forward - alfa);
 8004f42:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f46:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f4e:	ee17 0a90 	vmov	r0, s15
 8004f52:	f7fb fabd 	bl	80004d0 <__aeabi_f2d>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	a149      	add	r1, pc, #292	; (adr r1, 8005080 <CalculateLowerAngles+0x530>)
 8004f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f60:	f7fb f956 	bl	8000210 <__aeabi_dsub>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f7fb fdb8 	bl	8000ae0 <__aeabi_d2f>
 8004f70:	4603      	mov	r3, r0
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
	thetaDOF2bwdBottom = M_PI / 2 - (delta_backward - alfa);
 8004f74:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f78:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f80:	ee17 0a90 	vmov	r0, s15
 8004f84:	f7fb faa4 	bl	80004d0 <__aeabi_f2d>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	a13c      	add	r1, pc, #240	; (adr r1, 8005080 <CalculateLowerAngles+0x530>)
 8004f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f92:	f7fb f93d 	bl	8000210 <__aeabi_dsub>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f7fb fd9f 	bl	8000ae0 <__aeabi_d2f>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	623b      	str	r3, [r7, #32]
	thetaDOF3Bottom = gamma - (3. / 2.) * M_PI;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fb fa91 	bl	80004d0 <__aeabi_f2d>
 8004fae:	a336      	add	r3, pc, #216	; (adr r3, 8005088 <CalculateLowerAngles+0x538>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f7fb f92c 	bl	8000210 <__aeabi_dsub>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f7fb fd8e 	bl	8000ae0 <__aeabi_d2f>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	61fb      	str	r3, [r7, #28]

	Solutions[0][0] = thetaDOF1fwd;
 8004fc8:	4a32      	ldr	r2, [pc, #200]	; (8005094 <CalculateLowerAngles+0x544>)
 8004fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fcc:	6013      	str	r3, [r2, #0]
	Solutions[2][0] = thetaDOF1fwd;
 8004fce:	4a31      	ldr	r2, [pc, #196]	; (8005094 <CalculateLowerAngles+0x544>)
 8004fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd2:	6313      	str	r3, [r2, #48]	; 0x30
	Solutions[4][0] = thetaDOF1bwd;
 8004fd4:	4a2f      	ldr	r2, [pc, #188]	; (8005094 <CalculateLowerAngles+0x544>)
 8004fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd8:	6613      	str	r3, [r2, #96]	; 0x60
	Solutions[6][0] = thetaDOF1bwd;
 8004fda:	4a2e      	ldr	r2, [pc, #184]	; (8005094 <CalculateLowerAngles+0x544>)
 8004fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	Solutions[0][1] = thetaDOF2fwdTop;
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	; (8005094 <CalculateLowerAngles+0x544>)
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	6053      	str	r3, [r2, #4]
	Solutions[2][1] = thetaDOF2fwdBottom;
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <CalculateLowerAngles+0x544>)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	6353      	str	r3, [r2, #52]	; 0x34
	Solutions[4][1] = thetaDOF2bwdTop;
 8004fee:	4a29      	ldr	r2, [pc, #164]	; (8005094 <CalculateLowerAngles+0x544>)
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	6653      	str	r3, [r2, #100]	; 0x64
	Solutions[6][1] = thetaDOF2bwdBottom;
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <CalculateLowerAngles+0x544>)
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	Solutions[0][2] = thetaDOF3Top;
 8004ffc:	4a25      	ldr	r2, [pc, #148]	; (8005094 <CalculateLowerAngles+0x544>)
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	6093      	str	r3, [r2, #8]
	Solutions[2][2] = thetaDOF3Bottom;
 8005002:	4a24      	ldr	r2, [pc, #144]	; (8005094 <CalculateLowerAngles+0x544>)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	6393      	str	r3, [r2, #56]	; 0x38
	Solutions[4][2] = thetaDOF3Top;
 8005008:	4a22      	ldr	r2, [pc, #136]	; (8005094 <CalculateLowerAngles+0x544>)
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	6693      	str	r3, [r2, #104]	; 0x68
	Solutions[6][2] = thetaDOF3Bottom;
 800500e:	4a21      	ldr	r2, [pc, #132]	; (8005094 <CalculateLowerAngles+0x544>)
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	for (int j = 0; j <= 2; j++)
 8005016:	2300      	movs	r3, #0
 8005018:	643b      	str	r3, [r7, #64]	; 0x40
 800501a:	e024      	b.n	8005066 <CalculateLowerAngles+0x516>
	{
		for (int i = 0; i <= 3; i++)
 800501c:	2300      	movs	r3, #0
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005020:	e01b      	b.n	800505a <CalculateLowerAngles+0x50a>
		{
			Solutions[2 * i + 1][j] = Solutions[2 * i][j];
 8005022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005024:	0059      	lsls	r1, r3, #1
 8005026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	4819      	ldr	r0, [pc, #100]	; (8005094 <CalculateLowerAngles+0x544>)
 800502e:	460b      	mov	r3, r1
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	440b      	add	r3, r1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005038:	440b      	add	r3, r1
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4403      	add	r3, r0
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	4814      	ldr	r0, [pc, #80]	; (8005094 <CalculateLowerAngles+0x544>)
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4403      	add	r3, r0
 8005052:	6019      	str	r1, [r3, #0]
		for (int i = 0; i <= 3; i++)
 8005054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005056:	3301      	adds	r3, #1
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800505a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505c:	2b03      	cmp	r3, #3
 800505e:	dde0      	ble.n	8005022 <CalculateLowerAngles+0x4d2>
	for (int j = 0; j <= 2; j++)
 8005060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005062:	3301      	adds	r3, #1
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
 8005066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005068:	2b02      	cmp	r3, #2
 800506a:	ddd7      	ble.n	800501c <CalculateLowerAngles+0x4cc>
		}
	}
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	3750      	adds	r7, #80	; 0x50
 8005072:	46bd      	mov	sp, r7
 8005074:	ecbd 8b02 	vpop	{d8}
 8005078:	bdb0      	pop	{r4, r5, r7, pc}
 800507a:	bf00      	nop
 800507c:	f3af 8000 	nop.w
 8005080:	54442d18 	.word	0x54442d18
 8005084:	3ff921fb 	.word	0x3ff921fb
 8005088:	7f3321d2 	.word	0x7f3321d2
 800508c:	4012d97c 	.word	0x4012d97c
 8005090:	2000009c 	.word	0x2000009c
 8005094:	20000178 	.word	0x20000178

08005098 <NormalizeSolutions>:
void NormalizeSolutions()
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
	for (int i =0;i<8;i++)
 800509e:	2300      	movs	r3, #0
 80050a0:	607b      	str	r3, [r7, #4]
 80050a2:	e081      	b.n	80051a8 <NormalizeSolutions+0x110>
	{
		for (int j=0;j<6;j++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	e078      	b.n	800519c <NormalizeSolutions+0x104>
		{
			if (Solutions[i][j]>M_PI)
 80050aa:	494b      	ldr	r1, [pc, #300]	; (80051d8 <NormalizeSolutions+0x140>)
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4413      	add	r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fb fa05 	bl	80004d0 <__aeabi_f2d>
 80050c6:	a33e      	add	r3, pc, #248	; (adr r3, 80051c0 <NormalizeSolutions+0x128>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb fce8 	bl	8000aa0 <__aeabi_dcmpgt>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d024      	beq.n	8005120 <NormalizeSolutions+0x88>
			{
				Solutions[i][j]=Solutions[i][j]-2*M_PI;
 80050d6:	4940      	ldr	r1, [pc, #256]	; (80051d8 <NormalizeSolutions+0x140>)
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	4413      	add	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb f9ef 	bl	80004d0 <__aeabi_f2d>
 80050f2:	a335      	add	r3, pc, #212	; (adr r3, 80051c8 <NormalizeSolutions+0x130>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb f88a 	bl	8000210 <__aeabi_dsub>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4610      	mov	r0, r2
 8005102:	4619      	mov	r1, r3
 8005104:	f7fb fcec 	bl	8000ae0 <__aeabi_d2f>
 8005108:	4601      	mov	r1, r0
 800510a:	4833      	ldr	r0, [pc, #204]	; (80051d8 <NormalizeSolutions+0x140>)
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	4413      	add	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4403      	add	r3, r0
 800511e:	6019      	str	r1, [r3, #0]
			}
			if (Solutions[i][j]<-M_PI)
 8005120:	492d      	ldr	r1, [pc, #180]	; (80051d8 <NormalizeSolutions+0x140>)
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	4413      	add	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fb f9ca 	bl	80004d0 <__aeabi_f2d>
 800513c:	a324      	add	r3, pc, #144	; (adr r3, 80051d0 <NormalizeSolutions+0x138>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f7fb fc8f 	bl	8000a64 <__aeabi_dcmplt>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d024      	beq.n	8005196 <NormalizeSolutions+0xfe>
			{
				Solutions[i][j]=Solutions[i][j]+2*M_PI;
 800514c:	4922      	ldr	r1, [pc, #136]	; (80051d8 <NormalizeSolutions+0x140>)
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb f9b4 	bl	80004d0 <__aeabi_f2d>
 8005168:	a317      	add	r3, pc, #92	; (adr r3, 80051c8 <NormalizeSolutions+0x130>)
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f7fb f851 	bl	8000214 <__adddf3>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	f7fb fcb1 	bl	8000ae0 <__aeabi_d2f>
 800517e:	4601      	mov	r1, r0
 8005180:	4815      	ldr	r0, [pc, #84]	; (80051d8 <NormalizeSolutions+0x140>)
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4403      	add	r3, r0
 8005194:	6019      	str	r1, [r3, #0]
		for (int j=0;j<6;j++)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	3301      	adds	r3, #1
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b05      	cmp	r3, #5
 80051a0:	dd83      	ble.n	80050aa <NormalizeSolutions+0x12>
	for (int i =0;i<8;i++)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3301      	adds	r3, #1
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b07      	cmp	r3, #7
 80051ac:	f77f af7a 	ble.w	80050a4 <NormalizeSolutions+0xc>
			}
		}
	}
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	f3af 8000 	nop.w
 80051c0:	54442d18 	.word	0x54442d18
 80051c4:	400921fb 	.word	0x400921fb
 80051c8:	54442d18 	.word	0x54442d18
 80051cc:	401921fb 	.word	0x401921fb
 80051d0:	54442d18 	.word	0x54442d18
 80051d4:	c00921fb 	.word	0xc00921fb
 80051d8:	20000178 	.word	0x20000178
 80051dc:	00000000 	.word	0x00000000

080051e0 <CalculateUpperAngles>:
void CalculateUpperAngles()
{
 80051e0:	b5b0      	push	{r4, r5, r7, lr}
 80051e2:	b0c4      	sub	sp, #272	; 0x110
 80051e4:	af00      	add	r7, sp, #0

	arm_matrix_instance_f32 temp, temp1, temp2, R36;
	float temp_f32[16], temp1_f32[16], temp2_f32[16], R36_f32[9];


	for (int i = 0; i < 4; i++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051ec:	e2db      	b.n	80057a6 <CalculateUpperAngles+0x5c6>
	{
		arm_mat_init_f32(&temp, 4, 4, temp_f32);
 80051ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80051f2:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80051f6:	2204      	movs	r2, #4
 80051f8:	2104      	movs	r1, #4
 80051fa:	f002 f95d 	bl	80074b8 <arm_mat_init_f32>
		arm_mat_init_f32(&temp1, 4, 4, temp1_f32);
 80051fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005202:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8005206:	2204      	movs	r2, #4
 8005208:	2104      	movs	r1, #4
 800520a:	f002 f955 	bl	80074b8 <arm_mat_init_f32>
		arm_mat_init_f32(&temp2, 4, 4, temp2_f32);
 800520e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005212:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 8005216:	2204      	movs	r2, #4
 8005218:	2104      	movs	r1, #4
 800521a:	f002 f94d 	bl	80074b8 <arm_mat_init_f32>
		arm_mat_init_f32(&R36, 3, 3, R36_f32);
 800521e:	463b      	mov	r3, r7
 8005220:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8005224:	2203      	movs	r2, #3
 8005226:	2103      	movs	r1, #3
 8005228:	f002 f946 	bl	80074b8 <arm_mat_init_f32>
		DH_Matrix(&temp1, -M_PI_2, Solutions[2 * i][0], 0, 0);
 800522c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005230:	005a      	lsls	r2, r3, #1
 8005232:	49cd      	ldr	r1, [pc, #820]	; (8005568 <CalculateUpperAngles+0x388>)
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	edd3 7a00 	vldr	s15, [r3]
 8005242:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005246:	eddf 1ac9 	vldr	s3, [pc, #804]	; 800556c <CalculateUpperAngles+0x38c>
 800524a:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 800556c <CalculateUpperAngles+0x38c>
 800524e:	eef0 0a67 	vmov.f32	s1, s15
 8005252:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8005570 <CalculateUpperAngles+0x390>
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fc99 	bl	8003b8e <DH_Matrix>

		DH_Matrix(&temp, 0, Solutions[2 * i][1] - M_PI_2, DOF2_3Distance, 0);
 800525c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005260:	005a      	lsls	r2, r3, #1
 8005262:	49c1      	ldr	r1, [pc, #772]	; (8005568 <CalculateUpperAngles+0x388>)
 8005264:	4613      	mov	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4413      	add	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	440b      	add	r3, r1
 800526e:	3304      	adds	r3, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f92c 	bl	80004d0 <__aeabi_f2d>
 8005278:	a3b7      	add	r3, pc, #732	; (adr r3, 8005558 <CalculateUpperAngles+0x378>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fa ffc7 	bl	8000210 <__aeabi_dsub>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	f7fb fc29 	bl	8000ae0 <__aeabi_d2f>
 800528e:	4602      	mov	r2, r0
 8005290:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005294:	eddf 1ab5 	vldr	s3, [pc, #724]	; 800556c <CalculateUpperAngles+0x38c>
 8005298:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 8005574 <CalculateUpperAngles+0x394>
 800529c:	ee00 2a90 	vmov	s1, r2
 80052a0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800556c <CalculateUpperAngles+0x38c>
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fe fc72 	bl	8003b8e <DH_Matrix>
		arm_mat_mult_f32(&temp1, &temp, &temp2);
 80052aa:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80052ae:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80052b2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80052b6:	4618      	mov	r0, r3
 80052b8:	f002 f916 	bl	80074e8 <arm_mat_mult_f32>

		DH_Matrix(&temp, -M_PI_2, Solutions[2 * i][2], 0, 0);
 80052bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052c0:	005a      	lsls	r2, r3, #1
 80052c2:	49a9      	ldr	r1, [pc, #676]	; (8005568 <CalculateUpperAngles+0x388>)
 80052c4:	4613      	mov	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	440b      	add	r3, r1
 80052ce:	3308      	adds	r3, #8
 80052d0:	edd3 7a00 	vldr	s15, [r3]
 80052d4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80052d8:	eddf 1aa4 	vldr	s3, [pc, #656]	; 800556c <CalculateUpperAngles+0x38c>
 80052dc:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 800556c <CalculateUpperAngles+0x38c>
 80052e0:	eef0 0a67 	vmov.f32	s1, s15
 80052e4:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8005570 <CalculateUpperAngles+0x390>
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fe fc50 	bl	8003b8e <DH_Matrix>
		arm_mat_mult_f32(&temp2, &temp, &DH_T03);
 80052ee:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80052f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80052f6:	4aa0      	ldr	r2, [pc, #640]	; (8005578 <CalculateUpperAngles+0x398>)
 80052f8:	4618      	mov	r0, r3
 80052fa:	f002 f8f5 	bl	80074e8 <arm_mat_mult_f32>

		/*zamiana na macierz 3x3*/
		arm_mat_init_f32(&temp, 3, 3, temp_f32);
 80052fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005302:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8005306:	2203      	movs	r2, #3
 8005308:	2103      	movs	r1, #3
 800530a:	f002 f8d5 	bl	80074b8 <arm_mat_init_f32>
		arm_mat_init_f32(&temp1, 3, 3, temp1_f32);
 800530e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005312:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8005316:	2203      	movs	r2, #3
 8005318:	2103      	movs	r1, #3
 800531a:	f002 f8cd 	bl	80074b8 <arm_mat_init_f32>

		/*Kopiowanie macierzy rotacji R03*/
		temp.pData[0] = DH_T03.pData[0];
 800531e:	4b96      	ldr	r3, [pc, #600]	; (8005578 <CalculateUpperAngles+0x398>)
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	601a      	str	r2, [r3, #0]
		temp.pData[1] = DH_T03.pData[1];
 800532a:	4b93      	ldr	r3, [pc, #588]	; (8005578 <CalculateUpperAngles+0x398>)
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005332:	3304      	adds	r3, #4
 8005334:	6852      	ldr	r2, [r2, #4]
 8005336:	601a      	str	r2, [r3, #0]
		temp.pData[2] = DH_T03.pData[2];
 8005338:	4b8f      	ldr	r3, [pc, #572]	; (8005578 <CalculateUpperAngles+0x398>)
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005340:	3308      	adds	r3, #8
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	601a      	str	r2, [r3, #0]
		temp.pData[3] = DH_T03.pData[4];
 8005346:	4b8c      	ldr	r3, [pc, #560]	; (8005578 <CalculateUpperAngles+0x398>)
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800534e:	330c      	adds	r3, #12
 8005350:	6912      	ldr	r2, [r2, #16]
 8005352:	601a      	str	r2, [r3, #0]
		temp.pData[4] = DH_T03.pData[5];
 8005354:	4b88      	ldr	r3, [pc, #544]	; (8005578 <CalculateUpperAngles+0x398>)
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800535c:	3310      	adds	r3, #16
 800535e:	6952      	ldr	r2, [r2, #20]
 8005360:	601a      	str	r2, [r3, #0]
		temp.pData[5] = DH_T03.pData[6];
 8005362:	4b85      	ldr	r3, [pc, #532]	; (8005578 <CalculateUpperAngles+0x398>)
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800536a:	3314      	adds	r3, #20
 800536c:	6992      	ldr	r2, [r2, #24]
 800536e:	601a      	str	r2, [r3, #0]
		temp.pData[6] = DH_T03.pData[8];
 8005370:	4b81      	ldr	r3, [pc, #516]	; (8005578 <CalculateUpperAngles+0x398>)
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005378:	3318      	adds	r3, #24
 800537a:	6a12      	ldr	r2, [r2, #32]
 800537c:	601a      	str	r2, [r3, #0]
		temp.pData[7] = DH_T03.pData[9];
 800537e:	4b7e      	ldr	r3, [pc, #504]	; (8005578 <CalculateUpperAngles+0x398>)
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005386:	331c      	adds	r3, #28
 8005388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800538a:	601a      	str	r2, [r3, #0]
		temp.pData[8] = DH_T03.pData[10];
 800538c:	4b7a      	ldr	r3, [pc, #488]	; (8005578 <CalculateUpperAngles+0x398>)
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005394:	3320      	adds	r3, #32
 8005396:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005398:	601a      	str	r2, [r3, #0]

		/*Macierz odwrotna rotacji R30*/
		arm_mat_trans_f32(&temp, &temp1);
 800539a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800539e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f002 f988 	bl	80076ba <arm_mat_trans_f32>

		/*Kopiowanie macierzy rotacji R06*/
		temp.pData[0] = DH_T06.pData[0];
 80053aa:	4b74      	ldr	r3, [pc, #464]	; (800557c <CalculateUpperAngles+0x39c>)
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	601a      	str	r2, [r3, #0]
		temp.pData[1] = DH_T06.pData[1];
 80053b6:	4b71      	ldr	r3, [pc, #452]	; (800557c <CalculateUpperAngles+0x39c>)
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053be:	3304      	adds	r3, #4
 80053c0:	6852      	ldr	r2, [r2, #4]
 80053c2:	601a      	str	r2, [r3, #0]
		temp.pData[2] = DH_T06.pData[2];
 80053c4:	4b6d      	ldr	r3, [pc, #436]	; (800557c <CalculateUpperAngles+0x39c>)
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053cc:	3308      	adds	r3, #8
 80053ce:	6892      	ldr	r2, [r2, #8]
 80053d0:	601a      	str	r2, [r3, #0]
		temp.pData[3] = DH_T06.pData[4];
 80053d2:	4b6a      	ldr	r3, [pc, #424]	; (800557c <CalculateUpperAngles+0x39c>)
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053da:	330c      	adds	r3, #12
 80053dc:	6912      	ldr	r2, [r2, #16]
 80053de:	601a      	str	r2, [r3, #0]
		temp.pData[4] = DH_T06.pData[5];
 80053e0:	4b66      	ldr	r3, [pc, #408]	; (800557c <CalculateUpperAngles+0x39c>)
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053e8:	3310      	adds	r3, #16
 80053ea:	6952      	ldr	r2, [r2, #20]
 80053ec:	601a      	str	r2, [r3, #0]
		temp.pData[5] = DH_T06.pData[6];
 80053ee:	4b63      	ldr	r3, [pc, #396]	; (800557c <CalculateUpperAngles+0x39c>)
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053f6:	3314      	adds	r3, #20
 80053f8:	6992      	ldr	r2, [r2, #24]
 80053fa:	601a      	str	r2, [r3, #0]
		temp.pData[6] = DH_T06.pData[8];
 80053fc:	4b5f      	ldr	r3, [pc, #380]	; (800557c <CalculateUpperAngles+0x39c>)
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005404:	3318      	adds	r3, #24
 8005406:	6a12      	ldr	r2, [r2, #32]
 8005408:	601a      	str	r2, [r3, #0]
		temp.pData[7] = DH_T06.pData[9];
 800540a:	4b5c      	ldr	r3, [pc, #368]	; (800557c <CalculateUpperAngles+0x39c>)
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005412:	331c      	adds	r3, #28
 8005414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005416:	601a      	str	r2, [r3, #0]
		temp.pData[8] = DH_T06.pData[10];
 8005418:	4b58      	ldr	r3, [pc, #352]	; (800557c <CalculateUpperAngles+0x39c>)
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005420:	3320      	adds	r3, #32
 8005422:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005424:	601a      	str	r2, [r3, #0]

		arm_mat_mult_f32(&temp1, &temp, &R36);
 8005426:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800542a:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 800542e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005432:	4618      	mov	r0, r3
 8005434:	f002 f858 	bl	80074e8 <arm_mat_mult_f32>

		Solutions[2 * i][4] = acosf(R36.pData[8]);
 8005438:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800543c:	3320      	adds	r3, #32
 800543e:	edd3 7a00 	vldr	s15, [r3]
 8005442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005446:	005c      	lsls	r4, r3, #1
 8005448:	eeb0 0a67 	vmov.f32	s0, s15
 800544c:	f002 fc38 	bl	8007cc0 <acosf>
 8005450:	eef0 7a40 	vmov.f32	s15, s0
 8005454:	4a44      	ldr	r2, [pc, #272]	; (8005568 <CalculateUpperAngles+0x388>)
 8005456:	4623      	mov	r3, r4
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4423      	add	r3, r4
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4413      	add	r3, r2
 8005460:	3310      	adds	r3, #16
 8005462:	edc3 7a00 	vstr	s15, [r3]
		Solutions[2 * i + 1][4] = -Solutions[2 * i][4];
 8005466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800546a:	005a      	lsls	r2, r3, #1
 800546c:	493e      	ldr	r1, [pc, #248]	; (8005568 <CalculateUpperAngles+0x388>)
 800546e:	4613      	mov	r3, r2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	440b      	add	r3, r1
 8005478:	3310      	adds	r3, #16
 800547a:	edd3 7a00 	vldr	s15, [r3]
 800547e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	eef1 7a67 	vneg.f32	s15, s15
 800548a:	4937      	ldr	r1, [pc, #220]	; (8005568 <CalculateUpperAngles+0x388>)
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	440b      	add	r3, r1
 8005496:	3310      	adds	r3, #16
 8005498:	edc3 7a00 	vstr	s15, [r3]

		/*Gimbal lock*/
		if (fabs(R36.pData[8]) < 0.001)
 800549c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054a0:	3320      	adds	r3, #32
 80054a2:	edd3 7a00 	vldr	s15, [r3]
 80054a6:	eef0 7ae7 	vabs.f32	s15, s15
 80054aa:	ee17 0a90 	vmov	r0, s15
 80054ae:	f7fb f80f 	bl	80004d0 <__aeabi_f2d>
 80054b2:	a32b      	add	r3, pc, #172	; (adr r3, 8005560 <CalculateUpperAngles+0x380>)
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f7fb fad4 	bl	8000a64 <__aeabi_dcmplt>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80a1 	beq.w	8005606 <CalculateUpperAngles+0x426>
		{
			Solutions[2 * i][3] = angle.f[3];
 80054c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c8:	005a      	lsls	r2, r3, #1
 80054ca:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <CalculateUpperAngles+0x3a0>)
 80054cc:	68d9      	ldr	r1, [r3, #12]
 80054ce:	4826      	ldr	r0, [pc, #152]	; (8005568 <CalculateUpperAngles+0x388>)
 80054d0:	4613      	mov	r3, r2
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	4413      	add	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4403      	add	r3, r0
 80054da:	330c      	adds	r3, #12
 80054dc:	6019      	str	r1, [r3, #0]
			Solutions[2 * i + 1][3] = angle.f[3];
 80054de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	4b26      	ldr	r3, [pc, #152]	; (8005580 <CalculateUpperAngles+0x3a0>)
 80054e8:	68d9      	ldr	r1, [r3, #12]
 80054ea:	481f      	ldr	r0, [pc, #124]	; (8005568 <CalculateUpperAngles+0x388>)
 80054ec:	4613      	mov	r3, r2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4413      	add	r3, r2
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	4403      	add	r3, r0
 80054f6:	330c      	adds	r3, #12
 80054f8:	6019      	str	r1, [r3, #0]
			Solutions[2 * i][5] = asin(R36.pData[1]) - Solutions[2 * i][3];
 80054fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054fe:	3304      	adds	r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fa ffe4 	bl	80004d0 <__aeabi_f2d>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	ec43 2b10 	vmov	d0, r2, r3
 8005510:	f002 fba0 	bl	8007c54 <asin>
 8005514:	ec55 4b10 	vmov	r4, r5, d0
 8005518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551c:	005a      	lsls	r2, r3, #1
 800551e:	4912      	ldr	r1, [pc, #72]	; (8005568 <CalculateUpperAngles+0x388>)
 8005520:	4613      	mov	r3, r2
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	4413      	add	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	440b      	add	r3, r1
 800552a:	330c      	adds	r3, #12
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fa ffce 	bl	80004d0 <__aeabi_f2d>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4620      	mov	r0, r4
 800553a:	4629      	mov	r1, r5
 800553c:	f7fa fe68 	bl	8000210 <__aeabi_dsub>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554c:	005c      	lsls	r4, r3, #1
 800554e:	f7fb fac7 	bl	8000ae0 <__aeabi_d2f>
 8005552:	e017      	b.n	8005584 <CalculateUpperAngles+0x3a4>
 8005554:	f3af 8000 	nop.w
 8005558:	54442d18 	.word	0x54442d18
 800555c:	3ff921fb 	.word	0x3ff921fb
 8005560:	d2f1a9fc 	.word	0xd2f1a9fc
 8005564:	3f50624d 	.word	0x3f50624d
 8005568:	20000178 	.word	0x20000178
 800556c:	00000000 	.word	0x00000000
 8005570:	bfc90fdb 	.word	0xbfc90fdb
 8005574:	44098000 	.word	0x44098000
 8005578:	20000170 	.word	0x20000170
 800557c:	20000158 	.word	0x20000158
 8005580:	200000dc 	.word	0x200000dc
 8005584:	4602      	mov	r2, r0
 8005586:	498d      	ldr	r1, [pc, #564]	; (80057bc <CalculateUpperAngles+0x5dc>)
 8005588:	4623      	mov	r3, r4
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4423      	add	r3, r4
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	440b      	add	r3, r1
 8005592:	3314      	adds	r3, #20
 8005594:	601a      	str	r2, [r3, #0]
			Solutions[2 * i + 1][5] = asin(R36.pData[1])
 8005596:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800559a:	3304      	adds	r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fa ff96 	bl	80004d0 <__aeabi_f2d>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	ec43 2b10 	vmov	d0, r2, r3
 80055ac:	f002 fb52 	bl	8007c54 <asin>
 80055b0:	ec55 4b10 	vmov	r4, r5, d0
					- Solutions[2 * i + 1][3];
 80055b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	497f      	ldr	r1, [pc, #508]	; (80057bc <CalculateUpperAngles+0x5dc>)
 80055be:	4613      	mov	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	330c      	adds	r3, #12
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fa ff7f 	bl	80004d0 <__aeabi_f2d>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7fa fe19 	bl	8000210 <__aeabi_dsub>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
			Solutions[2 * i + 1][5] = asin(R36.pData[1])
 80055e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	1c5c      	adds	r4, r3, #1
					- Solutions[2 * i + 1][3];
 80055ee:	f7fb fa77 	bl	8000ae0 <__aeabi_d2f>
 80055f2:	4602      	mov	r2, r0
			Solutions[2 * i + 1][5] = asin(R36.pData[1])
 80055f4:	4971      	ldr	r1, [pc, #452]	; (80057bc <CalculateUpperAngles+0x5dc>)
 80055f6:	4623      	mov	r3, r4
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4423      	add	r3, r4
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	440b      	add	r3, r1
 8005600:	3314      	adds	r3, #20
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e0ca      	b.n	800579c <CalculateUpperAngles+0x5bc>
		}
		else
		{
			float tempsin1 = sinf(Solutions[2 * i][4]);
 8005606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800560a:	005a      	lsls	r2, r3, #1
 800560c:	496b      	ldr	r1, [pc, #428]	; (80057bc <CalculateUpperAngles+0x5dc>)
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	3310      	adds	r3, #16
 800561a:	edd3 7a00 	vldr	s15, [r3]
 800561e:	eeb0 0a67 	vmov.f32	s0, s15
 8005622:	f002 fad1 	bl	8007bc8 <sinf>
 8005626:	ed87 0a42 	vstr	s0, [r7, #264]	; 0x108
			float tempsin2 = sinf(Solutions[2 * i + 1][4]);
 800562a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	4962      	ldr	r1, [pc, #392]	; (80057bc <CalculateUpperAngles+0x5dc>)
 8005634:	4613      	mov	r3, r2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4413      	add	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	440b      	add	r3, r1
 800563e:	3310      	adds	r3, #16
 8005640:	edd3 7a00 	vldr	s15, [r3]
 8005644:	eeb0 0a67 	vmov.f32	s0, s15
 8005648:	f002 fabe 	bl	8007bc8 <sinf>
 800564c:	ed87 0a41 	vstr	s0, [r7, #260]	; 0x104

			Solutions[2 * i][3] = -atan2f((R36.pData[5] / tempsin1),
 8005650:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005654:	3314      	adds	r3, #20
 8005656:	ed93 7a00 	vldr	s14, [r3]
 800565a:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 800565e:	eec7 6a27 	vdiv.f32	s13, s14, s15
					(-R36.pData[2] / tempsin1));
 8005662:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005666:	3308      	adds	r3, #8
 8005668:	edd3 7a00 	vldr	s15, [r3]
 800566c:	eeb1 7a67 	vneg.f32	s14, s15
			Solutions[2 * i][3] = -atan2f((R36.pData[5] / tempsin1),
 8005670:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8005674:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005678:	eef0 0a46 	vmov.f32	s1, s12
 800567c:	eeb0 0a66 	vmov.f32	s0, s13
 8005680:	f002 fb76 	bl	8007d70 <atan2f>
 8005684:	eef0 7a40 	vmov.f32	s15, s0
 8005688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568c:	005a      	lsls	r2, r3, #1
 800568e:	eef1 7a67 	vneg.f32	s15, s15
 8005692:	494a      	ldr	r1, [pc, #296]	; (80057bc <CalculateUpperAngles+0x5dc>)
 8005694:	4613      	mov	r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4413      	add	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	440b      	add	r3, r1
 800569e:	330c      	adds	r3, #12
 80056a0:	edc3 7a00 	vstr	s15, [r3]
			Solutions[2 * i + 1][3] = -atan2f((R36.pData[5] / tempsin2),
 80056a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056a8:	3314      	adds	r3, #20
 80056aa:	ed93 7a00 	vldr	s14, [r3]
 80056ae:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 80056b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
					(-R36.pData[2] / tempsin2));
 80056b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056ba:	3308      	adds	r3, #8
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	eeb1 7a67 	vneg.f32	s14, s15
			Solutions[2 * i + 1][3] = -atan2f((R36.pData[5] / tempsin2),
 80056c4:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 80056c8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80056cc:	eef0 0a46 	vmov.f32	s1, s12
 80056d0:	eeb0 0a66 	vmov.f32	s0, s13
 80056d4:	f002 fb4c 	bl	8007d70 <atan2f>
 80056d8:	eef0 7a40 	vmov.f32	s15, s0
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	eef1 7a67 	vneg.f32	s15, s15
 80056e8:	4934      	ldr	r1, [pc, #208]	; (80057bc <CalculateUpperAngles+0x5dc>)
 80056ea:	4613      	mov	r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	440b      	add	r3, r1
 80056f4:	330c      	adds	r3, #12
 80056f6:	edc3 7a00 	vstr	s15, [r3]

			Solutions[2 * i][5] = atan2f((-R36.pData[7] / tempsin1),
 80056fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056fe:	331c      	adds	r3, #28
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	eeb1 7a67 	vneg.f32	s14, s15
 8005708:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 800570c:	eec7 6a27 	vdiv.f32	s13, s14, s15
					(R36.pData[6] / tempsin1));
 8005710:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005714:	3318      	adds	r3, #24
 8005716:	ed93 7a00 	vldr	s14, [r3]
			Solutions[2 * i][5] = atan2f((-R36.pData[7] / tempsin1),
 800571a:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 800571e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005726:	005c      	lsls	r4, r3, #1
 8005728:	eef0 0a46 	vmov.f32	s1, s12
 800572c:	eeb0 0a66 	vmov.f32	s0, s13
 8005730:	f002 fb1e 	bl	8007d70 <atan2f>
 8005734:	eef0 7a40 	vmov.f32	s15, s0
 8005738:	4a20      	ldr	r2, [pc, #128]	; (80057bc <CalculateUpperAngles+0x5dc>)
 800573a:	4623      	mov	r3, r4
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	4423      	add	r3, r4
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4413      	add	r3, r2
 8005744:	3314      	adds	r3, #20
 8005746:	edc3 7a00 	vstr	s15, [r3]
			Solutions[2 * i + 1][5] = atan2f((-R36.pData[7] / tempsin2),
 800574a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800574e:	331c      	adds	r3, #28
 8005750:	edd3 7a00 	vldr	s15, [r3]
 8005754:	eeb1 7a67 	vneg.f32	s14, s15
 8005758:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 800575c:	eec7 6a27 	vdiv.f32	s13, s14, s15
					(R36.pData[6] / tempsin2));
 8005760:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005764:	3318      	adds	r3, #24
 8005766:	ed93 7a00 	vldr	s14, [r3]
			Solutions[2 * i + 1][5] = atan2f((-R36.pData[7] / tempsin2),
 800576a:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 800576e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	1c5c      	adds	r4, r3, #1
 800577a:	eef0 0a46 	vmov.f32	s1, s12
 800577e:	eeb0 0a66 	vmov.f32	s0, s13
 8005782:	f002 faf5 	bl	8007d70 <atan2f>
 8005786:	eef0 7a40 	vmov.f32	s15, s0
 800578a:	4a0c      	ldr	r2, [pc, #48]	; (80057bc <CalculateUpperAngles+0x5dc>)
 800578c:	4623      	mov	r3, r4
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4423      	add	r3, r4
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4413      	add	r3, r2
 8005796:	3314      	adds	r3, #20
 8005798:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 4; i++)
 800579c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a0:	3301      	adds	r3, #1
 80057a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	f77f ad1f 	ble.w	80051ee <CalculateUpperAngles+0xe>
		}
	}
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bdb0      	pop	{r4, r5, r7, pc}
 80057bc:	20000178 	.word	0x20000178

080057c0 <CheckLimits>:

uint8_t CheckLimits(uint8_t index, uint8_t DOFs)
{
 80057c0:	b5b0      	push	{r4, r5, r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	460a      	mov	r2, r1
 80057ca:	71fb      	strb	r3, [r7, #7]
 80057cc:	4613      	mov	r3, r2
 80057ce:	71bb      	strb	r3, [r7, #6]
	uint8_t result=1;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
	for (int j = 0; j < DOFs; j++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	60bb      	str	r3, [r7, #8]
 80057d8:	e050      	b.n	800587c <CheckLimits+0xbc>
	{
		if (Solutions[index][j] > (DOF_MAX[j] + TOLERANCE)
 80057da:	79fa      	ldrb	r2, [r7, #7]
 80057dc:	492e      	ldr	r1, [pc, #184]	; (8005898 <CheckLimits+0xd8>)
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fa fe6d 	bl	80004d0 <__aeabi_f2d>
 80057f6:	4604      	mov	r4, r0
 80057f8:	460d      	mov	r5, r1
 80057fa:	4a28      	ldr	r2, [pc, #160]	; (800589c <CheckLimits+0xdc>)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f7fa fe63 	bl	80004d0 <__aeabi_f2d>
 800580a:	a321      	add	r3, pc, #132	; (adr r3, 8005890 <CheckLimits+0xd0>)
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f7fa fd00 	bl	8000214 <__adddf3>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4620      	mov	r0, r4
 800581a:	4629      	mov	r1, r5
 800581c:	f7fb f940 	bl	8000aa0 <__aeabi_dcmpgt>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d125      	bne.n	8005872 <CheckLimits+0xb2>
				|| Solutions[index][j] < (DOF_MIN[j] - TOLERANCE))
 8005826:	79fa      	ldrb	r2, [r7, #7]
 8005828:	491b      	ldr	r1, [pc, #108]	; (8005898 <CheckLimits+0xd8>)
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f7fa fe47 	bl	80004d0 <__aeabi_f2d>
 8005842:	4604      	mov	r4, r0
 8005844:	460d      	mov	r5, r1
 8005846:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <CheckLimits+0xe0>)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f7fa fe3d 	bl	80004d0 <__aeabi_f2d>
 8005856:	a30e      	add	r3, pc, #56	; (adr r3, 8005890 <CheckLimits+0xd0>)
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f7fa fcd8 	bl	8000210 <__aeabi_dsub>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4620      	mov	r0, r4
 8005866:	4629      	mov	r1, r5
 8005868:	f7fb f8fc 	bl	8000a64 <__aeabi_dcmplt>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <CheckLimits+0xb6>
		{
			result =0;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
	for (int j = 0; j < DOFs; j++)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	3301      	adds	r3, #1
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	79bb      	ldrb	r3, [r7, #6]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	dbaa      	blt.n	80057da <CheckLimits+0x1a>
		}
	}
	return result;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bdb0      	pop	{r4, r5, r7, pc}
 800588e:	bf00      	nop
 8005890:	47ae147b 	.word	0x47ae147b
 8005894:	3f847ae1 	.word	0x3f847ae1
 8005898:	20000178 	.word	0x20000178
 800589c:	0800a000 	.word	0x0800a000
 80058a0:	0800a018 	.word	0x0800a018

080058a4 <CalculateDistance>:
float CalculateDistance(uint8_t index, int DOFs)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	6039      	str	r1, [r7, #0]
 80058ae:	71fb      	strb	r3, [r7, #7]
	float sum = 0.0;
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < DOFs; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	e024      	b.n	8005906 <CalculateDistance+0x62>
	{
		sum += powf((angle.f[i] - Solutions[index][i]), 2.0);
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <CalculateDistance+0x7c>)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	ed93 7a00 	vldr	s14, [r3]
 80058c8:	79fa      	ldrb	r2, [r7, #7]
 80058ca:	4916      	ldr	r1, [pc, #88]	; (8005924 <CalculateDistance+0x80>)
 80058cc:	4613      	mov	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	4413      	add	r3, r2
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	edd3 7a00 	vldr	s15, [r3]
 80058e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058e4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80058e8:	eeb0 0a67 	vmov.f32	s0, s15
 80058ec:	f002 fa42 	bl	8007d74 <powf>
 80058f0:	eeb0 7a40 	vmov.f32	s14, s0
 80058f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80058f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058fc:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < DOFs; i++)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	3301      	adds	r3, #1
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	dbd6      	blt.n	80058bc <CalculateDistance+0x18>
	}
	return sum;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	ee07 3a90 	vmov	s15, r3
}
 8005914:	eeb0 0a67 	vmov.f32	s0, s15
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200000dc 	.word	0x200000dc
 8005924:	20000178 	.word	0x20000178

08005928 <CheckSolutions>:


void CheckSolutions()
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
	/*Check Solutions' limit*/
	uint8_t temp;
	switch (DisconnectDoF)
 800592e:	4b17      	ldr	r3, [pc, #92]	; (800598c <CheckSolutions+0x64>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d004      	beq.n	8005940 <CheckSolutions+0x18>
 8005936:	2b02      	cmp	r3, #2
 8005938:	d105      	bne.n	8005946 <CheckSolutions+0x1e>
	{
	case DOF456:
		temp=3;
 800593a:	2303      	movs	r3, #3
 800593c:	71fb      	strb	r3, [r7, #7]
		break;
 800593e:	e005      	b.n	800594c <CheckSolutions+0x24>
	case DOF6:
		temp=5;
 8005940:	2305      	movs	r3, #5
 8005942:	71fb      	strb	r3, [r7, #7]
		break;
 8005944:	e002      	b.n	800594c <CheckSolutions+0x24>
	default:
		temp=6;
 8005946:	2306      	movs	r3, #6
 8005948:	71fb      	strb	r3, [r7, #7]
		break;
 800594a:	bf00      	nop

	}
	for (int i=0;i<8;i++)
 800594c:	2300      	movs	r3, #0
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	e015      	b.n	800597e <CheckSolutions+0x56>
	{
		/*Reset first*/
		SolutionsCorrect[i]=0;
 8005952:	4a0f      	ldr	r2, [pc, #60]	; (8005990 <CheckSolutions+0x68>)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	4413      	add	r3, r2
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
		SolutionsCorrect[i]=CheckLimits(i,temp);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	79fa      	ldrb	r2, [r7, #7]
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff ff2b 	bl	80057c0 <CheckLimits>
 800596a:	4603      	mov	r3, r0
 800596c:	4619      	mov	r1, r3
 800596e:	4a08      	ldr	r2, [pc, #32]	; (8005990 <CheckSolutions+0x68>)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	4413      	add	r3, r2
 8005974:	460a      	mov	r2, r1
 8005976:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b07      	cmp	r3, #7
 8005982:	dde6      	ble.n	8005952 <CheckSolutions+0x2a>
	}
	return;
 8005984:	bf00      	nop
}
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	200000d9 	.word	0x200000d9
 8005990:	200002d8 	.word	0x200002d8

08005994 <TransformToolFull>:
void TransformToolFull(float VectorIn[6], float VectorOut[6])
{
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	ed2d 8b02 	vpush	{d8}
 800599a:	b0e1      	sub	sp, #388	; 0x184
 800599c:	af00      	add	r7, sp, #0
 800599e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80059a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059a6:	6018      	str	r0, [r3, #0]
 80059a8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80059ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80059b0:	6019      	str	r1, [r3, #0]

	float temp[6][3], DHMat_f32[16], DHMatInv_f32[16], DHTool_f32[16], DHOutput_f32[16];
	float yaw = VectorIn[3], pitch=VectorIn[4], roll = VectorIn[5];
 80059b2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80059b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80059c2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80059c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80059d2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80059d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174


	arm_matrix_instance_f32 DHMat, DHTool,DHMatInv, DHOutput;
	arm_mat_init_f32(&DHMat,4,4,DHMat_f32);
 80059e2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80059e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059ea:	2204      	movs	r2, #4
 80059ec:	2104      	movs	r1, #4
 80059ee:	f001 fd63 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&DHMatInv,4,4,DHMatInv_f32);
 80059f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80059f6:	f107 0014 	add.w	r0, r7, #20
 80059fa:	2204      	movs	r2, #4
 80059fc:	2104      	movs	r1, #4
 80059fe:	f001 fd5b 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&DHTool,4,4,DHTool_f32);
 8005a02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005a06:	f107 001c 	add.w	r0, r7, #28
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	2104      	movs	r1, #4
 8005a0e:	f001 fd53 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&DHOutput,4,4,DHOutput_f32);
 8005a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a16:	f107 000c 	add.w	r0, r7, #12
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	2104      	movs	r1, #4
 8005a1e:	f001 fd4b 	bl	80074b8 <arm_mat_init_f32>


	/*Create DH Matrix for desired transforamtion*/
	DHTool_f32[0] = cosf(yaw) * cosf(pitch);
 8005a22:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005a26:	f002 f88b 	bl	8007b40 <cosf>
 8005a2a:	eeb0 8a40 	vmov.f32	s16, s0
 8005a2e:	ed97 0a5e 	vldr	s0, [r7, #376]	; 0x178
 8005a32:	f002 f885 	bl	8007b40 <cosf>
 8005a36:	eef0 7a40 	vmov.f32	s15, s0
 8005a3a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005a3e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005a42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a46:	edc3 7a00 	vstr	s15, [r3]
	DHTool_f32[1] = cosf(yaw) * sinf(pitch) * sinf(roll)
 8005a4a:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005a4e:	f002 f877 	bl	8007b40 <cosf>
 8005a52:	eeb0 8a40 	vmov.f32	s16, s0
 8005a56:	ed97 0a5e 	vldr	s0, [r7, #376]	; 0x178
 8005a5a:	f002 f8b5 	bl	8007bc8 <sinf>
 8005a5e:	eef0 7a40 	vmov.f32	s15, s0
 8005a62:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005a66:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005a6a:	f002 f8ad 	bl	8007bc8 <sinf>
 8005a6e:	eef0 7a40 	vmov.f32	s15, s0
 8005a72:	ee28 8a27 	vmul.f32	s16, s16, s15
			- sinf(yaw) * cosf(roll);
 8005a76:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005a7a:	f002 f8a5 	bl	8007bc8 <sinf>
 8005a7e:	eef0 8a40 	vmov.f32	s17, s0
 8005a82:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005a86:	f002 f85b 	bl	8007b40 <cosf>
 8005a8a:	eef0 7a40 	vmov.f32	s15, s0
 8005a8e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005a92:	ee78 7a67 	vsub.f32	s15, s16, s15
	DHTool_f32[1] = cosf(yaw) * sinf(pitch) * sinf(roll)
 8005a96:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005a9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a9e:	edc3 7a01 	vstr	s15, [r3, #4]
	DHTool_f32[2] = cosf(yaw) * sinf(pitch) * cosf(roll)
 8005aa2:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005aa6:	f002 f84b 	bl	8007b40 <cosf>
 8005aaa:	eeb0 8a40 	vmov.f32	s16, s0
 8005aae:	ed97 0a5e 	vldr	s0, [r7, #376]	; 0x178
 8005ab2:	f002 f889 	bl	8007bc8 <sinf>
 8005ab6:	eef0 7a40 	vmov.f32	s15, s0
 8005aba:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005abe:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005ac2:	f002 f83d 	bl	8007b40 <cosf>
 8005ac6:	eef0 7a40 	vmov.f32	s15, s0
 8005aca:	ee28 8a27 	vmul.f32	s16, s16, s15
			+ sinf(yaw) * sinf(roll);
 8005ace:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005ad2:	f002 f879 	bl	8007bc8 <sinf>
 8005ad6:	eef0 8a40 	vmov.f32	s17, s0
 8005ada:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005ade:	f002 f873 	bl	8007bc8 <sinf>
 8005ae2:	eef0 7a40 	vmov.f32	s15, s0
 8005ae6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005aea:	ee78 7a27 	vadd.f32	s15, s16, s15
	DHTool_f32[2] = cosf(yaw) * sinf(pitch) * cosf(roll)
 8005aee:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005af2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005af6:	edc3 7a02 	vstr	s15, [r3, #8]
	DHTool_f32[3] = VectorIn[0];
 8005afa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005afe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005b0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b0e:	60da      	str	r2, [r3, #12]
	DHTool_f32[4] = sinf(yaw) * cosf(pitch);
 8005b10:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005b14:	f002 f858 	bl	8007bc8 <sinf>
 8005b18:	eeb0 8a40 	vmov.f32	s16, s0
 8005b1c:	ed97 0a5e 	vldr	s0, [r7, #376]	; 0x178
 8005b20:	f002 f80e 	bl	8007b40 <cosf>
 8005b24:	eef0 7a40 	vmov.f32	s15, s0
 8005b28:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005b2c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005b30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b34:	edc3 7a04 	vstr	s15, [r3, #16]
	DHTool_f32[5] = sinf(yaw) * sinf(pitch) * sinf(roll)
 8005b38:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005b3c:	f002 f844 	bl	8007bc8 <sinf>
 8005b40:	eeb0 8a40 	vmov.f32	s16, s0
 8005b44:	ed97 0a5e 	vldr	s0, [r7, #376]	; 0x178
 8005b48:	f002 f83e 	bl	8007bc8 <sinf>
 8005b4c:	eef0 7a40 	vmov.f32	s15, s0
 8005b50:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005b54:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005b58:	f002 f836 	bl	8007bc8 <sinf>
 8005b5c:	eef0 7a40 	vmov.f32	s15, s0
 8005b60:	ee28 8a27 	vmul.f32	s16, s16, s15
			+ cosf(yaw) * cosf(roll);
 8005b64:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005b68:	f001 ffea 	bl	8007b40 <cosf>
 8005b6c:	eef0 8a40 	vmov.f32	s17, s0
 8005b70:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005b74:	f001 ffe4 	bl	8007b40 <cosf>
 8005b78:	eef0 7a40 	vmov.f32	s15, s0
 8005b7c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005b80:	ee78 7a27 	vadd.f32	s15, s16, s15
	DHTool_f32[5] = sinf(yaw) * sinf(pitch) * sinf(roll)
 8005b84:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005b88:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b8c:	edc3 7a05 	vstr	s15, [r3, #20]
	DHTool_f32[6] = sinf(yaw) * sinf(pitch) * cosf(roll)
 8005b90:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005b94:	f002 f818 	bl	8007bc8 <sinf>
 8005b98:	eeb0 8a40 	vmov.f32	s16, s0
 8005b9c:	ed97 0a5e 	vldr	s0, [r7, #376]	; 0x178
 8005ba0:	f002 f812 	bl	8007bc8 <sinf>
 8005ba4:	eef0 7a40 	vmov.f32	s15, s0
 8005ba8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005bac:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005bb0:	f001 ffc6 	bl	8007b40 <cosf>
 8005bb4:	eef0 7a40 	vmov.f32	s15, s0
 8005bb8:	ee28 8a27 	vmul.f32	s16, s16, s15
			- cosf(yaw) * sinf(roll);
 8005bbc:	ed97 0a5f 	vldr	s0, [r7, #380]	; 0x17c
 8005bc0:	f001 ffbe 	bl	8007b40 <cosf>
 8005bc4:	eef0 8a40 	vmov.f32	s17, s0
 8005bc8:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005bcc:	f001 fffc 	bl	8007bc8 <sinf>
 8005bd0:	eef0 7a40 	vmov.f32	s15, s0
 8005bd4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005bd8:	ee78 7a67 	vsub.f32	s15, s16, s15
	DHTool_f32[6] = sinf(yaw) * sinf(pitch) * cosf(roll)
 8005bdc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005be0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005be4:	edc3 7a06 	vstr	s15, [r3, #24]
	DHTool_f32[7] = VectorIn[1];
 8005be8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005bec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005bf8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bfc:	61da      	str	r2, [r3, #28]
	DHTool_f32[8] = -sinf(pitch);
 8005bfe:	ed97 0a5e 	vldr	s0, [r7, #376]	; 0x178
 8005c02:	f001 ffe1 	bl	8007bc8 <sinf>
 8005c06:	eef0 7a40 	vmov.f32	s15, s0
 8005c0a:	eef1 7a67 	vneg.f32	s15, s15
 8005c0e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c16:	edc3 7a08 	vstr	s15, [r3, #32]
	DHTool_f32[9] = -cosf(pitch) * sinf(roll);
 8005c1a:	ed97 0a5e 	vldr	s0, [r7, #376]	; 0x178
 8005c1e:	f001 ff8f 	bl	8007b40 <cosf>
 8005c22:	eef0 7a40 	vmov.f32	s15, s0
 8005c26:	eeb1 8a67 	vneg.f32	s16, s15
 8005c2a:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005c2e:	f001 ffcb 	bl	8007bc8 <sinf>
 8005c32:	eef0 7a40 	vmov.f32	s15, s0
 8005c36:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005c3a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c42:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DHTool_f32[10] = cosf(pitch) * cosf(roll);
 8005c46:	ed97 0a5e 	vldr	s0, [r7, #376]	; 0x178
 8005c4a:	f001 ff79 	bl	8007b40 <cosf>
 8005c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8005c52:	ed97 0a5d 	vldr	s0, [r7, #372]	; 0x174
 8005c56:	f001 ff73 	bl	8007b40 <cosf>
 8005c5a:	eef0 7a40 	vmov.f32	s15, s0
 8005c5e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005c62:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c6a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DHTool_f32[11] = VectorIn[2];
 8005c6e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c72:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c82:	62da      	str	r2, [r3, #44]	; 0x2c
	DHTool_f32[12] = 0.0;
 8005c84:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c88:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
	DHTool_f32[13] = 0.0;
 8005c92:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005c96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	635a      	str	r2, [r3, #52]	; 0x34
	DHTool_f32[14] = 0.0;
 8005ca0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005ca4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
	DHTool_f32[15] = 1.0;
 8005cae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005cb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005cb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005cba:	63da      	str	r2, [r3, #60]	; 0x3c

	/*Get DH Matrix for current position and invert it*/
	CalculateForwardKinematics(meas_angle.f,temp,0,&DHMat);
 8005cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc0:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4853      	ldr	r0, [pc, #332]	; (8005e14 <TransformToolFull+0x480>)
 8005cc8:	f7fe f852 	bl	8003d70 <CalculateForwardKinematics>
	InvertDHMatrix(&DHMat,&DHMatInv);
 8005ccc:	f107 0214 	add.w	r2, r7, #20
 8005cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 f89e 	bl	8005e18 <InvertDHMatrix>

	/*Mutiply 2 matrcies*/
	arm_mat_mult_f32(&DHMatInv,&DHTool,&DHOutput);
 8005cdc:	f107 020c 	add.w	r2, r7, #12
 8005ce0:	f107 011c 	add.w	r1, r7, #28
 8005ce4:	f107 0314 	add.w	r3, r7, #20
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 fbfd 	bl	80074e8 <arm_mat_mult_f32>

	VectorOut[0]=DHOutput.pData[3];
 8005cee:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005cf2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005cfe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	601a      	str	r2, [r3, #0]
	VectorOut[1]=DHOutput.pData[7];
 8005d06:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d0a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d14:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	69d2      	ldr	r2, [r2, #28]
 8005d1e:	601a      	str	r2, [r3, #0]
	VectorOut[2]=DHOutput.pData[11];
 8005d20:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d2e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d38:	601a      	str	r2, [r3, #0]

	/*Pitch First. Patrz: DHTool_f32[8]*/
	VectorOut[4]=-asinf(DHOutput.pData[8]);
 8005d3a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d3e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	3320      	adds	r3, #32
 8005d46:	edd3 7a00 	vldr	s15, [r3]
 8005d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d4e:	f001 ffe3 	bl	8007d18 <asinf>
 8005d52:	eef0 7a40 	vmov.f32	s15, s0
 8005d56:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d5a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3310      	adds	r3, #16
 8005d62:	eef1 7a67 	vneg.f32	s15, s15
 8005d66:	edc3 7a00 	vstr	s15, [r3]

	/*Then roll.  Patrz: DHTool_f32[9]*/
	VectorOut[5]=-asinf(DHOutput.pData[9]/cosf(VectorOut[4]));
 8005d6a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d6e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	3324      	adds	r3, #36	; 0x24
 8005d76:	ed93 8a00 	vldr	s16, [r3]
 8005d7a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005d7e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3310      	adds	r3, #16
 8005d86:	edd3 7a00 	vldr	s15, [r3]
 8005d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d8e:	f001 fed7 	bl	8007b40 <cosf>
 8005d92:	eeb0 7a40 	vmov.f32	s14, s0
 8005d96:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d9e:	f001 ffbb 	bl	8007d18 <asinf>
 8005da2:	eef0 7a40 	vmov.f32	s15, s0
 8005da6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005daa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3314      	adds	r3, #20
 8005db2:	eef1 7a67 	vneg.f32	s15, s15
 8005db6:	edc3 7a00 	vstr	s15, [r3]

	/*Finally roll*. Patrz DHTool_f32[0]*/
	VectorOut[3]=acosf(DHOutput.pData[0]/cosf(VectorOut[4]));
 8005dba:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005dbe:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	ed93 8a00 	vldr	s16, [r3]
 8005dc8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005dcc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3310      	adds	r3, #16
 8005dd4:	edd3 7a00 	vldr	s15, [r3]
 8005dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ddc:	f001 feb0 	bl	8007b40 <cosf>
 8005de0:	eeb0 7a40 	vmov.f32	s14, s0
 8005de4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005de8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005dec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f103 040c 	add.w	r4, r3, #12
 8005df6:	eeb0 0a67 	vmov.f32	s0, s15
 8005dfa:	f001 ff61 	bl	8007cc0 <acosf>
 8005dfe:	eef0 7a40 	vmov.f32	s15, s0
 8005e02:	edc4 7a00 	vstr	s15, [r4]
	return;
 8005e06:	bf00      	nop
}
 8005e08:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	ecbd 8b02 	vpop	{d8}
 8005e12:	bd90      	pop	{r4, r7, pc}
 8005e14:	2000010c 	.word	0x2000010c

08005e18 <InvertDHMatrix>:
void InvertDHMatrix(arm_matrix_instance_f32 *In, arm_matrix_instance_f32 *Out)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b0a2      	sub	sp, #136	; 0x88
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]

	/*https://en.wikipedia.org/wiki/Denavit%E2%80%93Hartenberg_parameters#Use_of_Denavit_and_Hartenberg_matrices*/
	arm_matrix_instance_f32 RotMat, RotMatT, OutPosition, InPosition;
	float RotMat_f32[9], RotMatT_f32[9], OutPosition_f32[3], InPosition_f32[3];
	arm_mat_init_f32(&RotMat,3,3,RotMat_f32);
 8005e22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e26:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	2103      	movs	r1, #3
 8005e2e:	f001 fb43 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&RotMatT,3,3,RotMatT_f32);
 8005e32:	f107 0320 	add.w	r3, r7, #32
 8005e36:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	2103      	movs	r1, #3
 8005e3e:	f001 fb3b 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&OutPosition,3,1,OutPosition_f32);
 8005e42:	f107 0314 	add.w	r3, r7, #20
 8005e46:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	2103      	movs	r1, #3
 8005e4e:	f001 fb33 	bl	80074b8 <arm_mat_init_f32>
	arm_mat_init_f32(&InPosition,3,1,InPosition_f32);
 8005e52:	f107 0308 	add.w	r3, r7, #8
 8005e56:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	2103      	movs	r1, #3
 8005e5e:	f001 fb2b 	bl	80074b8 <arm_mat_init_f32>

	/*Copy Rotation Matrix from input*/
	RotMat.pData[0]=In->pData[0];
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
	RotMat.pData[1]=In->pData[1];
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e76:	3304      	adds	r3, #4
 8005e78:	6852      	ldr	r2, [r2, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
	RotMat.pData[2]=In->pData[2];
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e84:	3308      	adds	r3, #8
 8005e86:	6892      	ldr	r2, [r2, #8]
 8005e88:	601a      	str	r2, [r3, #0]
	RotMat.pData[3]=In->pData[4];
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e92:	330c      	adds	r3, #12
 8005e94:	6912      	ldr	r2, [r2, #16]
 8005e96:	601a      	str	r2, [r3, #0]
	RotMat.pData[4]=In->pData[5];
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ea0:	3310      	adds	r3, #16
 8005ea2:	6952      	ldr	r2, [r2, #20]
 8005ea4:	601a      	str	r2, [r3, #0]
	RotMat.pData[5]=In->pData[6];
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eae:	3314      	adds	r3, #20
 8005eb0:	6992      	ldr	r2, [r2, #24]
 8005eb2:	601a      	str	r2, [r3, #0]
	RotMat.pData[6]=In->pData[8];
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ebc:	3318      	adds	r3, #24
 8005ebe:	6a12      	ldr	r2, [r2, #32]
 8005ec0:	601a      	str	r2, [r3, #0]
	RotMat.pData[7]=In->pData[9];
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eca:	331c      	adds	r3, #28
 8005ecc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ece:	601a      	str	r2, [r3, #0]
	RotMat.pData[8]=In->pData[10];
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ed8:	3320      	adds	r3, #32
 8005eda:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005edc:	601a      	str	r2, [r3, #0]

	/*Invert Rotation Matrix <==> Transpose*/

	arm_mat_trans_f32(&RotMat,&RotMatT);
 8005ede:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8005ee2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 fbe6 	bl	80076ba <arm_mat_trans_f32>

	/*Calculate T-part of Inverted DH-Matrix*/


	InPosition.pData[0]=In->pData[3];
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef4:	68d2      	ldr	r2, [r2, #12]
 8005ef6:	601a      	str	r2, [r3, #0]
	InPosition.pData[1]=In->pData[7];
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efe:	3304      	adds	r3, #4
 8005f00:	69d2      	ldr	r2, [r2, #28]
 8005f02:	601a      	str	r2, [r3, #0]
	InPosition.pData[2]=In->pData[11];
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f0e:	601a      	str	r2, [r3, #0]
	arm_mat_mult_f32(&RotMatT,&InPosition,&OutPosition);
 8005f10:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005f14:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005f18:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f001 fae3 	bl	80074e8 <arm_mat_mult_f32>

	/*Copy everything*/

	Out->pData[0]=RotMatT.pData[0];
 8005f22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	601a      	str	r2, [r3, #0]
	Out->pData[1]=RotMatT.pData[1];
 8005f2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	6852      	ldr	r2, [r2, #4]
 8005f36:	601a      	str	r2, [r3, #0]
	Out->pData[2]=RotMatT.pData[2];
 8005f38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	6892      	ldr	r2, [r2, #8]
 8005f42:	601a      	str	r2, [r3, #0]
	Out->pData[3]=-OutPosition.pData[0];
 8005f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f46:	edd3 7a00 	vldr	s15, [r3]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	330c      	adds	r3, #12
 8005f50:	eef1 7a67 	vneg.f32	s15, s15
 8005f54:	edc3 7a00 	vstr	s15, [r3]
	Out->pData[4]=RotMatT.pData[3];
 8005f58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	3310      	adds	r3, #16
 8005f60:	68d2      	ldr	r2, [r2, #12]
 8005f62:	601a      	str	r2, [r3, #0]
	Out->pData[5]=RotMatT.pData[4];
 8005f64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	6912      	ldr	r2, [r2, #16]
 8005f6e:	601a      	str	r2, [r3, #0]
	Out->pData[6]=RotMatT.pData[5];
 8005f70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	3318      	adds	r3, #24
 8005f78:	6952      	ldr	r2, [r2, #20]
 8005f7a:	601a      	str	r2, [r3, #0]
	Out->pData[7]=-OutPosition.pData[1];
 8005f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f7e:	3304      	adds	r3, #4
 8005f80:	edd3 7a00 	vldr	s15, [r3]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	331c      	adds	r3, #28
 8005f8a:	eef1 7a67 	vneg.f32	s15, s15
 8005f8e:	edc3 7a00 	vstr	s15, [r3]
	Out->pData[8]=RotMatT.pData[6];
 8005f92:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	3320      	adds	r3, #32
 8005f9a:	6992      	ldr	r2, [r2, #24]
 8005f9c:	601a      	str	r2, [r3, #0]
	Out->pData[9]=RotMatT.pData[7];
 8005f9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	3324      	adds	r3, #36	; 0x24
 8005fa6:	69d2      	ldr	r2, [r2, #28]
 8005fa8:	601a      	str	r2, [r3, #0]
	Out->pData[10]=RotMatT.pData[8];
 8005faa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	3328      	adds	r3, #40	; 0x28
 8005fb2:	6a12      	ldr	r2, [r2, #32]
 8005fb4:	601a      	str	r2, [r3, #0]
	Out->pData[11]=-OutPosition.pData[2];
 8005fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb8:	3308      	adds	r3, #8
 8005fba:	edd3 7a00 	vldr	s15, [r3]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	332c      	adds	r3, #44	; 0x2c
 8005fc4:	eef1 7a67 	vneg.f32	s15, s15
 8005fc8:	edc3 7a00 	vstr	s15, [r3]
	Out->pData[12]=0.0;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	3330      	adds	r3, #48	; 0x30
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
	Out->pData[13]=0.0;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	3334      	adds	r3, #52	; 0x34
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
	Out->pData[14]=0.0;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	3338      	adds	r3, #56	; 0x38
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
	Out->pData[15]=1.0;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	333c      	adds	r3, #60	; 0x3c
 8005ff6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005ffa:	601a      	str	r2, [r3, #0]

}
 8005ffc:	bf00      	nop
 8005ffe:	3788      	adds	r7, #136	; 0x88
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <TransformToolWrist>:
void TransformToolWrist(float VectorIn[3], float VectorOut[3])
{
 8006004:	b580      	push	{r7, lr}
 8006006:	ed2d 8b02 	vpush	{d8}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
	VectorOut[2]=VectorIn[2];
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6892      	ldr	r2, [r2, #8]
 800601a:	601a      	str	r2, [r3, #0]
	VectorOut[0]=VectorIn[0]*cosf(meas_angle.f[0])-VectorIn[1]*sinf(meas_angle.f[0]);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	ed93 8a00 	vldr	s16, [r3]
 8006022:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <TransformToolWrist+0xb0>)
 8006024:	edd3 7a00 	vldr	s15, [r3]
 8006028:	eeb0 0a67 	vmov.f32	s0, s15
 800602c:	f001 fd88 	bl	8007b40 <cosf>
 8006030:	eef0 7a40 	vmov.f32	s15, s0
 8006034:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3304      	adds	r3, #4
 800603c:	edd3 8a00 	vldr	s17, [r3]
 8006040:	4b1c      	ldr	r3, [pc, #112]	; (80060b4 <TransformToolWrist+0xb0>)
 8006042:	edd3 7a00 	vldr	s15, [r3]
 8006046:	eeb0 0a67 	vmov.f32	s0, s15
 800604a:	f001 fdbd 	bl	8007bc8 <sinf>
 800604e:	eef0 7a40 	vmov.f32	s15, s0
 8006052:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006056:	ee78 7a67 	vsub.f32	s15, s16, s15
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	edc3 7a00 	vstr	s15, [r3]
	VectorOut[1]=VectorIn[0]*sinf(meas_angle.f[0])+VectorIn[1]*cosf(meas_angle.f[0]);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	ed93 8a00 	vldr	s16, [r3]
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <TransformToolWrist+0xb0>)
 8006068:	edd3 7a00 	vldr	s15, [r3]
 800606c:	eeb0 0a67 	vmov.f32	s0, s15
 8006070:	f001 fdaa 	bl	8007bc8 <sinf>
 8006074:	eef0 7a40 	vmov.f32	s15, s0
 8006078:	ee28 8a27 	vmul.f32	s16, s16, s15
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3304      	adds	r3, #4
 8006080:	edd3 8a00 	vldr	s17, [r3]
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <TransformToolWrist+0xb0>)
 8006086:	edd3 7a00 	vldr	s15, [r3]
 800608a:	eeb0 0a67 	vmov.f32	s0, s15
 800608e:	f001 fd57 	bl	8007b40 <cosf>
 8006092:	eef0 7a40 	vmov.f32	s15, s0
 8006096:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	3304      	adds	r3, #4
 800609e:	ee78 7a27 	vadd.f32	s15, s16, s15
 80060a2:	edc3 7a00 	vstr	s15, [r3]
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	ecbd 8b02 	vpop	{d8}
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	2000010c 	.word	0x2000010c

080060b8 <ChooseSolution>:

int ChooseSolution(int last)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	int temp;
	float x;
	switch (DisconnectDoF)
 80060c0:	4b24      	ldr	r3, [pc, #144]	; (8006154 <ChooseSolution+0x9c>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d004      	beq.n	80060d2 <ChooseSolution+0x1a>
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d105      	bne.n	80060d8 <ChooseSolution+0x20>
	{
		case DOF456:
			temp=3;
 80060cc:	2303      	movs	r3, #3
 80060ce:	61fb      	str	r3, [r7, #28]
			break;
 80060d0:	e005      	b.n	80060de <ChooseSolution+0x26>
		case DOF6:
			temp=5;
 80060d2:	2305      	movs	r3, #5
 80060d4:	61fb      	str	r3, [r7, #28]
			break;
 80060d6:	e002      	b.n	80060de <ChooseSolution+0x26>
		default:
			temp=6;
 80060d8:	2306      	movs	r3, #6
 80060da:	61fb      	str	r3, [r7, #28]
			break;
 80060dc:	bf00      	nop
	}
	int index = 10;
 80060de:	230a      	movs	r3, #10
 80060e0:	61bb      	str	r3, [r7, #24]

	if(last<9 && SolutionsCorrect[last]==1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	dc09      	bgt.n	80060fc <ChooseSolution+0x44>
 80060e8:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <ChooseSolution+0xa0>)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4413      	add	r3, r2
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d103      	bne.n	80060fc <ChooseSolution+0x44>
	{
		index=last;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	61bb      	str	r3, [r7, #24]
		return index;
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	e027      	b.n	800614c <ChooseSolution+0x94>
	}
	float sum = INFINITY;
 80060fc:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8006100:	617b      	str	r3, [r7, #20]
	for (int i=0;i<8;i++)
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e01d      	b.n	8006144 <ChooseSolution+0x8c>
	{
		if(SolutionsCorrect[i]==1)
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <ChooseSolution+0xa0>)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4413      	add	r3, r2
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d114      	bne.n	800613e <ChooseSolution+0x86>
		{
			x = CalculateDistance(i,temp);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	69f9      	ldr	r1, [r7, #28]
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fbc2 	bl	80058a4 <CalculateDistance>
 8006120:	ed87 0a03 	vstr	s0, [r7, #12]
			if(x < sum)
 8006124:	ed97 7a03 	vldr	s14, [r7, #12]
 8006128:	edd7 7a05 	vldr	s15, [r7, #20]
 800612c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006134:	d503      	bpl.n	800613e <ChooseSolution+0x86>
			{
				index = i;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	61bb      	str	r3, [r7, #24]
				sum = x;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	617b      	str	r3, [r7, #20]
	for (int i=0;i<8;i++)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3301      	adds	r3, #1
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2b07      	cmp	r3, #7
 8006148:	ddde      	ble.n	8006108 <ChooseSolution+0x50>
			}
		}
	}
	return index;
 800614a:	69bb      	ldr	r3, [r7, #24]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200000d9 	.word	0x200000d9
 8006158:	200002d8 	.word	0x200002d8

0800615c <WriteSolution>:

void WriteSolution(int index)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	int temp;
	switch (DisconnectDoF)
 8006164:	4b17      	ldr	r3, [pc, #92]	; (80061c4 <WriteSolution+0x68>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d004      	beq.n	8006176 <WriteSolution+0x1a>
 800616c:	2b02      	cmp	r3, #2
 800616e:	d105      	bne.n	800617c <WriteSolution+0x20>
	{
		case DOF456:
			temp=3;
 8006170:	2303      	movs	r3, #3
 8006172:	60fb      	str	r3, [r7, #12]
			break;
 8006174:	e005      	b.n	8006182 <WriteSolution+0x26>
		case DOF6:
			temp=5;
 8006176:	2305      	movs	r3, #5
 8006178:	60fb      	str	r3, [r7, #12]
			break;
 800617a:	e002      	b.n	8006182 <WriteSolution+0x26>
		default:
			temp=6;
 800617c:	2306      	movs	r3, #6
 800617e:	60fb      	str	r3, [r7, #12]
			break;
 8006180:	bf00      	nop
	}
	for(int i=0;i<temp; i++)
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	e012      	b.n	80061ae <WriteSolution+0x52>
	{
		angle.f[i] = Solutions[index][i];
 8006188:	490f      	ldr	r1, [pc, #60]	; (80061c8 <WriteSolution+0x6c>)
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	4413      	add	r3, r2
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	490b      	ldr	r1, [pc, #44]	; (80061cc <WriteSolution+0x70>)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	601a      	str	r2, [r3, #0]
	for(int i=0;i<temp; i++)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	dbe8      	blt.n	8006188 <WriteSolution+0x2c>
	}
}
 80061b6:	bf00      	nop
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	200000d9 	.word	0x200000d9
 80061c8:	20000178 	.word	0x20000178
 80061cc:	200000dc 	.word	0x200000dc

080061d0 <trajectory_generator>:
float radius=200;
int part=0;
int counter=0;

void trajectory_generator(int num)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	yaw = 0;
 80061d8:	4bb7      	ldr	r3, [pc, #732]	; (80064b8 <trajectory_generator+0x2e8>)
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
	pitch = M_PI_2;
 80061e0:	4bb6      	ldr	r3, [pc, #728]	; (80064bc <trajectory_generator+0x2ec>)
 80061e2:	4ab7      	ldr	r2, [pc, #732]	; (80064c0 <trajectory_generator+0x2f0>)
 80061e4:	601a      	str	r2, [r3, #0]
	roll = 0;
 80061e6:	4bb7      	ldr	r3, [pc, #732]	; (80064c4 <trajectory_generator+0x2f4>)
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
	x = 500;
 80061ee:	4bb6      	ldr	r3, [pc, #728]	; (80064c8 <trajectory_generator+0x2f8>)
 80061f0:	4ab6      	ldr	r2, [pc, #728]	; (80064cc <trajectory_generator+0x2fc>)
 80061f2:	601a      	str	r2, [r3, #0]
	theta += vtheta;
 80061f4:	4bb6      	ldr	r3, [pc, #728]	; (80064d0 <trajectory_generator+0x300>)
 80061f6:	ed93 7a00 	vldr	s14, [r3]
 80061fa:	4bb6      	ldr	r3, [pc, #728]	; (80064d4 <trajectory_generator+0x304>)
 80061fc:	edd3 7a00 	vldr	s15, [r3]
 8006200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006204:	4bb2      	ldr	r3, [pc, #712]	; (80064d0 <trajectory_generator+0x300>)
 8006206:	edc3 7a00 	vstr	s15, [r3]
	pos += trajectory_speed;
 800620a:	4bb3      	ldr	r3, [pc, #716]	; (80064d8 <trajectory_generator+0x308>)
 800620c:	ed93 7a00 	vldr	s14, [r3]
 8006210:	4bb2      	ldr	r3, [pc, #712]	; (80064dc <trajectory_generator+0x30c>)
 8006212:	edd3 7a00 	vldr	s15, [r3]
 8006216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800621a:	4baf      	ldr	r3, [pc, #700]	; (80064d8 <trajectory_generator+0x308>)
 800621c:	edc3 7a00 	vstr	s15, [r3]
	float xd;
	if (theta >= 2 * M_PI)
 8006220:	4bab      	ldr	r3, [pc, #684]	; (80064d0 <trajectory_generator+0x300>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f7fa f953 	bl	80004d0 <__aeabi_f2d>
 800622a:	a39f      	add	r3, pc, #636	; (adr r3, 80064a8 <trajectory_generator+0x2d8>)
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	f7fa fc2c 	bl	8000a8c <__aeabi_dcmpge>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <trajectory_generator+0x72>
	{
		theta = 0;
 800623a:	4ba5      	ldr	r3, [pc, #660]	; (80064d0 <trajectory_generator+0x300>)
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
	}
	switch (num)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b03      	cmp	r3, #3
 8006246:	f200 8242 	bhi.w	80066ce <trajectory_generator+0x4fe>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <trajectory_generator+0x80>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006261 	.word	0x08006261
 8006254:	080062af 	.word	0x080062af
 8006258:	080063ff 	.word	0x080063ff
 800625c:	080065bb 	.word	0x080065bb
	{
	case 0:

		y = radius * cosf(theta);
 8006260:	4b9b      	ldr	r3, [pc, #620]	; (80064d0 <trajectory_generator+0x300>)
 8006262:	edd3 7a00 	vldr	s15, [r3]
 8006266:	eeb0 0a67 	vmov.f32	s0, s15
 800626a:	f001 fc69 	bl	8007b40 <cosf>
 800626e:	eeb0 7a40 	vmov.f32	s14, s0
 8006272:	4b9b      	ldr	r3, [pc, #620]	; (80064e0 <trajectory_generator+0x310>)
 8006274:	edd3 7a00 	vldr	s15, [r3]
 8006278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627c:	4b99      	ldr	r3, [pc, #612]	; (80064e4 <trajectory_generator+0x314>)
 800627e:	edc3 7a00 	vstr	s15, [r3]
		z = 500 + radius * sinf(theta);
 8006282:	4b93      	ldr	r3, [pc, #588]	; (80064d0 <trajectory_generator+0x300>)
 8006284:	edd3 7a00 	vldr	s15, [r3]
 8006288:	eeb0 0a67 	vmov.f32	s0, s15
 800628c:	f001 fc9c 	bl	8007bc8 <sinf>
 8006290:	eeb0 7a40 	vmov.f32	s14, s0
 8006294:	4b92      	ldr	r3, [pc, #584]	; (80064e0 <trajectory_generator+0x310>)
 8006296:	edd3 7a00 	vldr	s15, [r3]
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80064e8 <trajectory_generator+0x318>
 80062a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062a6:	4b91      	ldr	r3, [pc, #580]	; (80064ec <trajectory_generator+0x31c>)
 80062a8:	edc3 7a00 	vstr	s15, [r3]
		break;
 80062ac:	e20f      	b.n	80066ce <trajectory_generator+0x4fe>
	case 1:
		radius = 150;
 80062ae:	4b8c      	ldr	r3, [pc, #560]	; (80064e0 <trajectory_generator+0x310>)
 80062b0:	4a8f      	ldr	r2, [pc, #572]	; (80064f0 <trajectory_generator+0x320>)
 80062b2:	601a      	str	r2, [r3, #0]
		counter++;
 80062b4:	4b8f      	ldr	r3, [pc, #572]	; (80064f4 <trajectory_generator+0x324>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3301      	adds	r3, #1
 80062ba:	4a8e      	ldr	r2, [pc, #568]	; (80064f4 <trajectory_generator+0x324>)
 80062bc:	6013      	str	r3, [r2, #0]
		y = radius * sinf(theta);
 80062be:	4b84      	ldr	r3, [pc, #528]	; (80064d0 <trajectory_generator+0x300>)
 80062c0:	edd3 7a00 	vldr	s15, [r3]
 80062c4:	eeb0 0a67 	vmov.f32	s0, s15
 80062c8:	f001 fc7e 	bl	8007bc8 <sinf>
 80062cc:	eeb0 7a40 	vmov.f32	s14, s0
 80062d0:	4b83      	ldr	r3, [pc, #524]	; (80064e0 <trajectory_generator+0x310>)
 80062d2:	edd3 7a00 	vldr	s15, [r3]
 80062d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062da:	4b82      	ldr	r3, [pc, #520]	; (80064e4 <trajectory_generator+0x314>)
 80062dc:	edc3 7a00 	vstr	s15, [r3]
		switch (part)
 80062e0:	4b85      	ldr	r3, [pc, #532]	; (80064f8 <trajectory_generator+0x328>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <trajectory_generator+0x11e>
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d016      	beq.n	800631a <trajectory_generator+0x14a>
 80062ec:	e055      	b.n	800639a <trajectory_generator+0x1ca>
		{
		case 0:
			z = 400 + radius * cosf(theta);
 80062ee:	4b78      	ldr	r3, [pc, #480]	; (80064d0 <trajectory_generator+0x300>)
 80062f0:	edd3 7a00 	vldr	s15, [r3]
 80062f4:	eeb0 0a67 	vmov.f32	s0, s15
 80062f8:	f001 fc22 	bl	8007b40 <cosf>
 80062fc:	eeb0 7a40 	vmov.f32	s14, s0
 8006300:	4b77      	ldr	r3, [pc, #476]	; (80064e0 <trajectory_generator+0x310>)
 8006302:	edd3 7a00 	vldr	s15, [r3]
 8006306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80064fc <trajectory_generator+0x32c>
 800630e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006312:	4b76      	ldr	r3, [pc, #472]	; (80064ec <trajectory_generator+0x31c>)
 8006314:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006318:	e03f      	b.n	800639a <trajectory_generator+0x1ca>
		case 1:
			xd = theta + M_PI;
 800631a:	4b6d      	ldr	r3, [pc, #436]	; (80064d0 <trajectory_generator+0x300>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fa f8d6 	bl	80004d0 <__aeabi_f2d>
 8006324:	a362      	add	r3, pc, #392	; (adr r3, 80064b0 <trajectory_generator+0x2e0>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f7f9 ff73 	bl	8000214 <__adddf3>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	f7fa fbd3 	bl	8000ae0 <__aeabi_d2f>
 800633a:	4603      	mov	r3, r0
 800633c:	60fb      	str	r3, [r7, #12]
			if (xd > M_PI)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7fa f8c6 	bl	80004d0 <__aeabi_f2d>
 8006344:	a35a      	add	r3, pc, #360	; (adr r3, 80064b0 <trajectory_generator+0x2e0>)
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f7fa fba9 	bl	8000aa0 <__aeabi_dcmpgt>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00f      	beq.n	8006374 <trajectory_generator+0x1a4>
				xd += (-(2 * M_PI));
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7fa f8bb 	bl	80004d0 <__aeabi_f2d>
 800635a:	a353      	add	r3, pc, #332	; (adr r3, 80064a8 <trajectory_generator+0x2d8>)
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	f7f9 ff56 	bl	8000210 <__aeabi_dsub>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4610      	mov	r0, r2
 800636a:	4619      	mov	r1, r3
 800636c:	f7fa fbb8 	bl	8000ae0 <__aeabi_d2f>
 8006370:	4603      	mov	r3, r0
 8006372:	60fb      	str	r3, [r7, #12]
			z = 700 + radius * cosf(xd);
 8006374:	ed97 0a03 	vldr	s0, [r7, #12]
 8006378:	f001 fbe2 	bl	8007b40 <cosf>
 800637c:	eeb0 7a40 	vmov.f32	s14, s0
 8006380:	4b57      	ldr	r3, [pc, #348]	; (80064e0 <trajectory_generator+0x310>)
 8006382:	edd3 7a00 	vldr	s15, [r3]
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8006500 <trajectory_generator+0x330>
 800638e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006392:	4b56      	ldr	r3, [pc, #344]	; (80064ec <trajectory_generator+0x31c>)
 8006394:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006398:	bf00      	nop
		}
		if (z >= 545 && z <= 555 && counter >= 200)
 800639a:	4b54      	ldr	r3, [pc, #336]	; (80064ec <trajectory_generator+0x31c>)
 800639c:	edd3 7a00 	vldr	s15, [r3]
 80063a0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006504 <trajectory_generator+0x334>
 80063a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ac:	da00      	bge.n	80063b0 <trajectory_generator+0x1e0>
			{
				part = 0;
			}
			counter = 0;
		}
		break;
 80063ae:	e189      	b.n	80066c4 <trajectory_generator+0x4f4>
		if (z >= 545 && z <= 555 && counter >= 200)
 80063b0:	4b4e      	ldr	r3, [pc, #312]	; (80064ec <trajectory_generator+0x31c>)
 80063b2:	edd3 7a00 	vldr	s15, [r3]
 80063b6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8006508 <trajectory_generator+0x338>
 80063ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c2:	d900      	bls.n	80063c6 <trajectory_generator+0x1f6>
		break;
 80063c4:	e17e      	b.n	80066c4 <trajectory_generator+0x4f4>
		if (z >= 545 && z <= 555 && counter >= 200)
 80063c6:	4b4b      	ldr	r3, [pc, #300]	; (80064f4 <trajectory_generator+0x324>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2bc7      	cmp	r3, #199	; 0xc7
 80063cc:	f340 817a 	ble.w	80066c4 <trajectory_generator+0x4f4>
			if (part == 0)
 80063d0:	4b49      	ldr	r3, [pc, #292]	; (80064f8 <trajectory_generator+0x328>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d103      	bne.n	80063e0 <trajectory_generator+0x210>
				part = 1;
 80063d8:	4b47      	ldr	r3, [pc, #284]	; (80064f8 <trajectory_generator+0x328>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e00a      	b.n	80063f6 <trajectory_generator+0x226>
			else if (part == 1)
 80063e0:	4b45      	ldr	r3, [pc, #276]	; (80064f8 <trajectory_generator+0x328>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d103      	bne.n	80063f0 <trajectory_generator+0x220>
				part = 0;
 80063e8:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <trajectory_generator+0x328>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <trajectory_generator+0x226>
				part = 0;
 80063f0:	4b41      	ldr	r3, [pc, #260]	; (80064f8 <trajectory_generator+0x328>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
			counter = 0;
 80063f6:	4b3f      	ldr	r3, [pc, #252]	; (80064f4 <trajectory_generator+0x324>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
		break;
 80063fc:	e162      	b.n	80066c4 <trajectory_generator+0x4f4>
	case 2:
		switch (part)
 80063fe:	4b3e      	ldr	r3, [pc, #248]	; (80064f8 <trajectory_generator+0x328>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b03      	cmp	r3, #3
 8006404:	f200 80d0 	bhi.w	80065a8 <trajectory_generator+0x3d8>
 8006408:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <trajectory_generator+0x240>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	08006421 	.word	0x08006421
 8006414:	08006465 	.word	0x08006465
 8006418:	08006521 	.word	0x08006521
 800641c:	08006565 	.word	0x08006565
		{
		case 0:
			y = -250 + pos;
 8006420:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <trajectory_generator+0x308>)
 8006422:	edd3 7a00 	vldr	s15, [r3]
 8006426:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800650c <trajectory_generator+0x33c>
 800642a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800642e:	4b2d      	ldr	r3, [pc, #180]	; (80064e4 <trajectory_generator+0x314>)
 8006430:	edc3 7a00 	vstr	s15, [r3]
			z = 800;
 8006434:	4b2d      	ldr	r3, [pc, #180]	; (80064ec <trajectory_generator+0x31c>)
 8006436:	4a36      	ldr	r2, [pc, #216]	; (8006510 <trajectory_generator+0x340>)
 8006438:	601a      	str	r2, [r3, #0]
			if (y >= 250)
 800643a:	4b2a      	ldr	r3, [pc, #168]	; (80064e4 <trajectory_generator+0x314>)
 800643c:	edd3 7a00 	vldr	s15, [r3]
 8006440:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800650c <trajectory_generator+0x33c>
 8006444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800644c:	da00      	bge.n	8006450 <trajectory_generator+0x280>
			{
				pos = 0;
				part++;
			}
			break;
 800644e:	e0ab      	b.n	80065a8 <trajectory_generator+0x3d8>
				pos = 0;
 8006450:	4b21      	ldr	r3, [pc, #132]	; (80064d8 <trajectory_generator+0x308>)
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
				part++;
 8006458:	4b27      	ldr	r3, [pc, #156]	; (80064f8 <trajectory_generator+0x328>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3301      	adds	r3, #1
 800645e:	4a26      	ldr	r2, [pc, #152]	; (80064f8 <trajectory_generator+0x328>)
 8006460:	6013      	str	r3, [r2, #0]
			break;
 8006462:	e0a1      	b.n	80065a8 <trajectory_generator+0x3d8>
		case 1:
			y = 250;
 8006464:	4b1f      	ldr	r3, [pc, #124]	; (80064e4 <trajectory_generator+0x314>)
 8006466:	4a2b      	ldr	r2, [pc, #172]	; (8006514 <trajectory_generator+0x344>)
 8006468:	601a      	str	r2, [r3, #0]
			z = 800 - pos;
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <trajectory_generator+0x308>)
 800646c:	edd3 7a00 	vldr	s15, [r3]
 8006470:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006518 <trajectory_generator+0x348>
 8006474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006478:	4b1c      	ldr	r3, [pc, #112]	; (80064ec <trajectory_generator+0x31c>)
 800647a:	edc3 7a00 	vstr	s15, [r3]
			if (z<=300)
 800647e:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <trajectory_generator+0x31c>)
 8006480:	edd3 7a00 	vldr	s15, [r3]
 8006484:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800651c <trajectory_generator+0x34c>
 8006488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800648c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006490:	d900      	bls.n	8006494 <trajectory_generator+0x2c4>
			{
				pos = 0;
				part++;
			}
			break;
 8006492:	e089      	b.n	80065a8 <trajectory_generator+0x3d8>
				pos = 0;
 8006494:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <trajectory_generator+0x308>)
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
				part++;
 800649c:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <trajectory_generator+0x328>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	4a15      	ldr	r2, [pc, #84]	; (80064f8 <trajectory_generator+0x328>)
 80064a4:	6013      	str	r3, [r2, #0]
			break;
 80064a6:	e07f      	b.n	80065a8 <trajectory_generator+0x3d8>
 80064a8:	54442d18 	.word	0x54442d18
 80064ac:	401921fb 	.word	0x401921fb
 80064b0:	54442d18 	.word	0x54442d18
 80064b4:	400921fb 	.word	0x400921fb
 80064b8:	200002fc 	.word	0x200002fc
 80064bc:	200002f8 	.word	0x200002f8
 80064c0:	3fc90fdb 	.word	0x3fc90fdb
 80064c4:	200002f4 	.word	0x200002f4
 80064c8:	200002e8 	.word	0x200002e8
 80064cc:	43fa0000 	.word	0x43fa0000
 80064d0:	20000304 	.word	0x20000304
 80064d4:	2000000c 	.word	0x2000000c
 80064d8:	20000300 	.word	0x20000300
 80064dc:	20000008 	.word	0x20000008
 80064e0:	20000010 	.word	0x20000010
 80064e4:	200002ec 	.word	0x200002ec
 80064e8:	43fa0000 	.word	0x43fa0000
 80064ec:	200002f0 	.word	0x200002f0
 80064f0:	43160000 	.word	0x43160000
 80064f4:	2000030c 	.word	0x2000030c
 80064f8:	20000308 	.word	0x20000308
 80064fc:	43c80000 	.word	0x43c80000
 8006500:	442f0000 	.word	0x442f0000
 8006504:	44084000 	.word	0x44084000
 8006508:	440ac000 	.word	0x440ac000
 800650c:	437a0000 	.word	0x437a0000
 8006510:	44480000 	.word	0x44480000
 8006514:	437a0000 	.word	0x437a0000
 8006518:	44480000 	.word	0x44480000
 800651c:	43960000 	.word	0x43960000
		case 2:
			y = 250 - pos;
 8006520:	4b79      	ldr	r3, [pc, #484]	; (8006708 <trajectory_generator+0x538>)
 8006522:	edd3 7a00 	vldr	s15, [r3]
 8006526:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800670c <trajectory_generator+0x53c>
 800652a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800652e:	4b78      	ldr	r3, [pc, #480]	; (8006710 <trajectory_generator+0x540>)
 8006530:	edc3 7a00 	vstr	s15, [r3]
			z = 300;
 8006534:	4b77      	ldr	r3, [pc, #476]	; (8006714 <trajectory_generator+0x544>)
 8006536:	4a78      	ldr	r2, [pc, #480]	; (8006718 <trajectory_generator+0x548>)
 8006538:	601a      	str	r2, [r3, #0]
			if (y <= -250)
 800653a:	4b75      	ldr	r3, [pc, #468]	; (8006710 <trajectory_generator+0x540>)
 800653c:	edd3 7a00 	vldr	s15, [r3]
 8006540:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800671c <trajectory_generator+0x54c>
 8006544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654c:	d900      	bls.n	8006550 <trajectory_generator+0x380>
			{
				pos = 0;
				part++;
			}
			break;
 800654e:	e02b      	b.n	80065a8 <trajectory_generator+0x3d8>
				pos = 0;
 8006550:	4b6d      	ldr	r3, [pc, #436]	; (8006708 <trajectory_generator+0x538>)
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
				part++;
 8006558:	4b71      	ldr	r3, [pc, #452]	; (8006720 <trajectory_generator+0x550>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3301      	adds	r3, #1
 800655e:	4a70      	ldr	r2, [pc, #448]	; (8006720 <trajectory_generator+0x550>)
 8006560:	6013      	str	r3, [r2, #0]
			break;
 8006562:	e021      	b.n	80065a8 <trajectory_generator+0x3d8>
		case 3:
			y = -250;
 8006564:	4b6a      	ldr	r3, [pc, #424]	; (8006710 <trajectory_generator+0x540>)
 8006566:	4a6f      	ldr	r2, [pc, #444]	; (8006724 <trajectory_generator+0x554>)
 8006568:	601a      	str	r2, [r3, #0]
			z = 300 + pos;
 800656a:	4b67      	ldr	r3, [pc, #412]	; (8006708 <trajectory_generator+0x538>)
 800656c:	edd3 7a00 	vldr	s15, [r3]
 8006570:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8006728 <trajectory_generator+0x558>
 8006574:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006578:	4b66      	ldr	r3, [pc, #408]	; (8006714 <trajectory_generator+0x544>)
 800657a:	edc3 7a00 	vstr	s15, [r3]
			if (z >= 800)
 800657e:	4b65      	ldr	r3, [pc, #404]	; (8006714 <trajectory_generator+0x544>)
 8006580:	edd3 7a00 	vldr	s15, [r3]
 8006584:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800672c <trajectory_generator+0x55c>
 8006588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800658c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006590:	da00      	bge.n	8006594 <trajectory_generator+0x3c4>
			{
				pos = 0;
				part++;
			}
			break;
 8006592:	e008      	b.n	80065a6 <trajectory_generator+0x3d6>
				pos = 0;
 8006594:	4b5c      	ldr	r3, [pc, #368]	; (8006708 <trajectory_generator+0x538>)
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
				part++;
 800659c:	4b60      	ldr	r3, [pc, #384]	; (8006720 <trajectory_generator+0x550>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	4a5f      	ldr	r2, [pc, #380]	; (8006720 <trajectory_generator+0x550>)
 80065a4:	6013      	str	r3, [r2, #0]
			break;
 80065a6:	bf00      	nop
		}
		if (part == 4)
 80065a8:	4b5d      	ldr	r3, [pc, #372]	; (8006720 <trajectory_generator+0x550>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	f040 808b 	bne.w	80066c8 <trajectory_generator+0x4f8>
		{
			part = 0;
 80065b2:	4b5b      	ldr	r3, [pc, #364]	; (8006720 <trajectory_generator+0x550>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80065b8:	e086      	b.n	80066c8 <trajectory_generator+0x4f8>
		case 3:
			switch(part)
 80065ba:	4b59      	ldr	r3, [pc, #356]	; (8006720 <trajectory_generator+0x550>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d056      	beq.n	8006670 <trajectory_generator+0x4a0>
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	dc76      	bgt.n	80066b4 <trajectory_generator+0x4e4>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <trajectory_generator+0x400>
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d027      	beq.n	800661e <trajectory_generator+0x44e>
 80065ce:	e071      	b.n	80066b4 <trajectory_generator+0x4e4>
			{
			case 0:
				y = -300 + pos;
 80065d0:	4b4d      	ldr	r3, [pc, #308]	; (8006708 <trajectory_generator+0x538>)
 80065d2:	edd3 7a00 	vldr	s15, [r3]
 80065d6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8006728 <trajectory_generator+0x558>
 80065da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065de:	4b4c      	ldr	r3, [pc, #304]	; (8006710 <trajectory_generator+0x540>)
 80065e0:	edc3 7a00 	vstr	s15, [r3]
				z = 600 - pos;
 80065e4:	4b48      	ldr	r3, [pc, #288]	; (8006708 <trajectory_generator+0x538>)
 80065e6:	edd3 7a00 	vldr	s15, [r3]
 80065ea:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8006730 <trajectory_generator+0x560>
 80065ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065f2:	4b48      	ldr	r3, [pc, #288]	; (8006714 <trajectory_generator+0x544>)
 80065f4:	edc3 7a00 	vstr	s15, [r3]
				if (y >= 0)
 80065f8:	4b45      	ldr	r3, [pc, #276]	; (8006710 <trajectory_generator+0x540>)
 80065fa:	edd3 7a00 	vldr	s15, [r3]
 80065fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006606:	da00      	bge.n	800660a <trajectory_generator+0x43a>
				{
					pos = 0;
					part++;
				}
				break;
 8006608:	e054      	b.n	80066b4 <trajectory_generator+0x4e4>
					pos = 0;
 800660a:	4b3f      	ldr	r3, [pc, #252]	; (8006708 <trajectory_generator+0x538>)
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
					part++;
 8006612:	4b43      	ldr	r3, [pc, #268]	; (8006720 <trajectory_generator+0x550>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3301      	adds	r3, #1
 8006618:	4a41      	ldr	r2, [pc, #260]	; (8006720 <trajectory_generator+0x550>)
 800661a:	6013      	str	r3, [r2, #0]
				break;
 800661c:	e04a      	b.n	80066b4 <trajectory_generator+0x4e4>
			case 1:
				y = 0 + pos;
 800661e:	4b3a      	ldr	r3, [pc, #232]	; (8006708 <trajectory_generator+0x538>)
 8006620:	edd3 7a00 	vldr	s15, [r3]
 8006624:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8006734 <trajectory_generator+0x564>
 8006628:	ee77 7a87 	vadd.f32	s15, s15, s14
 800662c:	4b38      	ldr	r3, [pc, #224]	; (8006710 <trajectory_generator+0x540>)
 800662e:	edc3 7a00 	vstr	s15, [r3]
				z = 300 + pos;
 8006632:	4b35      	ldr	r3, [pc, #212]	; (8006708 <trajectory_generator+0x538>)
 8006634:	edd3 7a00 	vldr	s15, [r3]
 8006638:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006728 <trajectory_generator+0x558>
 800663c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006640:	4b34      	ldr	r3, [pc, #208]	; (8006714 <trajectory_generator+0x544>)
 8006642:	edc3 7a00 	vstr	s15, [r3]
				if (z >= 600)
 8006646:	4b33      	ldr	r3, [pc, #204]	; (8006714 <trajectory_generator+0x544>)
 8006648:	edd3 7a00 	vldr	s15, [r3]
 800664c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006730 <trajectory_generator+0x560>
 8006650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006658:	da00      	bge.n	800665c <trajectory_generator+0x48c>
				{
					pos = 0;
					part++;
				}
				break;
 800665a:	e02b      	b.n	80066b4 <trajectory_generator+0x4e4>
					pos = 0;
 800665c:	4b2a      	ldr	r3, [pc, #168]	; (8006708 <trajectory_generator+0x538>)
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
					part++;
 8006664:	4b2e      	ldr	r3, [pc, #184]	; (8006720 <trajectory_generator+0x550>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3301      	adds	r3, #1
 800666a:	4a2d      	ldr	r2, [pc, #180]	; (8006720 <trajectory_generator+0x550>)
 800666c:	6013      	str	r3, [r2, #0]
				break;
 800666e:	e021      	b.n	80066b4 <trajectory_generator+0x4e4>
			case 2:
				y = 250 - pos;
 8006670:	4b25      	ldr	r3, [pc, #148]	; (8006708 <trajectory_generator+0x538>)
 8006672:	edd3 7a00 	vldr	s15, [r3]
 8006676:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800670c <trajectory_generator+0x53c>
 800667a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800667e:	4b24      	ldr	r3, [pc, #144]	; (8006710 <trajectory_generator+0x540>)
 8006680:	edc3 7a00 	vstr	s15, [r3]
				z = 600;
 8006684:	4b23      	ldr	r3, [pc, #140]	; (8006714 <trajectory_generator+0x544>)
 8006686:	4a2c      	ldr	r2, [pc, #176]	; (8006738 <trajectory_generator+0x568>)
 8006688:	601a      	str	r2, [r3, #0]
				if (y <= -300)
 800668a:	4b21      	ldr	r3, [pc, #132]	; (8006710 <trajectory_generator+0x540>)
 800668c:	edd3 7a00 	vldr	s15, [r3]
 8006690:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800673c <trajectory_generator+0x56c>
 8006694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669c:	d900      	bls.n	80066a0 <trajectory_generator+0x4d0>
				{
					pos = 0;
					part++;
				}
				break;
 800669e:	e008      	b.n	80066b2 <trajectory_generator+0x4e2>
					pos = 0;
 80066a0:	4b19      	ldr	r3, [pc, #100]	; (8006708 <trajectory_generator+0x538>)
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
					part++;
 80066a8:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <trajectory_generator+0x550>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3301      	adds	r3, #1
 80066ae:	4a1c      	ldr	r2, [pc, #112]	; (8006720 <trajectory_generator+0x550>)
 80066b0:	6013      	str	r3, [r2, #0]
				break;
 80066b2:	bf00      	nop
			}
			if(part>2)
 80066b4:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <trajectory_generator+0x550>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	dd07      	ble.n	80066cc <trajectory_generator+0x4fc>
			{
				part = 0;
 80066bc:	4b18      	ldr	r3, [pc, #96]	; (8006720 <trajectory_generator+0x550>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
			}
			break;
 80066c2:	e003      	b.n	80066cc <trajectory_generator+0x4fc>
		break;
 80066c4:	bf00      	nop
 80066c6:	e002      	b.n	80066ce <trajectory_generator+0x4fe>
		break;
 80066c8:	bf00      	nop
 80066ca:	e000      	b.n	80066ce <trajectory_generator+0x4fe>
			break;
 80066cc:	bf00      	nop
	}

	kinematics_in.f[0] = x;
 80066ce:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <trajectory_generator+0x570>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <trajectory_generator+0x574>)
 80066d4:	6013      	str	r3, [r2, #0]
	kinematics_in.f[1] = y;
 80066d6:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <trajectory_generator+0x540>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <trajectory_generator+0x574>)
 80066dc:	6053      	str	r3, [r2, #4]
	kinematics_in.f[2] = z;
 80066de:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <trajectory_generator+0x544>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a18      	ldr	r2, [pc, #96]	; (8006744 <trajectory_generator+0x574>)
 80066e4:	6093      	str	r3, [r2, #8]
	kinematics_in.f[3] = yaw;
 80066e6:	4b18      	ldr	r3, [pc, #96]	; (8006748 <trajectory_generator+0x578>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a16      	ldr	r2, [pc, #88]	; (8006744 <trajectory_generator+0x574>)
 80066ec:	60d3      	str	r3, [r2, #12]
	kinematics_in.f[4] = pitch;
 80066ee:	4b17      	ldr	r3, [pc, #92]	; (800674c <trajectory_generator+0x57c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a14      	ldr	r2, [pc, #80]	; (8006744 <trajectory_generator+0x574>)
 80066f4:	6113      	str	r3, [r2, #16]
	kinematics_in.f[5] = roll;
 80066f6:	4b16      	ldr	r3, [pc, #88]	; (8006750 <trajectory_generator+0x580>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a12      	ldr	r2, [pc, #72]	; (8006744 <trajectory_generator+0x574>)
 80066fc:	6153      	str	r3, [r2, #20]

}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000300 	.word	0x20000300
 800670c:	437a0000 	.word	0x437a0000
 8006710:	200002ec 	.word	0x200002ec
 8006714:	200002f0 	.word	0x200002f0
 8006718:	43960000 	.word	0x43960000
 800671c:	c37a0000 	.word	0xc37a0000
 8006720:	20000308 	.word	0x20000308
 8006724:	c37a0000 	.word	0xc37a0000
 8006728:	43960000 	.word	0x43960000
 800672c:	44480000 	.word	0x44480000
 8006730:	44160000 	.word	0x44160000
 8006734:	00000000 	.word	0x00000000
 8006738:	44160000 	.word	0x44160000
 800673c:	c3960000 	.word	0xc3960000
 8006740:	200002e8 	.word	0x200002e8
 8006744:	2000013c 	.word	0x2000013c
 8006748:	200002fc 	.word	0x200002fc
 800674c:	200002f8 	.word	0x200002f8
 8006750:	200002f4 	.word	0x200002f4

08006754 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_HandleTypeDef hcan2;

extern float vx, vy, vz;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	if (hcan->Instance == CAN2)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a0d      	ldr	r2, [pc, #52]	; (8006798 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d107      	bne.n	8006776 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader2, RxData2);
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8006768:	4a0d      	ldr	r2, [pc, #52]	; (80067a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800676a:	2100      	movs	r1, #0
 800676c:	480d      	ldr	r0, [pc, #52]	; (80067a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800676e:	f7fa ff1b 	bl	80015a8 <HAL_CAN_GetRxMessage>
		COM_RunCanAction2();
 8006772:	f000 f979 	bl	8006a68 <COM_RunCanAction2>
	}
	if (hcan->Instance == CAN1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a0b      	ldr	r2, [pc, #44]	; (80067a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d107      	bne.n	8006790 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader1, RxData1);
 8006780:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8006782:	4a0b      	ldr	r2, [pc, #44]	; (80067b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006784:	2100      	movs	r1, #0
 8006786:	480b      	ldr	r0, [pc, #44]	; (80067b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8006788:	f7fa ff0e 	bl	80015a8 <HAL_CAN_GetRxMessage>
		COM_RunCanAction1();
 800678c:	f000 f828 	bl	80067e0 <COM_RunCanAction1>
	}
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	40006800 	.word	0x40006800
 800679c:	20000350 	.word	0x20000350
 80067a0:	20000334 	.word	0x20000334
 80067a4:	200003c0 	.word	0x200003c0
 80067a8:	40006400 	.word	0x40006400
 80067ac:	20000390 	.word	0x20000390
 80067b0:	20000374 	.word	0x20000374
 80067b4:	20000398 	.word	0x20000398

080067b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2);
 80067c0:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 80067c2:	4a05      	ldr	r2, [pc, #20]	; (80067d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 80067c4:	2101      	movs	r1, #1
 80067c6:	4805      	ldr	r0, [pc, #20]	; (80067dc <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80067c8:	f7fa feee 	bl	80015a8 <HAL_CAN_GetRxMessage>

}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000350 	.word	0x20000350
 80067d8:	20000334 	.word	0x20000334
 80067dc:	200003c0 	.word	0x200003c0

080067e0 <COM_RunCanAction1>:

void COM_RunCanAction1()
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
	if (RxHeader1.StdId == 128)
 80067e6:	4b94      	ldr	r3, [pc, #592]	; (8006a38 <COM_RunCanAction1+0x258>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b80      	cmp	r3, #128	; 0x80
 80067ec:	f040 80bb 	bne.w	8006966 <COM_RunCanAction1+0x186>
	{
		if (RxData1[0] == 1 && RxData1[1] == 1 && RxData1[2] == RxData1[3]
 80067f0:	4b92      	ldr	r3, [pc, #584]	; (8006a3c <COM_RunCanAction1+0x25c>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	f040 80af 	bne.w	8006958 <COM_RunCanAction1+0x178>
 80067fa:	4b90      	ldr	r3, [pc, #576]	; (8006a3c <COM_RunCanAction1+0x25c>)
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	f040 80aa 	bne.w	8006958 <COM_RunCanAction1+0x178>
 8006804:	4b8d      	ldr	r3, [pc, #564]	; (8006a3c <COM_RunCanAction1+0x25c>)
 8006806:	789a      	ldrb	r2, [r3, #2]
 8006808:	4b8c      	ldr	r3, [pc, #560]	; (8006a3c <COM_RunCanAction1+0x25c>)
 800680a:	78db      	ldrb	r3, [r3, #3]
 800680c:	429a      	cmp	r2, r3
 800680e:	f040 80a3 	bne.w	8006958 <COM_RunCanAction1+0x178>
				&& RxData1[4] == RxData1[5])
 8006812:	4b8a      	ldr	r3, [pc, #552]	; (8006a3c <COM_RunCanAction1+0x25c>)
 8006814:	791a      	ldrb	r2, [r3, #4]
 8006816:	4b89      	ldr	r3, [pc, #548]	; (8006a3c <COM_RunCanAction1+0x25c>)
 8006818:	795b      	ldrb	r3, [r3, #5]
 800681a:	429a      	cmp	r2, r3
 800681c:	f040 809c 	bne.w	8006958 <COM_RunCanAction1+0x178>
		{
			switch (RxData1[3])
 8006820:	4b86      	ldr	r3, [pc, #536]	; (8006a3c <COM_RunCanAction1+0x25c>)
 8006822:	78db      	ldrb	r3, [r3, #3]
 8006824:	2b08      	cmp	r3, #8
 8006826:	f200 8089 	bhi.w	800693c <COM_RunCanAction1+0x15c>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <COM_RunCanAction1+0x50>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006855 	.word	0x08006855
 8006834:	0800686b 	.word	0x0800686b
 8006838:	08006881 	.word	0x08006881
 800683c:	08006897 	.word	0x08006897
 8006840:	080068ad 	.word	0x080068ad
 8006844:	080068c3 	.word	0x080068c3
 8006848:	080068d9 	.word	0x080068d9
 800684c:	080068ef 	.word	0x080068ef
 8006850:	08006905 	.word	0x08006905
			{
			case DISABLED:
				if (ManipulatorMode != DISABLED)
 8006854:	4b7a      	ldr	r3, [pc, #488]	; (8006a40 <COM_RunCanAction1+0x260>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d05e      	beq.n	800691a <COM_RunCanAction1+0x13a>
				{
					ManipulatorMode = DISABLED;
 800685c:	4b78      	ldr	r3, [pc, #480]	; (8006a40 <COM_RunCanAction1+0x260>)
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
					newmode = 1;
 8006862:	4b78      	ldr	r3, [pc, #480]	; (8006a44 <COM_RunCanAction1+0x264>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
				}
				break;
 8006868:	e057      	b.n	800691a <COM_RunCanAction1+0x13a>
			case HOLD:
				if (ManipulatorMode != HOLD)
 800686a:	4b75      	ldr	r3, [pc, #468]	; (8006a40 <COM_RunCanAction1+0x260>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d055      	beq.n	800691e <COM_RunCanAction1+0x13e>
				{
					ManipulatorMode = HOLD;
 8006872:	4b73      	ldr	r3, [pc, #460]	; (8006a40 <COM_RunCanAction1+0x260>)
 8006874:	2201      	movs	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]
					newmode = 1;
 8006878:	4b72      	ldr	r3, [pc, #456]	; (8006a44 <COM_RunCanAction1+0x264>)
 800687a:	2201      	movs	r2, #1
 800687c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800687e:	e04e      	b.n	800691e <COM_RunCanAction1+0x13e>
			case ANGLES:
				if (ManipulatorMode != ANGLES)
 8006880:	4b6f      	ldr	r3, [pc, #444]	; (8006a40 <COM_RunCanAction1+0x260>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d04c      	beq.n	8006922 <COM_RunCanAction1+0x142>
				{
					ManipulatorMode = ANGLES;
 8006888:	4b6d      	ldr	r3, [pc, #436]	; (8006a40 <COM_RunCanAction1+0x260>)
 800688a:	2202      	movs	r2, #2
 800688c:	701a      	strb	r2, [r3, #0]
					newmode = 1;
 800688e:	4b6d      	ldr	r3, [pc, #436]	; (8006a44 <COM_RunCanAction1+0x264>)
 8006890:	2201      	movs	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
				}
				break;
 8006894:	e045      	b.n	8006922 <COM_RunCanAction1+0x142>
			case VELOCITY:
				if (ManipulatorMode != VELOCITY)
 8006896:	4b6a      	ldr	r3, [pc, #424]	; (8006a40 <COM_RunCanAction1+0x260>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b03      	cmp	r3, #3
 800689c:	d043      	beq.n	8006926 <COM_RunCanAction1+0x146>
				{
					ManipulatorMode = VELOCITY;
 800689e:	4b68      	ldr	r3, [pc, #416]	; (8006a40 <COM_RunCanAction1+0x260>)
 80068a0:	2203      	movs	r2, #3
 80068a2:	701a      	strb	r2, [r3, #0]
					newmode = 1;
 80068a4:	4b67      	ldr	r3, [pc, #412]	; (8006a44 <COM_RunCanAction1+0x264>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]
				}
				break;
 80068aa:	e03c      	b.n	8006926 <COM_RunCanAction1+0x146>
			case XYZ_GLOBAL:
				if (ManipulatorMode != XYZ_GLOBAL)
 80068ac:	4b64      	ldr	r3, [pc, #400]	; (8006a40 <COM_RunCanAction1+0x260>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d03a      	beq.n	800692a <COM_RunCanAction1+0x14a>
				{
					ManipulatorMode = XYZ_GLOBAL;
 80068b4:	4b62      	ldr	r3, [pc, #392]	; (8006a40 <COM_RunCanAction1+0x260>)
 80068b6:	2204      	movs	r2, #4
 80068b8:	701a      	strb	r2, [r3, #0]
					newmode = 1;
 80068ba:	4b62      	ldr	r3, [pc, #392]	; (8006a44 <COM_RunCanAction1+0x264>)
 80068bc:	2201      	movs	r2, #1
 80068be:	701a      	strb	r2, [r3, #0]
				}
				break;
 80068c0:	e033      	b.n	800692a <COM_RunCanAction1+0x14a>
			case VEL_GLOB:
				if (ManipulatorMode != VEL_GLOB)
 80068c2:	4b5f      	ldr	r3, [pc, #380]	; (8006a40 <COM_RunCanAction1+0x260>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b05      	cmp	r3, #5
 80068c8:	d031      	beq.n	800692e <COM_RunCanAction1+0x14e>
				{
					ManipulatorMode = VEL_GLOB;
 80068ca:	4b5d      	ldr	r3, [pc, #372]	; (8006a40 <COM_RunCanAction1+0x260>)
 80068cc:	2205      	movs	r2, #5
 80068ce:	701a      	strb	r2, [r3, #0]
					newmode = 1;
 80068d0:	4b5c      	ldr	r3, [pc, #368]	; (8006a44 <COM_RunCanAction1+0x264>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80068d6:	e02a      	b.n	800692e <COM_RunCanAction1+0x14e>
			case VEL_TOOL:
				if (ManipulatorMode != VEL_TOOL)
 80068d8:	4b59      	ldr	r3, [pc, #356]	; (8006a40 <COM_RunCanAction1+0x260>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b06      	cmp	r3, #6
 80068de:	d028      	beq.n	8006932 <COM_RunCanAction1+0x152>
				{
					ManipulatorMode = VEL_TOOL;
 80068e0:	4b57      	ldr	r3, [pc, #348]	; (8006a40 <COM_RunCanAction1+0x260>)
 80068e2:	2206      	movs	r2, #6
 80068e4:	701a      	strb	r2, [r3, #0]
					newmode = 1;
 80068e6:	4b57      	ldr	r3, [pc, #348]	; (8006a44 <COM_RunCanAction1+0x264>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
				}
				break;
 80068ec:	e021      	b.n	8006932 <COM_RunCanAction1+0x152>
			case DELTA_TOOL:
				if (ManipulatorMode != DELTA_TOOL)
 80068ee:	4b54      	ldr	r3, [pc, #336]	; (8006a40 <COM_RunCanAction1+0x260>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b07      	cmp	r3, #7
 80068f4:	d01f      	beq.n	8006936 <COM_RunCanAction1+0x156>
				{
					ManipulatorMode = DELTA_TOOL;
 80068f6:	4b52      	ldr	r3, [pc, #328]	; (8006a40 <COM_RunCanAction1+0x260>)
 80068f8:	2207      	movs	r2, #7
 80068fa:	701a      	strb	r2, [r3, #0]
					newmode = 1;
 80068fc:	4b51      	ldr	r3, [pc, #324]	; (8006a44 <COM_RunCanAction1+0x264>)
 80068fe:	2201      	movs	r2, #1
 8006900:	701a      	strb	r2, [r3, #0]
				}
				break;
 8006902:	e018      	b.n	8006936 <COM_RunCanAction1+0x156>
			case TRAJECTORY:
				if (ManipulatorMode != TRAJECTORY)
 8006904:	4b4e      	ldr	r3, [pc, #312]	; (8006a40 <COM_RunCanAction1+0x260>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d016      	beq.n	800693a <COM_RunCanAction1+0x15a>
				{
					ManipulatorMode = TRAJECTORY;
 800690c:	4b4c      	ldr	r3, [pc, #304]	; (8006a40 <COM_RunCanAction1+0x260>)
 800690e:	2208      	movs	r2, #8
 8006910:	701a      	strb	r2, [r3, #0]
					newmode = 1;
 8006912:	4b4c      	ldr	r3, [pc, #304]	; (8006a44 <COM_RunCanAction1+0x264>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
				}
				break;
 8006918:	e00f      	b.n	800693a <COM_RunCanAction1+0x15a>
				break;
 800691a:	bf00      	nop
 800691c:	e00e      	b.n	800693c <COM_RunCanAction1+0x15c>
				break;
 800691e:	bf00      	nop
 8006920:	e00c      	b.n	800693c <COM_RunCanAction1+0x15c>
				break;
 8006922:	bf00      	nop
 8006924:	e00a      	b.n	800693c <COM_RunCanAction1+0x15c>
				break;
 8006926:	bf00      	nop
 8006928:	e008      	b.n	800693c <COM_RunCanAction1+0x15c>
				break;
 800692a:	bf00      	nop
 800692c:	e006      	b.n	800693c <COM_RunCanAction1+0x15c>
				break;
 800692e:	bf00      	nop
 8006930:	e004      	b.n	800693c <COM_RunCanAction1+0x15c>
				break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <COM_RunCanAction1+0x15c>
				break;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <COM_RunCanAction1+0x15c>
				break;
 800693a:	bf00      	nop

			}
			if (DisconnectDoF != RxData1[5])
 800693c:	4b3f      	ldr	r3, [pc, #252]	; (8006a3c <COM_RunCanAction1+0x25c>)
 800693e:	795a      	ldrb	r2, [r3, #5]
 8006940:	4b41      	ldr	r3, [pc, #260]	; (8006a48 <COM_RunCanAction1+0x268>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d073      	beq.n	8006a30 <COM_RunCanAction1+0x250>
			{
				DisconnectDoF = RxData1[5];
 8006948:	4b3c      	ldr	r3, [pc, #240]	; (8006a3c <COM_RunCanAction1+0x25c>)
 800694a:	795a      	ldrb	r2, [r3, #5]
 800694c:	4b3e      	ldr	r3, [pc, #248]	; (8006a48 <COM_RunCanAction1+0x268>)
 800694e:	701a      	strb	r2, [r3, #0]
				newmode = 1;
 8006950:	4b3c      	ldr	r3, [pc, #240]	; (8006a44 <COM_RunCanAction1+0x264>)
 8006952:	2201      	movs	r2, #1
 8006954:	701a      	strb	r2, [r3, #0]
			if (DisconnectDoF != RxData1[5])
 8006956:	e06b      	b.n	8006a30 <COM_RunCanAction1+0x250>
			}
		}
		else
		{
			ManipulatorMode = DISABLED;
 8006958:	4b39      	ldr	r3, [pc, #228]	; (8006a40 <COM_RunCanAction1+0x260>)
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
			newmode = 1;
 800695e:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <COM_RunCanAction1+0x264>)
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
			TxData2[0] = RxData1[0];
			TxData2[1] = RxData1[1];
			HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &CAN_TxMailbox);
		}
	}
}
 8006964:	e064      	b.n	8006a30 <COM_RunCanAction1+0x250>
	else if (RxHeader1.StdId > 128 && RxHeader1.StdId < 132)
 8006966:	4b34      	ldr	r3, [pc, #208]	; (8006a38 <COM_RunCanAction1+0x258>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b80      	cmp	r3, #128	; 0x80
 800696c:	d934      	bls.n	80069d8 <COM_RunCanAction1+0x1f8>
 800696e:	4b32      	ldr	r3, [pc, #200]	; (8006a38 <COM_RunCanAction1+0x258>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b83      	cmp	r3, #131	; 0x83
 8006974:	d830      	bhi.n	80069d8 <COM_RunCanAction1+0x1f8>
		int z = (RxHeader1.StdId - 129) * 2;
 8006976:	4b30      	ldr	r3, [pc, #192]	; (8006a38 <COM_RunCanAction1+0x258>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3b81      	subs	r3, #129	; 0x81
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	603b      	str	r3, [r7, #0]
		for (int i = 0; i < 2; i++)
 8006980:	2300      	movs	r3, #0
 8006982:	607b      	str	r3, [r7, #4]
 8006984:	e022      	b.n	80069cc <COM_RunCanAction1+0x1ec>
			read_value.i[i + z] = (RxData1[0 + (4 * i)] << 24)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4a2c      	ldr	r2, [pc, #176]	; (8006a3c <COM_RunCanAction1+0x25c>)
 800698c:	5cd3      	ldrb	r3, [r2, r3]
 800698e:	061a      	lsls	r2, r3, #24
					| (RxData1[1 + (4 * i)] << 16) | (RxData1[2 + (4 * i)] << 8)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	3301      	adds	r3, #1
 8006996:	4929      	ldr	r1, [pc, #164]	; (8006a3c <COM_RunCanAction1+0x25c>)
 8006998:	5ccb      	ldrb	r3, [r1, r3]
 800699a:	041b      	lsls	r3, r3, #16
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	3302      	adds	r3, #2
 80069a4:	4925      	ldr	r1, [pc, #148]	; (8006a3c <COM_RunCanAction1+0x25c>)
 80069a6:	5ccb      	ldrb	r3, [r1, r3]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	4313      	orrs	r3, r2
					| (RxData1[3 + (4 * i)]);
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	0092      	lsls	r2, r2, #2
 80069b0:	3203      	adds	r2, #3
 80069b2:	4922      	ldr	r1, [pc, #136]	; (8006a3c <COM_RunCanAction1+0x25c>)
 80069b4:	5c8a      	ldrb	r2, [r1, r2]
 80069b6:	ea43 0102 	orr.w	r1, r3, r2
			read_value.i[i + z] = (RxData1[0 + (4 * i)] << 24)
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	4413      	add	r3, r2
 80069c0:	4a22      	ldr	r2, [pc, #136]	; (8006a4c <COM_RunCanAction1+0x26c>)
 80069c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 2; i++)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3301      	adds	r3, #1
 80069ca:	607b      	str	r3, [r7, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	ddd9      	ble.n	8006986 <COM_RunCanAction1+0x1a6>
		ReadToInstructions();
 80069d2:	f000 f989 	bl	8006ce8 <ReadToInstructions>
	{
 80069d6:	e02b      	b.n	8006a30 <COM_RunCanAction1+0x250>
	else if (RxHeader1.StdId == 157)
 80069d8:	4b17      	ldr	r3, [pc, #92]	; (8006a38 <COM_RunCanAction1+0x258>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b9d      	cmp	r3, #157	; 0x9d
 80069de:	d104      	bne.n	80069ea <COM_RunCanAction1+0x20a>
		GripperState = RxData1[0];
 80069e0:	4b16      	ldr	r3, [pc, #88]	; (8006a3c <COM_RunCanAction1+0x25c>)
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <COM_RunCanAction1+0x270>)
 80069e6:	701a      	strb	r2, [r3, #0]
}
 80069e8:	e022      	b.n	8006a30 <COM_RunCanAction1+0x250>
	else if (RxHeader1.StdId == 117)
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <COM_RunCanAction1+0x258>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b75      	cmp	r3, #117	; 0x75
 80069f0:	d11e      	bne.n	8006a30 <COM_RunCanAction1+0x250>
		if (RxData1[0] == 1)
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <COM_RunCanAction1+0x25c>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <COM_RunCanAction1+0x21e>
			HAL_NVIC_SystemReset();
 80069fa:	f7fb fa56 	bl	8001eaa <HAL_NVIC_SystemReset>
		if (RxData1[1] == 1)
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <COM_RunCanAction1+0x25c>)
 8006a00:	785b      	ldrb	r3, [r3, #1]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d114      	bne.n	8006a30 <COM_RunCanAction1+0x250>
			TxHeader1.StdId = 117;
 8006a06:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <COM_RunCanAction1+0x274>)
 8006a08:	2275      	movs	r2, #117	; 0x75
 8006a0a:	601a      	str	r2, [r3, #0]
			TxHeader1.DLC = 2;
 8006a0c:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <COM_RunCanAction1+0x274>)
 8006a0e:	2202      	movs	r2, #2
 8006a10:	611a      	str	r2, [r3, #16]
			TxData2[0] = RxData1[0];
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <COM_RunCanAction1+0x25c>)
 8006a14:	781a      	ldrb	r2, [r3, #0]
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <COM_RunCanAction1+0x278>)
 8006a18:	701a      	strb	r2, [r3, #0]
			TxData2[1] = RxData1[1];
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <COM_RunCanAction1+0x25c>)
 8006a1c:	785a      	ldrb	r2, [r3, #1]
 8006a1e:	4b0e      	ldr	r3, [pc, #56]	; (8006a58 <COM_RunCanAction1+0x278>)
 8006a20:	705a      	strb	r2, [r3, #1]
			HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &CAN_TxMailbox);
 8006a22:	4b0e      	ldr	r3, [pc, #56]	; (8006a5c <COM_RunCanAction1+0x27c>)
 8006a24:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <COM_RunCanAction1+0x278>)
 8006a26:	490e      	ldr	r1, [pc, #56]	; (8006a60 <COM_RunCanAction1+0x280>)
 8006a28:	480e      	ldr	r0, [pc, #56]	; (8006a64 <COM_RunCanAction1+0x284>)
 8006a2a:	f7fa fce7 	bl	80013fc <HAL_CAN_AddTxMessage>
}
 8006a2e:	e7ff      	b.n	8006a30 <COM_RunCanAction1+0x250>
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000374 	.word	0x20000374
 8006a3c:	20000390 	.word	0x20000390
 8006a40:	200000d8 	.word	0x200000d8
 8006a44:	20000155 	.word	0x20000155
 8006a48:	200000d9 	.word	0x200000d9
 8006a4c:	20000124 	.word	0x20000124
 8006a50:	20000154 	.word	0x20000154
 8006a54:	2000035c 	.word	0x2000035c
 8006a58:	2000032c 	.word	0x2000032c
 8006a5c:	20000310 	.word	0x20000310
 8006a60:	20000314 	.word	0x20000314
 8006a64:	200003c0 	.word	0x200003c0

08006a68 <COM_RunCanAction2>:
void COM_RunCanAction2()
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
	if (RxHeader2.StdId >= 158 && RxHeader2.StdId <= 163)
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <COM_RunCanAction2+0x7c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b9d      	cmp	r3, #157	; 0x9d
 8006a72:	d934      	bls.n	8006ade <COM_RunCanAction2+0x76>
 8006a74:	4b1b      	ldr	r3, [pc, #108]	; (8006ae4 <COM_RunCanAction2+0x7c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2ba3      	cmp	r3, #163	; 0xa3
 8006a7a:	d830      	bhi.n	8006ade <COM_RunCanAction2+0x76>
	{
		static int i = 0;
		meas_angle.i[RxHeader2.StdId - 158] = (RxData2[0] << 24)
 8006a7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ae8 <COM_RunCanAction2+0x80>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	061a      	lsls	r2, r3, #24
				| (RxData2[1] << 16) | (RxData2[2] << 8) | (RxData2[3]);
 8006a82:	4b19      	ldr	r3, [pc, #100]	; (8006ae8 <COM_RunCanAction2+0x80>)
 8006a84:	785b      	ldrb	r3, [r3, #1]
 8006a86:	041b      	lsls	r3, r3, #16
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	4b17      	ldr	r3, [pc, #92]	; (8006ae8 <COM_RunCanAction2+0x80>)
 8006a8c:	789b      	ldrb	r3, [r3, #2]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	4313      	orrs	r3, r2
 8006a92:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <COM_RunCanAction2+0x80>)
 8006a94:	78d2      	ldrb	r2, [r2, #3]
 8006a96:	431a      	orrs	r2, r3
		meas_angle.i[RxHeader2.StdId - 158] = (RxData2[0] << 24)
 8006a98:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <COM_RunCanAction2+0x7c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3b9e      	subs	r3, #158	; 0x9e
				| (RxData2[1] << 16) | (RxData2[2] << 8) | (RxData2[3]);
 8006a9e:	4611      	mov	r1, r2
		meas_angle.i[RxHeader2.StdId - 158] = (RxData2[0] << 24)
 8006aa0:	4a12      	ldr	r2, [pc, #72]	; (8006aec <COM_RunCanAction2+0x84>)
 8006aa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(i>=13)
 8006aa6:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <COM_RunCanAction2+0x88>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b0c      	cmp	r3, #12
 8006aac:	dd12      	ble.n	8006ad4 <COM_RunCanAction2+0x6c>
		{
		TxHeader1.StdId = RxHeader2.StdId;
 8006aae:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <COM_RunCanAction2+0x7c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a10      	ldr	r2, [pc, #64]	; (8006af4 <COM_RunCanAction2+0x8c>)
 8006ab4:	6013      	str	r3, [r2, #0]
		TxHeader1.ExtId = 0;
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <COM_RunCanAction2+0x8c>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	605a      	str	r2, [r3, #4]
		TxHeader1.DLC = 8;
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <COM_RunCanAction2+0x8c>)
 8006abe:	2208      	movs	r2, #8
 8006ac0:	611a      	str	r2, [r3, #16]

			HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, RxData2, &CAN_TxMailbox1);
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <COM_RunCanAction2+0x90>)
 8006ac4:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <COM_RunCanAction2+0x80>)
 8006ac6:	490b      	ldr	r1, [pc, #44]	; (8006af4 <COM_RunCanAction2+0x8c>)
 8006ac8:	480c      	ldr	r0, [pc, #48]	; (8006afc <COM_RunCanAction2+0x94>)
 8006aca:	f7fa fc97 	bl	80013fc <HAL_CAN_AddTxMessage>
			i = 0;
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <COM_RunCanAction2+0x88>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
		}
		i++;
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <COM_RunCanAction2+0x88>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	4a05      	ldr	r2, [pc, #20]	; (8006af0 <COM_RunCanAction2+0x88>)
 8006adc:	6013      	str	r3, [r2, #0]
	}

}
 8006ade:	bf00      	nop
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000334 	.word	0x20000334
 8006ae8:	20000350 	.word	0x20000350
 8006aec:	2000010c 	.word	0x2000010c
 8006af0:	200003ec 	.word	0x200003ec
 8006af4:	2000035c 	.word	0x2000035c
 8006af8:	20000358 	.word	0x20000358
 8006afc:	20000398 	.word	0x20000398

08006b00 <SendInstructions>:
void SendInstructions()
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
	for (int j = 0; j < 6; j++)
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	e0b2      	b.n	8006c72 <SendInstructions+0x172>
	{

		TxHeader2.StdId = 151 + j;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	3397      	adds	r3, #151	; 0x97
 8006b10:	461a      	mov	r2, r3
 8006b12:	4b5d      	ldr	r3, [pc, #372]	; (8006c88 <SendInstructions+0x188>)
 8006b14:	601a      	str	r2, [r3, #0]
		TxHeader2.ExtId = 0;
 8006b16:	4b5c      	ldr	r3, [pc, #368]	; (8006c88 <SendInstructions+0x188>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	605a      	str	r2, [r3, #4]
		TxHeader2.DLC = 8;
 8006b1c:	4b5a      	ldr	r3, [pc, #360]	; (8006c88 <SendInstructions+0x188>)
 8006b1e:	2208      	movs	r2, #8
 8006b20:	611a      	str	r2, [r3, #16]
		TxData2[0] = 1;
 8006b22:	4b5a      	ldr	r3, [pc, #360]	; (8006c8c <SendInstructions+0x18c>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	701a      	strb	r2, [r3, #0]
		TxData2[1] = 1;
 8006b28:	4b58      	ldr	r3, [pc, #352]	; (8006c8c <SendInstructions+0x18c>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	705a      	strb	r2, [r3, #1]
		TxData2[2] = ManipulatorMode;
 8006b2e:	4b58      	ldr	r3, [pc, #352]	; (8006c90 <SendInstructions+0x190>)
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	4b56      	ldr	r3, [pc, #344]	; (8006c8c <SendInstructions+0x18c>)
 8006b34:	709a      	strb	r2, [r3, #2]
		TxData2[3] = ManipulatorMode;
 8006b36:	4b56      	ldr	r3, [pc, #344]	; (8006c90 <SendInstructions+0x190>)
 8006b38:	781a      	ldrb	r2, [r3, #0]
 8006b3a:	4b54      	ldr	r3, [pc, #336]	; (8006c8c <SendInstructions+0x18c>)
 8006b3c:	70da      	strb	r2, [r3, #3]
		if (ManipulatorMode != 0)
 8006b3e:	4b54      	ldr	r3, [pc, #336]	; (8006c90 <SendInstructions+0x190>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 8092 	beq.w	8006c6c <SendInstructions+0x16c>
		{
			if (ManipulatorMode == HOLD)
 8006b48:	4b51      	ldr	r3, [pc, #324]	; (8006c90 <SendInstructions+0x190>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d121      	bne.n	8006b94 <SendInstructions+0x94>
			{
				TxData2[2] = ManipulatorMode;
 8006b50:	4b4f      	ldr	r3, [pc, #316]	; (8006c90 <SendInstructions+0x190>)
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	4b4d      	ldr	r3, [pc, #308]	; (8006c8c <SendInstructions+0x18c>)
 8006b56:	709a      	strb	r2, [r3, #2]
				TxData2[3] = ManipulatorMode;
 8006b58:	4b4d      	ldr	r3, [pc, #308]	; (8006c90 <SendInstructions+0x190>)
 8006b5a:	781a      	ldrb	r2, [r3, #0]
 8006b5c:	4b4b      	ldr	r3, [pc, #300]	; (8006c8c <SendInstructions+0x18c>)
 8006b5e:	70da      	strb	r2, [r3, #3]
				for (int i = 4; i < 8; i++)
 8006b60:	2304      	movs	r3, #4
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	e012      	b.n	8006b8c <SendInstructions+0x8c>
				{
					TxData2[i] = (angle.i[j] >> 8 * (7 - i)) & 0xFF;
 8006b66:	4a4b      	ldr	r2, [pc, #300]	; (8006c94 <SendInstructions+0x194>)
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f1c3 0307 	rsb	r3, r3, #7
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7a:	b2d9      	uxtb	r1, r3
 8006b7c:	4a43      	ldr	r2, [pc, #268]	; (8006c8c <SendInstructions+0x18c>)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	4413      	add	r3, r2
 8006b82:	460a      	mov	r2, r1
 8006b84:	701a      	strb	r2, [r3, #0]
				for (int i = 4; i < 8; i++)
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2b07      	cmp	r3, #7
 8006b90:	dde9      	ble.n	8006b66 <SendInstructions+0x66>
 8006b92:	e06b      	b.n	8006c6c <SendInstructions+0x16c>
				}
			}
			else if (ManipulatorMode == VELOCITY)
 8006b94:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <SendInstructions+0x190>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d121      	bne.n	8006be0 <SendInstructions+0xe0>
			{
				TxData2[2] = ManipulatorMode;
 8006b9c:	4b3c      	ldr	r3, [pc, #240]	; (8006c90 <SendInstructions+0x190>)
 8006b9e:	781a      	ldrb	r2, [r3, #0]
 8006ba0:	4b3a      	ldr	r3, [pc, #232]	; (8006c8c <SendInstructions+0x18c>)
 8006ba2:	709a      	strb	r2, [r3, #2]
				TxData2[3] = ManipulatorMode;
 8006ba4:	4b3a      	ldr	r3, [pc, #232]	; (8006c90 <SendInstructions+0x190>)
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	4b38      	ldr	r3, [pc, #224]	; (8006c8c <SendInstructions+0x18c>)
 8006baa:	70da      	strb	r2, [r3, #3]
				for (int i = 4; i < 8; i++)
 8006bac:	2304      	movs	r3, #4
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e012      	b.n	8006bd8 <SendInstructions+0xd8>
				{
					TxData2[i] = (speed.i[j] >> 8 * (7 - i)) & 0xFF;
 8006bb2:	4a39      	ldr	r2, [pc, #228]	; (8006c98 <SendInstructions+0x198>)
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f1c3 0307 	rsb	r3, r3, #7
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	b2d9      	uxtb	r1, r3
 8006bc8:	4a30      	ldr	r2, [pc, #192]	; (8006c8c <SendInstructions+0x18c>)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	460a      	mov	r2, r1
 8006bd0:	701a      	strb	r2, [r3, #0]
				for (int i = 4; i < 8; i++)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b07      	cmp	r3, #7
 8006bdc:	dde9      	ble.n	8006bb2 <SendInstructions+0xb2>
 8006bde:	e045      	b.n	8006c6c <SendInstructions+0x16c>
				}
			}
			else if(DisconnectDoF != 0 && j>4)
 8006be0:	4b2e      	ldr	r3, [pc, #184]	; (8006c9c <SendInstructions+0x19c>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d022      	beq.n	8006c2e <SendInstructions+0x12e>
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	dd1f      	ble.n	8006c2e <SendInstructions+0x12e>
			{
				TxData2[2] = VELOCITY;
 8006bee:	4b27      	ldr	r3, [pc, #156]	; (8006c8c <SendInstructions+0x18c>)
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	709a      	strb	r2, [r3, #2]
				TxData2[3] = VELOCITY;
 8006bf4:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <SendInstructions+0x18c>)
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	70da      	strb	r2, [r3, #3]
				for (int i = 4; i < 8; i++)
 8006bfa:	2304      	movs	r3, #4
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	e012      	b.n	8006c26 <SendInstructions+0x126>
				{
					TxData2[i] = (speed.i[j] >> 8 * (7 - i)) & 0xFF;
 8006c00:	4a25      	ldr	r2, [pc, #148]	; (8006c98 <SendInstructions+0x198>)
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f1c3 0307 	rsb	r3, r3, #7
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	fa22 f303 	lsr.w	r3, r2, r3
 8006c14:	b2d9      	uxtb	r1, r3
 8006c16:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <SendInstructions+0x18c>)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	460a      	mov	r2, r1
 8006c1e:	701a      	strb	r2, [r3, #0]
				for (int i = 4; i < 8; i++)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b07      	cmp	r3, #7
 8006c2a:	dde9      	ble.n	8006c00 <SendInstructions+0x100>
 8006c2c:	e01e      	b.n	8006c6c <SendInstructions+0x16c>
				}
			}
			else
			{
				TxData2[2] = ANGLES;
 8006c2e:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <SendInstructions+0x18c>)
 8006c30:	2202      	movs	r2, #2
 8006c32:	709a      	strb	r2, [r3, #2]
				TxData2[3] = ANGLES;
 8006c34:	4b15      	ldr	r3, [pc, #84]	; (8006c8c <SendInstructions+0x18c>)
 8006c36:	2202      	movs	r2, #2
 8006c38:	70da      	strb	r2, [r3, #3]
				for (int i = 4; i < 8; i++)
 8006c3a:	2304      	movs	r3, #4
 8006c3c:	607b      	str	r3, [r7, #4]
 8006c3e:	e012      	b.n	8006c66 <SendInstructions+0x166>
				{
					TxData2[i] = (angle.i[j] >> 8 * (7 - i)) & 0xFF;
 8006c40:	4a14      	ldr	r2, [pc, #80]	; (8006c94 <SendInstructions+0x194>)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f1c3 0307 	rsb	r3, r3, #7
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
 8006c54:	b2d9      	uxtb	r1, r3
 8006c56:	4a0d      	ldr	r2, [pc, #52]	; (8006c8c <SendInstructions+0x18c>)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	460a      	mov	r2, r1
 8006c5e:	701a      	strb	r2, [r3, #0]
				for (int i = 4; i < 8; i++)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3301      	adds	r3, #1
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b07      	cmp	r3, #7
 8006c6a:	dde9      	ble.n	8006c40 <SendInstructions+0x140>
	for (int j = 0; j < 6; j++)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	f77f af49 	ble.w	8006b0c <SendInstructions+0xc>
//		while (HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &CAN_TxMailbox)
//				!= HAL_OK)
//			;

	}
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000314 	.word	0x20000314
 8006c8c:	2000032c 	.word	0x2000032c
 8006c90:	200000d8 	.word	0x200000d8
 8006c94:	200000dc 	.word	0x200000dc
 8006c98:	200000f4 	.word	0x200000f4
 8006c9c:	200000d9 	.word	0x200000d9

08006ca0 <SendGripper>:
	}
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &CAN_TxMailbox);
}

void SendGripper()
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
	TxHeader2.StdId = 157;
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <SendGripper+0x34>)
 8006ca6:	229d      	movs	r2, #157	; 0x9d
 8006ca8:	601a      	str	r2, [r3, #0]
	TxHeader2.DLC = 1;
 8006caa:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <SendGripper+0x34>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	611a      	str	r2, [r3, #16]
	TxData2[0] = GripperState;
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <SendGripper+0x38>)
 8006cb2:	781a      	ldrb	r2, [r3, #0]
 8006cb4:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <SendGripper+0x3c>)
 8006cb6:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &CAN_TxMailbox)
 8006cb8:	bf00      	nop
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <SendGripper+0x40>)
 8006cbc:	4a07      	ldr	r2, [pc, #28]	; (8006cdc <SendGripper+0x3c>)
 8006cbe:	4905      	ldr	r1, [pc, #20]	; (8006cd4 <SendGripper+0x34>)
 8006cc0:	4808      	ldr	r0, [pc, #32]	; (8006ce4 <SendGripper+0x44>)
 8006cc2:	f7fa fb9b 	bl	80013fc <HAL_CAN_AddTxMessage>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f6      	bne.n	8006cba <SendGripper+0x1a>
					!= HAL_OK)
				;
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000314 	.word	0x20000314
 8006cd8:	20000154 	.word	0x20000154
 8006cdc:	2000032c 	.word	0x2000032c
 8006ce0:	20000310 	.word	0x20000310
 8006ce4:	200003c0 	.word	0x200003c0

08006ce8 <ReadToInstructions>:
void ReadToInstructions()
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
	for (int j = 0; j < 6; j++)
 8006cee:	2300      	movs	r3, #0
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	e084      	b.n	8006dfe <ReadToInstructions+0x116>
	{
		if (DisconnectDoF != NO && j > 4)
 8006cf4:	4b47      	ldr	r3, [pc, #284]	; (8006e14 <ReadToInstructions+0x12c>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <ReadToInstructions+0x30>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	dd0a      	ble.n	8006d18 <ReadToInstructions+0x30>
		{
			speed.f[j] = read_value.f[j];
 8006d02:	4a45      	ldr	r2, [pc, #276]	; (8006e18 <ReadToInstructions+0x130>)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	4943      	ldr	r1, [pc, #268]	; (8006e1c <ReadToInstructions+0x134>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e06f      	b.n	8006df8 <ReadToInstructions+0x110>
		}
		else if (DisconnectDoF == DOF456 && j>2 && j<=4)
 8006d18:	4b3e      	ldr	r3, [pc, #248]	; (8006e14 <ReadToInstructions+0x12c>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d110      	bne.n	8006d42 <ReadToInstructions+0x5a>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	dd0d      	ble.n	8006d42 <ReadToInstructions+0x5a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	dc0a      	bgt.n	8006d42 <ReadToInstructions+0x5a>
		{
			angle.f[j] = read_value.f[j];
 8006d2c:	4a3a      	ldr	r2, [pc, #232]	; (8006e18 <ReadToInstructions+0x130>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	493a      	ldr	r1, [pc, #232]	; (8006e20 <ReadToInstructions+0x138>)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e05a      	b.n	8006df8 <ReadToInstructions+0x110>
		}
		else
		{
			switch (ManipulatorMode)
 8006d42:	4b38      	ldr	r3, [pc, #224]	; (8006e24 <ReadToInstructions+0x13c>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d856      	bhi.n	8006df8 <ReadToInstructions+0x110>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <ReadToInstructions+0x68>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006df9 	.word	0x08006df9
 8006d54:	08006df9 	.word	0x08006df9
 8006d58:	08006d75 	.word	0x08006d75
 8006d5c:	08006d8b 	.word	0x08006d8b
 8006d60:	08006da1 	.word	0x08006da1
 8006d64:	08006db7 	.word	0x08006db7
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	08006de3 	.word	0x08006de3
 8006d70:	08006df9 	.word	0x08006df9
				break;
			case HOLD:
				/*angle.f[j] = read_value.f[j];*/
				break;
			case ANGLES:
				angle.f[j] = read_value.f[j];
 8006d74:	4a28      	ldr	r2, [pc, #160]	; (8006e18 <ReadToInstructions+0x130>)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4928      	ldr	r1, [pc, #160]	; (8006e20 <ReadToInstructions+0x138>)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	601a      	str	r2, [r3, #0]
				break;
 8006d88:	e036      	b.n	8006df8 <ReadToInstructions+0x110>
			case VELOCITY:
				speed.f[j] = read_value.f[j];
 8006d8a:	4a23      	ldr	r2, [pc, #140]	; (8006e18 <ReadToInstructions+0x130>)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	4921      	ldr	r1, [pc, #132]	; (8006e1c <ReadToInstructions+0x134>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	601a      	str	r2, [r3, #0]
				break;
 8006d9e:	e02b      	b.n	8006df8 <ReadToInstructions+0x110>
			case XYZ_GLOBAL:
				kinematics_in.f[j] = read_value.f[j];
 8006da0:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <ReadToInstructions+0x130>)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	491f      	ldr	r1, [pc, #124]	; (8006e28 <ReadToInstructions+0x140>)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	601a      	str	r2, [r3, #0]
				break;
 8006db4:	e020      	b.n	8006df8 <ReadToInstructions+0x110>
			case VEL_GLOB:
				kinematics_in.f[j] = read_value.f[j];
 8006db6:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <ReadToInstructions+0x130>)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4919      	ldr	r1, [pc, #100]	; (8006e28 <ReadToInstructions+0x140>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	601a      	str	r2, [r3, #0]
				break;
 8006dca:	e015      	b.n	8006df8 <ReadToInstructions+0x110>
			case VEL_TOOL:
				kinematics_in.f[j] = read_value.f[j];
 8006dcc:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <ReadToInstructions+0x130>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4914      	ldr	r1, [pc, #80]	; (8006e28 <ReadToInstructions+0x140>)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	601a      	str	r2, [r3, #0]
				break;
 8006de0:	e00a      	b.n	8006df8 <ReadToInstructions+0x110>
			case DELTA_TOOL:
				kinematics_in.f[j] = read_value.f[j];
 8006de2:	4a0d      	ldr	r2, [pc, #52]	; (8006e18 <ReadToInstructions+0x130>)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	490e      	ldr	r1, [pc, #56]	; (8006e28 <ReadToInstructions+0x140>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	601a      	str	r2, [r3, #0]
				break;
 8006df6:	bf00      	nop
	for (int j = 0; j < 6; j++)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	607b      	str	r3, [r7, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b05      	cmp	r3, #5
 8006e02:	f77f af77 	ble.w	8006cf4 <ReadToInstructions+0xc>
			case TRAJECTORY:
				break;
			}
		}
	}
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	200000d9 	.word	0x200000d9
 8006e18:	20000124 	.word	0x20000124
 8006e1c:	200000f4 	.word	0x200000f4
 8006e20:	200000dc 	.word	0x200000dc
 8006e24:	200000d8 	.word	0x200000d8
 8006e28:	2000013c 	.word	0x2000013c

08006e2c <MX_CAN1_Init>:
/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	; 0x28
 8006e30:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	hcan1.Instance = CAN1;
 8006e32:	4b35      	ldr	r3, [pc, #212]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e34:	4a35      	ldr	r2, [pc, #212]	; (8006f0c <MX_CAN1_Init+0xe0>)
 8006e36:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 5;
 8006e38:	4b33      	ldr	r3, [pc, #204]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e3a:	2205      	movs	r2, #5
 8006e3c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006e3e:	4b32      	ldr	r3, [pc, #200]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006e44:	4b30      	ldr	r3, [pc, #192]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8006e4a:	4b2f      	ldr	r3, [pc, #188]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006e50:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8006e52:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e54:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8006e58:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8006e5a:	4b2b      	ldr	r3, [pc, #172]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8006e60:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8006e66:	4b28      	ldr	r3, [pc, #160]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8006e6c:	4b26      	ldr	r3, [pc, #152]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006e72:	4b25      	ldr	r3, [pc, #148]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8006e78:	4b23      	ldr	r3, [pc, #140]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006e7e:	4822      	ldr	r0, [pc, #136]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006e80:	f7fa f896 	bl	8000fb0 <HAL_CAN_Init>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <MX_CAN1_Init+0x68>
	{
		_Error_Handler(__FILE__, __LINE__);
 8006e8a:	f240 1189 	movw	r1, #393	; 0x189
 8006e8e:	4820      	ldr	r0, [pc, #128]	; (8006f10 <MX_CAN1_Init+0xe4>)
 8006e90:	f000 fb0c 	bl	80074ac <_Error_Handler>
	}

	//sFilterConfig.FilterNumber = 0;

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = 14;
 8006eb4:	230e      	movs	r3, #14
 8006eb6:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8006eb8:	463b      	mov	r3, r7
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4812      	ldr	r0, [pc, #72]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006ebe:	f7fa f975 	bl	80011ac <HAL_CAN_ConfigFilter>
	{
		//Filter configuration Error
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8006ec2:	2102      	movs	r1, #2
 8006ec4:	4810      	ldr	r0, [pc, #64]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006ec6:	f7fa fc8a 	bl	80017de <HAL_CAN_ActivateNotification>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <MX_CAN1_Init+0xae>
			!= HAL_OK)
	{
		Error_Handler();
 8006ed0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006ed4:	480e      	ldr	r0, [pc, #56]	; (8006f10 <MX_CAN1_Init+0xe4>)
 8006ed6:	f000 fae9 	bl	80074ac <_Error_Handler>
	}
	/*	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!=HAL_OK)
	 {
	 Error_Handler();
	 }*/
	TxHeader1.StdId = 101;
 8006eda:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <MX_CAN1_Init+0xe8>)
 8006edc:	2265      	movs	r2, #101	; 0x65
 8006ede:	601a      	str	r2, [r3, #0]
	TxHeader1.ExtId = 0;
 8006ee0:	4b0c      	ldr	r3, [pc, #48]	; (8006f14 <MX_CAN1_Init+0xe8>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	605a      	str	r2, [r3, #4]
	TxHeader1.DLC = 8;
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <MX_CAN1_Init+0xe8>)
 8006ee8:	2208      	movs	r2, #8
 8006eea:	611a      	str	r2, [r3, #16]
	TxHeader1.RTR = CAN_RTR_DATA;
 8006eec:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <MX_CAN1_Init+0xe8>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	60da      	str	r2, [r3, #12]
	TxHeader1.IDE = 0;
 8006ef2:	4b08      	ldr	r3, [pc, #32]	; (8006f14 <MX_CAN1_Init+0xe8>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	609a      	str	r2, [r3, #8]

	HAL_CAN_Start(&hcan1);
 8006ef8:	4803      	ldr	r0, [pc, #12]	; (8006f08 <MX_CAN1_Init+0xdc>)
 8006efa:	f7fa fa39 	bl	8001370 <HAL_CAN_Start>

}
 8006efe:	bf00      	nop
 8006f00:	3728      	adds	r7, #40	; 0x28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000398 	.word	0x20000398
 8006f0c:	40006400 	.word	0x40006400
 8006f10:	08009fe0 	.word	0x08009fe0
 8006f14:	2000035c 	.word	0x2000035c

08006f18 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	hcan2.Instance = CAN2;
 8006f1e:	4b35      	ldr	r3, [pc, #212]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f20:	4a35      	ldr	r2, [pc, #212]	; (8006ff8 <MX_CAN2_Init+0xe0>)
 8006f22:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 5;
 8006f24:	4b33      	ldr	r3, [pc, #204]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f26:	2205      	movs	r2, #5
 8006f28:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8006f2a:	4b32      	ldr	r3, [pc, #200]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006f30:	4b30      	ldr	r3, [pc, #192]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8006f36:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006f3c:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_8TQ;
 8006f3e:	4b2d      	ldr	r3, [pc, #180]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f40:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8006f44:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8006f46:	4b2b      	ldr	r3, [pc, #172]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8006f4c:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8006f52:	4b28      	ldr	r3, [pc, #160]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8006f58:	4b26      	ldr	r3, [pc, #152]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8006f5e:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8006f64:	4b23      	ldr	r3, [pc, #140]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8006f6a:	4822      	ldr	r0, [pc, #136]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006f6c:	f7fa f820 	bl	8000fb0 <HAL_CAN_Init>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <MX_CAN2_Init+0x68>
	{
		_Error_Handler(__FILE__, __LINE__);
 8006f76:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006f7a:	4820      	ldr	r0, [pc, #128]	; (8006ffc <MX_CAN2_Init+0xe4>)
 8006f7c:	f000 fa96 	bl	80074ac <_Error_Handler>
	}

	//sFilterConfig.FilterNumber = 0;
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006f84:	2301      	movs	r3, #1
 8006f86:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = 14;
 8006fa0:	230e      	movs	r3, #14
 8006fa2:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4812      	ldr	r0, [pc, #72]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006faa:	f7fa f8ff 	bl	80011ac <HAL_CAN_ConfigFilter>
	{
		//Filter configuration Error
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)
 8006fae:	2102      	movs	r1, #2
 8006fb0:	4810      	ldr	r0, [pc, #64]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006fb2:	f7fa fc14 	bl	80017de <HAL_CAN_ActivateNotification>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <MX_CAN2_Init+0xae>
			!= HAL_OK)
	{
		Error_Handler();
 8006fbc:	f240 11d7 	movw	r1, #471	; 0x1d7
 8006fc0:	480e      	ldr	r0, [pc, #56]	; (8006ffc <MX_CAN2_Init+0xe4>)
 8006fc2:	f000 fa73 	bl	80074ac <_Error_Handler>
	/*	  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!=HAL_OK)
	 {
	 Error_Handler();
	 }
	 */
	TxHeader2.StdId = 110;
 8006fc6:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <MX_CAN2_Init+0xe8>)
 8006fc8:	226e      	movs	r2, #110	; 0x6e
 8006fca:	601a      	str	r2, [r3, #0]
	TxHeader2.ExtId = 0;
 8006fcc:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <MX_CAN2_Init+0xe8>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	605a      	str	r2, [r3, #4]
	TxHeader2.DLC = 8;
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <MX_CAN2_Init+0xe8>)
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	611a      	str	r2, [r3, #16]
	TxHeader2.RTR = CAN_RTR_DATA;
 8006fd8:	4b09      	ldr	r3, [pc, #36]	; (8007000 <MX_CAN2_Init+0xe8>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	60da      	str	r2, [r3, #12]
	TxHeader2.IDE = 0;
 8006fde:	4b08      	ldr	r3, [pc, #32]	; (8007000 <MX_CAN2_Init+0xe8>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	609a      	str	r2, [r3, #8]
	HAL_CAN_Start(&hcan2);
 8006fe4:	4803      	ldr	r0, [pc, #12]	; (8006ff4 <MX_CAN2_Init+0xdc>)
 8006fe6:	f7fa f9c3 	bl	8001370 <HAL_CAN_Start>

}
 8006fea:	bf00      	nop
 8006fec:	3728      	adds	r7, #40	; 0x28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	200003c0 	.word	0x200003c0
 8006ff8:	40006800 	.word	0x40006800
 8006ffc:	08009fe0 	.word	0x08009fe0
 8007000:	20000314 	.word	0x20000314

08007004 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	; 0x28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;
	if (canHandle->Instance == CAN1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a4c      	ldr	r2, [pc, #304]	; (8007144 <HAL_CAN_MspInit+0x140>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d140      	bne.n	8007098 <HAL_CAN_MspInit+0x94>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 8007016:	4b4c      	ldr	r3, [pc, #304]	; (8007148 <HAL_CAN_MspInit+0x144>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	4a4a      	ldr	r2, [pc, #296]	; (8007148 <HAL_CAN_MspInit+0x144>)
 800701e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8007020:	4b49      	ldr	r3, [pc, #292]	; (8007148 <HAL_CAN_MspInit+0x144>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d10d      	bne.n	8007044 <HAL_CAN_MspInit+0x40>
		{
			__HAL_RCC_CAN1_CLK_ENABLE()
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	4b47      	ldr	r3, [pc, #284]	; (800714c <HAL_CAN_MspInit+0x148>)
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	4a46      	ldr	r2, [pc, #280]	; (800714c <HAL_CAN_MspInit+0x148>)
 8007032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007036:	6413      	str	r3, [r2, #64]	; 0x40
 8007038:	4b44      	ldr	r3, [pc, #272]	; (800714c <HAL_CAN_MspInit+0x148>)
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	693b      	ldr	r3, [r7, #16]

		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8007044:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007048:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704a:	2302      	movs	r3, #2
 800704c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007052:	2303      	movs	r3, #3
 8007054:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007056:	2309      	movs	r3, #9
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800705a:	f107 0314 	add.w	r3, r7, #20
 800705e:	4619      	mov	r1, r3
 8007060:	483b      	ldr	r0, [pc, #236]	; (8007150 <HAL_CAN_MspInit+0x14c>)
 8007062:	f7fb f903 	bl	800226c <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8007066:	2200      	movs	r2, #0
 8007068:	2100      	movs	r1, #0
 800706a:	2013      	movs	r0, #19
 800706c:	f7fa fef3 	bl	8001e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8007070:	2013      	movs	r0, #19
 8007072:	f7fa ff0c 	bl	8001e8e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8007076:	2200      	movs	r2, #0
 8007078:	2100      	movs	r1, #0
 800707a:	2014      	movs	r0, #20
 800707c:	f7fa feeb 	bl	8001e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007080:	2014      	movs	r0, #20
 8007082:	f7fa ff04 	bl	8001e8e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	2015      	movs	r0, #21
 800708c:	f7fa fee3 	bl	8001e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007090:	2015      	movs	r0, #21
 8007092:	f7fa fefc 	bl	8001e8e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8007096:	e051      	b.n	800713c <HAL_CAN_MspInit+0x138>
	else if (canHandle->Instance == CAN2)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a2d      	ldr	r2, [pc, #180]	; (8007154 <HAL_CAN_MspInit+0x150>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d14c      	bne.n	800713c <HAL_CAN_MspInit+0x138>
		__HAL_RCC_CAN2_CLK_ENABLE()
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	4b29      	ldr	r3, [pc, #164]	; (800714c <HAL_CAN_MspInit+0x148>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	4a28      	ldr	r2, [pc, #160]	; (800714c <HAL_CAN_MspInit+0x148>)
 80070ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070b0:	6413      	str	r3, [r2, #64]	; 0x40
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <HAL_CAN_MspInit+0x148>)
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
		HAL_RCC_CAN1_CLK_ENABLED++;
 80070be:	4b22      	ldr	r3, [pc, #136]	; (8007148 <HAL_CAN_MspInit+0x144>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	4a20      	ldr	r2, [pc, #128]	; (8007148 <HAL_CAN_MspInit+0x144>)
 80070c6:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 80070c8:	4b1f      	ldr	r3, [pc, #124]	; (8007148 <HAL_CAN_MspInit+0x144>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d10d      	bne.n	80070ec <HAL_CAN_MspInit+0xe8>
			__HAL_RCC_CAN1_CLK_ENABLE()
 80070d0:	2300      	movs	r3, #0
 80070d2:	60bb      	str	r3, [r7, #8]
 80070d4:	4b1d      	ldr	r3, [pc, #116]	; (800714c <HAL_CAN_MspInit+0x148>)
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	4a1c      	ldr	r2, [pc, #112]	; (800714c <HAL_CAN_MspInit+0x148>)
 80070da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070de:	6413      	str	r3, [r2, #64]	; 0x40
 80070e0:	4b1a      	ldr	r3, [pc, #104]	; (800714c <HAL_CAN_MspInit+0x148>)
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e8:	60bb      	str	r3, [r7, #8]
 80070ea:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80070ec:	2360      	movs	r3, #96	; 0x60
 80070ee:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070f0:	2302      	movs	r3, #2
 80070f2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070f8:	2303      	movs	r3, #3
 80070fa:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80070fc:	2309      	movs	r3, #9
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007100:	f107 0314 	add.w	r3, r7, #20
 8007104:	4619      	mov	r1, r3
 8007106:	4814      	ldr	r0, [pc, #80]	; (8007158 <HAL_CAN_MspInit+0x154>)
 8007108:	f7fb f8b0 	bl	800226c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 800710c:	2200      	movs	r2, #0
 800710e:	2100      	movs	r1, #0
 8007110:	203f      	movs	r0, #63	; 0x3f
 8007112:	f7fa fea0 	bl	8001e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8007116:	203f      	movs	r0, #63	; 0x3f
 8007118:	f7fa feb9 	bl	8001e8e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800711c:	2200      	movs	r2, #0
 800711e:	2100      	movs	r1, #0
 8007120:	2040      	movs	r0, #64	; 0x40
 8007122:	f7fa fe98 	bl	8001e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8007126:	2040      	movs	r0, #64	; 0x40
 8007128:	f7fa feb1 	bl	8001e8e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800712c:	2200      	movs	r2, #0
 800712e:	2100      	movs	r1, #0
 8007130:	2041      	movs	r0, #65	; 0x41
 8007132:	f7fa fe90 	bl	8001e56 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8007136:	2041      	movs	r0, #65	; 0x41
 8007138:	f7fa fea9 	bl	8001e8e <HAL_NVIC_EnableIRQ>
}
 800713c:	bf00      	nop
 800713e:	3728      	adds	r7, #40	; 0x28
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	40006400 	.word	0x40006400
 8007148:	200003e8 	.word	0x200003e8
 800714c:	40023800 	.word	0x40023800
 8007150:	40020000 	.word	0x40020000
 8007154:	40006800 	.word	0x40006800
 8007158:	40020400 	.word	0x40020400

0800715c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08a      	sub	sp, #40	; 0x28
 8007160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	4b40      	ldr	r3, [pc, #256]	; (8007268 <MX_GPIO_Init+0x10c>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <MX_GPIO_Init+0x10c>)
 800716c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007170:	6313      	str	r3, [r2, #48]	; 0x30
 8007172:	4b3d      	ldr	r3, [pc, #244]	; (8007268 <MX_GPIO_Init+0x10c>)
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	4b39      	ldr	r3, [pc, #228]	; (8007268 <MX_GPIO_Init+0x10c>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	4a38      	ldr	r2, [pc, #224]	; (8007268 <MX_GPIO_Init+0x10c>)
 8007188:	f043 0304 	orr.w	r3, r3, #4
 800718c:	6313      	str	r3, [r2, #48]	; 0x30
 800718e:	4b36      	ldr	r3, [pc, #216]	; (8007268 <MX_GPIO_Init+0x10c>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800719a:	2300      	movs	r3, #0
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	4b32      	ldr	r3, [pc, #200]	; (8007268 <MX_GPIO_Init+0x10c>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	4a31      	ldr	r2, [pc, #196]	; (8007268 <MX_GPIO_Init+0x10c>)
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	6313      	str	r3, [r2, #48]	; 0x30
 80071aa:	4b2f      	ldr	r3, [pc, #188]	; (8007268 <MX_GPIO_Init+0x10c>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	60bb      	str	r3, [r7, #8]
 80071b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b6:	2300      	movs	r3, #0
 80071b8:	607b      	str	r3, [r7, #4]
 80071ba:	4b2b      	ldr	r3, [pc, #172]	; (8007268 <MX_GPIO_Init+0x10c>)
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	4a2a      	ldr	r2, [pc, #168]	; (8007268 <MX_GPIO_Init+0x10c>)
 80071c0:	f043 0302 	orr.w	r3, r3, #2
 80071c4:	6313      	str	r3, [r2, #48]	; 0x30
 80071c6:	4b28      	ldr	r3, [pc, #160]	; (8007268 <MX_GPIO_Init+0x10c>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80071d2:	2200      	movs	r2, #0
 80071d4:	210f      	movs	r1, #15
 80071d6:	4825      	ldr	r0, [pc, #148]	; (800726c <MX_GPIO_Init+0x110>)
 80071d8:	f7fb f9dc 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80071dc:	2200      	movs	r2, #0
 80071de:	2110      	movs	r1, #16
 80071e0:	4823      	ldr	r0, [pc, #140]	; (8007270 <MX_GPIO_Init+0x114>)
 80071e2:	f7fb f9d7 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80071e6:	2200      	movs	r2, #0
 80071e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071ec:	4821      	ldr	r0, [pc, #132]	; (8007274 <MX_GPIO_Init+0x118>)
 80071ee:	f7fb f9d1 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80071f2:	230f      	movs	r3, #15
 80071f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071f6:	2301      	movs	r3, #1
 80071f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071fe:	2300      	movs	r3, #0
 8007200:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007202:	f107 0314 	add.w	r3, r7, #20
 8007206:	4619      	mov	r1, r3
 8007208:	4818      	ldr	r0, [pc, #96]	; (800726c <MX_GPIO_Init+0x110>)
 800720a:	f7fb f82f 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800720e:	2303      	movs	r3, #3
 8007210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007212:	2300      	movs	r3, #0
 8007214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007216:	2300      	movs	r3, #0
 8007218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800721a:	f107 0314 	add.w	r3, r7, #20
 800721e:	4619      	mov	r1, r3
 8007220:	4813      	ldr	r0, [pc, #76]	; (8007270 <MX_GPIO_Init+0x114>)
 8007222:	f7fb f823 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007226:	2310      	movs	r3, #16
 8007228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800722a:	2301      	movs	r3, #1
 800722c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007232:	2300      	movs	r3, #0
 8007234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007236:	f107 0314 	add.w	r3, r7, #20
 800723a:	4619      	mov	r1, r3
 800723c:	480c      	ldr	r0, [pc, #48]	; (8007270 <MX_GPIO_Init+0x114>)
 800723e:	f7fb f815 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007248:	2301      	movs	r3, #1
 800724a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800724c:	2300      	movs	r3, #0
 800724e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007250:	2300      	movs	r3, #0
 8007252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007254:	f107 0314 	add.w	r3, r7, #20
 8007258:	4619      	mov	r1, r3
 800725a:	4806      	ldr	r0, [pc, #24]	; (8007274 <MX_GPIO_Init+0x118>)
 800725c:	f7fb f806 	bl	800226c <HAL_GPIO_Init>

}
 8007260:	bf00      	nop
 8007262:	3728      	adds	r7, #40	; 0x28
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40023800 	.word	0x40023800
 800726c:	40020800 	.word	0x40020800
 8007270:	40020000 	.word	0x40020000
 8007274:	40020400 	.word	0x40020400

08007278 <HAL_SYSTICK_Callback>:
#include "Trajectory.h"

void SystemClock_Config(void);

void HAL_SYSTICK_Callback()
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
	static int i = 0;
	static int j = 0;
	if (j >= 40)
 800727c:	4b17      	ldr	r3, [pc, #92]	; (80072dc <HAL_SYSTICK_Callback+0x64>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b27      	cmp	r3, #39	; 0x27
 8007282:	dd15      	ble.n	80072b0 <HAL_SYSTICK_Callback+0x38>
	{
		ReadToInstructions();
 8007284:	f7ff fd30 	bl	8006ce8 <ReadToInstructions>
		if (ManipulatorMode == TRAJECTORY)
 8007288:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <HAL_SYSTICK_Callback+0x68>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b08      	cmp	r3, #8
 800728e:	d104      	bne.n	800729a <HAL_SYSTICK_Callback+0x22>
		{
			trajectory_generator(trajectory_number);
 8007290:	4b14      	ldr	r3, [pc, #80]	; (80072e4 <HAL_SYSTICK_Callback+0x6c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe ff9b 	bl	80061d0 <trajectory_generator>
		}
		if (ManipulatorMode > 3)
 800729a:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <HAL_SYSTICK_Callback+0x68>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d901      	bls.n	80072a6 <HAL_SYSTICK_Callback+0x2e>
		{
			CalculateInverseKinematics();
 80072a2:	f7fd f9b9 	bl	8004618 <CalculateInverseKinematics>
		}
		//SendGripper();
		SendInstructions();
 80072a6:	f7ff fc2b 	bl	8006b00 <SendInstructions>

		j = 0;
 80072aa:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <HAL_SYSTICK_Callback+0x64>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]
	}
	if (i >= 100)
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <HAL_SYSTICK_Callback+0x70>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b63      	cmp	r3, #99	; 0x63
 80072b6:	dd04      	ble.n	80072c2 <HAL_SYSTICK_Callback+0x4a>
	{
		SendGripper();
 80072b8:	f7ff fcf2 	bl	8006ca0 <SendGripper>
		i = 0;
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <HAL_SYSTICK_Callback+0x70>)
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
	}
	i++;
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <HAL_SYSTICK_Callback+0x70>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3301      	adds	r3, #1
 80072c8:	4a07      	ldr	r2, [pc, #28]	; (80072e8 <HAL_SYSTICK_Callback+0x70>)
 80072ca:	6013      	str	r3, [r2, #0]
	j++;
 80072cc:	4b03      	ldr	r3, [pc, #12]	; (80072dc <HAL_SYSTICK_Callback+0x64>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3301      	adds	r3, #1
 80072d2:	4a02      	ldr	r2, [pc, #8]	; (80072dc <HAL_SYSTICK_Callback+0x64>)
 80072d4:	6013      	str	r3, [r2, #0]
}
 80072d6:	bf00      	nop
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	200006fc 	.word	0x200006fc
 80072e0:	200000d8 	.word	0x200000d8
 80072e4:	200002e4 	.word	0x200002e4
 80072e8:	20000700 	.word	0x20000700

080072ec <main>:
		Error_Handler();
	}
}
volatile float test1[]={100,0,20};
int main(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0

  HAL_Init();
 80072f0:	f7f9 fdc8 	bl	8000e84 <HAL_Init>

  SystemClock_Config();
 80072f4:	f000 f84a 	bl	800738c <SystemClock_Config>
  InverseKinematicsInit();
 80072f8:	f7fd f932 	bl	8004560 <InverseKinematicsInit>
  MX_GPIO_Init();
 80072fc:	f7ff ff2e 	bl	800715c <MX_GPIO_Init>
  MX_CAN1_Init();
 8007300:	f7ff fd94 	bl	8006e2c <MX_CAN1_Init>
  MX_CAN2_Init();
 8007304:	f7ff fe08 	bl	8006f18 <MX_CAN2_Init>


  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8007308:	2200      	movs	r2, #0
 800730a:	2104      	movs	r1, #4
 800730c:	481a      	ldr	r0, [pc, #104]	; (8007378 <main+0x8c>)
 800730e:	f7fb f941 	bl	8002594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8007312:	2200      	movs	r2, #0
 8007314:	2108      	movs	r1, #8
 8007316:	4818      	ldr	r0, [pc, #96]	; (8007378 <main+0x8c>)
 8007318:	f7fb f93c 	bl	8002594 <HAL_GPIO_WritePin>
  ManipulatorMode=DISABLE;
 800731c:	4b17      	ldr	r3, [pc, #92]	; (800737c <main+0x90>)
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
  DisconnectDoF=NO;
 8007322:	4b17      	ldr	r3, [pc, #92]	; (8007380 <main+0x94>)
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
  CalculateInverseKinematics();
 8007328:	f7fd f976 	bl	8004618 <CalculateInverseKinematics>
  HAL_Delay(800);
 800732c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007330:	f7f9 fe1a 	bl	8000f68 <HAL_Delay>

	meas_angle.f[0]=0;
 8007334:	4b13      	ldr	r3, [pc, #76]	; (8007384 <main+0x98>)
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
	meas_angle.f[0]=0;
 800733c:	4b11      	ldr	r3, [pc, #68]	; (8007384 <main+0x98>)
 800733e:	f04f 0200 	mov.w	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
	meas_angle.f[0]=0;
 8007344:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <main+0x98>)
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
	meas_angle.f[0]=0;
 800734c:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <main+0x98>)
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
	meas_angle.f[0]=0;
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <main+0x98>)
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	601a      	str	r2, [r3, #0]
	meas_angle.f[0]=0;
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <main+0x98>)
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(200);
 8007364:	20c8      	movs	r0, #200	; 0xc8
 8007366:	f7f9 fdff 	bl	8000f68 <HAL_Delay>
  //ManipulatorMode=HOLD;
  //newmode=2;
//  MX_IWDG_Init();
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 800736a:	4807      	ldr	r0, [pc, #28]	; (8007388 <main+0x9c>)
 800736c:	f7fb f92b 	bl	80025c6 <HAL_IWDG_Refresh>
	  HAL_Delay(100);
 8007370:	2064      	movs	r0, #100	; 0x64
 8007372:	f7f9 fdf9 	bl	8000f68 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8007376:	e7f8      	b.n	800736a <main+0x7e>
 8007378:	40020800 	.word	0x40020800
 800737c:	200000d8 	.word	0x200000d8
 8007380:	200000d9 	.word	0x200000d9
 8007384:	2000010c 	.word	0x2000010c
 8007388:	200006f0 	.word	0x200006f0

0800738c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b0ac      	sub	sp, #176	; 0xb0
 8007390:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007392:	2300      	movs	r3, #0
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	4b41      	ldr	r3, [pc, #260]	; (800749c <SystemClock_Config+0x110>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	4a40      	ldr	r2, [pc, #256]	; (800749c <SystemClock_Config+0x110>)
 800739c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a0:	6413      	str	r3, [r2, #64]	; 0x40
 80073a2:	4b3e      	ldr	r3, [pc, #248]	; (800749c <SystemClock_Config+0x110>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	4b3b      	ldr	r3, [pc, #236]	; (80074a0 <SystemClock_Config+0x114>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80073ba:	4a39      	ldr	r2, [pc, #228]	; (80074a0 <SystemClock_Config+0x114>)
 80073bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	4b37      	ldr	r3, [pc, #220]	; (80074a0 <SystemClock_Config+0x114>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073ca:	607b      	str	r3, [r7, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80073ce:	2301      	movs	r3, #1
 80073d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80073d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073da:	2302      	movs	r3, #2
 80073dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80073e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80073e8:	2304      	movs	r3, #4
 80073ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80073ee:	235a      	movs	r3, #90	; 0x5a
 80073f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80073f4:	2302      	movs	r3, #2
 80073f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80073fa:	2302      	movs	r3, #2
 80073fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007400:	2302      	movs	r3, #2
 8007402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007406:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800740a:	4618      	mov	r0, r3
 800740c:	f7fb ff34 	bl	8003278 <HAL_RCC_OscConfig>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <SystemClock_Config+0x92>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007416:	2189      	movs	r1, #137	; 0x89
 8007418:	4822      	ldr	r0, [pc, #136]	; (80074a4 <SystemClock_Config+0x118>)
 800741a:	f000 f847 	bl	80074ac <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800741e:	230f      	movs	r3, #15
 8007420:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007422:	2302      	movs	r3, #2
 8007424:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007426:	2300      	movs	r3, #0
 8007428:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800742a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800742e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007430:	2300      	movs	r3, #0
 8007432:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007434:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007438:	2102      	movs	r1, #2
 800743a:	4618      	mov	r0, r3
 800743c:	f7fb f8d4 	bl	80025e8 <HAL_RCC_ClockConfig>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <SystemClock_Config+0xc2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007446:	2197      	movs	r1, #151	; 0x97
 8007448:	4816      	ldr	r0, [pc, #88]	; (80074a4 <SystemClock_Config+0x118>)
 800744a:	f000 f82f 	bl	80074ac <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 800744e:	2380      	movs	r3, #128	; 0x80
 8007450:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8007452:	2300      	movs	r3, #0
 8007454:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007456:	f107 030c 	add.w	r3, r7, #12
 800745a:	4618      	mov	r0, r3
 800745c:	f7fb f9b2 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <SystemClock_Config+0xe2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007466:	219e      	movs	r1, #158	; 0x9e
 8007468:	480e      	ldr	r0, [pc, #56]	; (80074a4 <SystemClock_Config+0x118>)
 800746a:	f000 f81f 	bl	80074ac <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800746e:	f7fb f99d 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 8007472:	4603      	mov	r3, r0
 8007474:	4a0c      	ldr	r2, [pc, #48]	; (80074a8 <SystemClock_Config+0x11c>)
 8007476:	fba2 2303 	umull	r2, r3, r2, r3
 800747a:	099b      	lsrs	r3, r3, #6
 800747c:	4618      	mov	r0, r3
 800747e:	f7fa fd1a 	bl	8001eb6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007482:	2004      	movs	r0, #4
 8007484:	f7fa fd24 	bl	8001ed0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007488:	2200      	movs	r2, #0
 800748a:	2100      	movs	r1, #0
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	f7fa fce1 	bl	8001e56 <HAL_NVIC_SetPriority>
}
 8007494:	bf00      	nop
 8007496:	37b0      	adds	r7, #176	; 0xb0
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40023800 	.word	0x40023800
 80074a0:	40007000 	.word	0x40007000
 80074a4:	08009ff0 	.word	0x08009ff0
 80074a8:	10624dd3 	.word	0x10624dd3

080074ac <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80074b6:	e7fe      	b.n	80074b6 <_Error_Handler+0xa>

080074b8 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	817b      	strh	r3, [r7, #10]
 80074c6:	4613      	mov	r3, r2
 80074c8:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	897a      	ldrh	r2, [r7, #10]
 80074ce:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	893a      	ldrh	r2, [r7, #8]
 80074d4:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	605a      	str	r2, [r3, #4]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <arm_mat_mult_f32>:
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b095      	sub	sp, #84	; 0x54
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	885b      	ldrh	r3, [r3, #2]
 8007516:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	885b      	ldrh	r3, [r3, #2]
 800751c:	84fb      	strh	r3, [r7, #38]	; 0x26
#ifndef ARM_MATH_CM0

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
 800751e:	2300      	movs	r3, #0
 8007520:	873b      	strh	r3, [r7, #56]	; 0x38
 8007522:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007524:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8007526:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800752c:	4413      	add	r3, r2
 800752e:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8007530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007532:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0u;
 800753a:	2300      	movs	r3, #0
 800753c:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8007544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007546:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2u;
 8007548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while(colCnt > 0u)
 800754e:	e061      	b.n	8007614 <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8007550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8007556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800755c:	4413      	add	r3, r2
 800755e:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8007560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8007566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 800756c:	ed97 7a07 	vldr	s14, [r7, #28]
 8007570:	edd7 7a08 	vldr	s15, [r7, #32]
 8007574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007578:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800757c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007580:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8007584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 800758a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007590:	4413      	add	r3, r2
 8007592:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8007594:	ed97 7a06 	vldr	s14, [r7, #24]
 8007598:	edd7 7a05 	vldr	s15, [r7, #20]
 800759c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80075a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 80075ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 80075b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075b8:	4413      	add	r3, r2
 80075ba:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 80075bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 80075c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 80075c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80075cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80075d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80075d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075dc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 80075e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 80075e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ec:	4413      	add	r3, r2
 80075ee:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 80075f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80075f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80075f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007604:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4u;
 8007608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760a:	3310      	adds	r3, #16
 800760c:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 800760e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007610:	3b01      	subs	r3, #1
 8007612:	867b      	strh	r3, [r7, #50]	; 0x32
        while(colCnt > 0u)
 8007614:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d19a      	bne.n	8007550 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4u;
 800761a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800761c:	f003 0303 	and.w	r3, r3, #3
 8007620:	867b      	strh	r3, [r7, #50]	; 0x32

        while(colCnt > 0u)
 8007622:	e017      	b.n	8007654 <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8007624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	64fa      	str	r2, [r7, #76]	; 0x4c
 800762a:	ed93 7a00 	vldr	s14, [r3]
 800762e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007630:	edd3 7a00 	vldr	s15, [r3]
 8007634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007638:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800763c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007640:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8007644:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764a:	4413      	add	r3, r2
 800764c:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 800764e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007650:	3b01      	subs	r3, #1
 8007652:	867b      	strh	r3, [r7, #50]	; 0x32
        while(colCnt > 0u)
 8007654:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e4      	bne.n	8007624 <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 800765a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765c:	1d1a      	adds	r2, r3, #4
 800765e:	643a      	str	r2, [r7, #64]	; 0x40
 8007660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007662:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8007664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007666:	3301      	adds	r3, #1
 8007668:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8007676:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007678:	3b01      	subs	r3, #1
 800767a:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while(col > 0u);
 800767c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800767e:	2b00      	cmp	r3, #0
 8007680:	f47f af5d 	bne.w	800753e <arm_mat_mult_f32+0x56>
      } while(col > 0u);

#endif /* #ifndef ARM_MATH_CM0 */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8007684:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007686:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007688:	4413      	add	r3, r2
 800768a:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 800768c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007692:	4413      	add	r3, r2
 8007694:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8007696:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007698:	3b01      	subs	r3, #1
 800769a:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while(row > 0u);
 800769c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f47f af41 	bne.w	8007526 <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 80076aa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3754      	adds	r7, #84	; 0x54
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <arm_mat_trans_f32>:

arm_status arm_mat_trans_f32(
      const arm_matrix_instance_f32 * pSrc,
      arm_matrix_instance_f32 * pDst)
    {
 80076ba:	b480      	push	{r7}
 80076bc:	b08b      	sub	sp, #44	; 0x2c
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
      float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
      float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	617b      	str	r3, [r7, #20]
      float32_t *px;                                 /* Temporary output data matrix pointer */
      uint16_t nRows = pSrc->numRows;                /* number of rows */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	827b      	strh	r3, [r7, #18]
      uint16_t nColumns = pSrc->numCols;             /* number of columns */
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	885b      	ldrh	r3, [r3, #2]
 80076da:	823b      	strh	r3, [r7, #16]

    #ifndef ARM_MATH_CM0

      /* Run the below code for Cortex-M4 and Cortex-M3 */

      uint16_t blkCnt, i = 0u, row = nRows;          /* loop counters */
 80076dc:	2300      	movs	r3, #0
 80076de:	83bb      	strh	r3, [r7, #28]
 80076e0:	8a7b      	ldrh	r3, [r7, #18]
 80076e2:	837b      	strh	r3, [r7, #26]
        /* Matrix transpose by exchanging the rows with columns */
        /* row loop     */
        do
        {
          /* Loop Unrolling */
          blkCnt = nColumns >> 2;
 80076e4:	8a3b      	ldrh	r3, [r7, #16]
 80076e6:	089b      	lsrs	r3, r3, #2
 80076e8:	83fb      	strh	r3, [r7, #30]

          /* The pointer px is set to starting address of the column being processed */
          px = pOut + i;
 80076ea:	8bbb      	ldrh	r3, [r7, #28]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4413      	add	r3, r2
 80076f2:	623b      	str	r3, [r7, #32]

          /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
           ** a second loop below computes the remaining 1 to 3 samples. */
          while(blkCnt > 0u)        /* column loop */
 80076f4:	e02e      	b.n	8007754 <arm_mat_trans_f32+0x9a>
          {
            /* Read and store the input element in the destination */
            *px = *pIn++;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	627a      	str	r2, [r7, #36]	; 0x24
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	601a      	str	r2, [r3, #0]

            /* Update the pointer px to point to the next row of the transposed matrix */
            px += nRows;
 8007702:	8a7b      	ldrh	r3, [r7, #18]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	6a3a      	ldr	r2, [r7, #32]
 8007708:	4413      	add	r3, r2
 800770a:	623b      	str	r3, [r7, #32]

            /* Read and store the input element in the destination */
            *px = *pIn++;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	627a      	str	r2, [r7, #36]	; 0x24
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	601a      	str	r2, [r3, #0]

            /* Update the pointer px to point to the next row of the transposed matrix */
            px += nRows;
 8007718:	8a7b      	ldrh	r3, [r7, #18]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	6a3a      	ldr	r2, [r7, #32]
 800771e:	4413      	add	r3, r2
 8007720:	623b      	str	r3, [r7, #32]

            /* Read and store the input element in the destination */
            *px = *pIn++;
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	1d1a      	adds	r2, r3, #4
 8007726:	627a      	str	r2, [r7, #36]	; 0x24
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	601a      	str	r2, [r3, #0]

            /* Update the pointer px to point to the next row of the transposed matrix */
            px += nRows;
 800772e:	8a7b      	ldrh	r3, [r7, #18]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	6a3a      	ldr	r2, [r7, #32]
 8007734:	4413      	add	r3, r2
 8007736:	623b      	str	r3, [r7, #32]

            /* Read and store the input element in the destination */
            *px = *pIn++;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	627a      	str	r2, [r7, #36]	; 0x24
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	601a      	str	r2, [r3, #0]

            /* Update the pointer px to point to the next row of the transposed matrix */
            px += nRows;
 8007744:	8a7b      	ldrh	r3, [r7, #18]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	4413      	add	r3, r2
 800774c:	623b      	str	r3, [r7, #32]

            /* Decrement the column loop counter */
            blkCnt--;
 800774e:	8bfb      	ldrh	r3, [r7, #30]
 8007750:	3b01      	subs	r3, #1
 8007752:	83fb      	strh	r3, [r7, #30]
          while(blkCnt > 0u)        /* column loop */
 8007754:	8bfb      	ldrh	r3, [r7, #30]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1cd      	bne.n	80076f6 <arm_mat_trans_f32+0x3c>
          }

          /* Perform matrix transpose for last 3 samples here. */
          blkCnt = nColumns % 0x4u;
 800775a:	8a3b      	ldrh	r3, [r7, #16]
 800775c:	f003 0303 	and.w	r3, r3, #3
 8007760:	83fb      	strh	r3, [r7, #30]

          while(blkCnt > 0u)
 8007762:	e00d      	b.n	8007780 <arm_mat_trans_f32+0xc6>
          {
            /* Read and store the input element in the destination */
            *px = *pIn++;
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	1d1a      	adds	r2, r3, #4
 8007768:	627a      	str	r2, [r7, #36]	; 0x24
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	601a      	str	r2, [r3, #0]

            /* Update the pointer px to point to the next row of the transposed matrix */
            px += nRows;
 8007770:	8a7b      	ldrh	r3, [r7, #18]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	6a3a      	ldr	r2, [r7, #32]
 8007776:	4413      	add	r3, r2
 8007778:	623b      	str	r3, [r7, #32]

            /* Decrement the column loop counter */
            blkCnt--;
 800777a:	8bfb      	ldrh	r3, [r7, #30]
 800777c:	3b01      	subs	r3, #1
 800777e:	83fb      	strh	r3, [r7, #30]
          while(blkCnt > 0u)
 8007780:	8bfb      	ldrh	r3, [r7, #30]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1ee      	bne.n	8007764 <arm_mat_trans_f32+0xaa>
            col--;
          }

    #endif /* #ifndef ARM_MATH_CM0 */

          i++;
 8007786:	8bbb      	ldrh	r3, [r7, #28]
 8007788:	3301      	adds	r3, #1
 800778a:	83bb      	strh	r3, [r7, #28]

          /* Decrement the row loop counter */
          row--;
 800778c:	8b7b      	ldrh	r3, [r7, #26]
 800778e:	3b01      	subs	r3, #1
 8007790:	837b      	strh	r3, [r7, #26]

        } while(row > 0u);          /* row loop end  */
 8007792:	8b7b      	ldrh	r3, [r7, #26]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1a5      	bne.n	80076e4 <arm_mat_trans_f32+0x2a>

        /* Set status as ARM_MATH_SUCCESS */
        status = ARM_MATH_SUCCESS;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]
      }

      /* Return to application */
      return (status);
 800779c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
 80077a0:	4618      	mov	r0, r3
 80077a2:	372c      	adds	r7, #44	; 0x2c
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077b2:	2300      	movs	r3, #0
 80077b4:	607b      	str	r3, [r7, #4]
 80077b6:	4b25      	ldr	r3, [pc, #148]	; (800784c <HAL_MspInit+0xa0>)
 80077b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ba:	4a24      	ldr	r2, [pc, #144]	; (800784c <HAL_MspInit+0xa0>)
 80077bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077c0:	6453      	str	r3, [r2, #68]	; 0x44
 80077c2:	4b22      	ldr	r3, [pc, #136]	; (800784c <HAL_MspInit+0xa0>)
 80077c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077ce:	2300      	movs	r3, #0
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	4b1e      	ldr	r3, [pc, #120]	; (800784c <HAL_MspInit+0xa0>)
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	4a1d      	ldr	r2, [pc, #116]	; (800784c <HAL_MspInit+0xa0>)
 80077d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077dc:	6413      	str	r3, [r2, #64]	; 0x40
 80077de:	4b1b      	ldr	r3, [pc, #108]	; (800784c <HAL_MspInit+0xa0>)
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e6:	603b      	str	r3, [r7, #0]
 80077e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077ea:	2003      	movs	r0, #3
 80077ec:	f7fa fb28 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80077f0:	2200      	movs	r2, #0
 80077f2:	2100      	movs	r1, #0
 80077f4:	f06f 000b 	mvn.w	r0, #11
 80077f8:	f7fa fb2d 	bl	8001e56 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80077fc:	2200      	movs	r2, #0
 80077fe:	2100      	movs	r1, #0
 8007800:	f06f 000a 	mvn.w	r0, #10
 8007804:	f7fa fb27 	bl	8001e56 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8007808:	2200      	movs	r2, #0
 800780a:	2100      	movs	r1, #0
 800780c:	f06f 0009 	mvn.w	r0, #9
 8007810:	f7fa fb21 	bl	8001e56 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8007814:	2200      	movs	r2, #0
 8007816:	2100      	movs	r1, #0
 8007818:	f06f 0004 	mvn.w	r0, #4
 800781c:	f7fa fb1b 	bl	8001e56 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8007820:	2200      	movs	r2, #0
 8007822:	2100      	movs	r1, #0
 8007824:	f06f 0003 	mvn.w	r0, #3
 8007828:	f7fa fb15 	bl	8001e56 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800782c:	2200      	movs	r2, #0
 800782e:	2100      	movs	r1, #0
 8007830:	f06f 0001 	mvn.w	r0, #1
 8007834:	f7fa fb0f 	bl	8001e56 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007838:	2200      	movs	r2, #0
 800783a:	2100      	movs	r1, #0
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	f7fa fb09 	bl	8001e56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40023800 	.word	0x40023800

08007850 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007854:	bf00      	nop
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800785e:	b480      	push	{r7}
 8007860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007862:	e7fe      	b.n	8007862 <HardFault_Handler+0x4>

08007864 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007868:	e7fe      	b.n	8007868 <MemManage_Handler+0x4>

0800786a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800786a:	b480      	push	{r7}
 800786c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800786e:	e7fe      	b.n	800786e <BusFault_Handler+0x4>

08007870 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007874:	e7fe      	b.n	8007874 <UsageFault_Handler+0x4>

08007876 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8007876:	b480      	push	{r7}
 8007878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800787a:	bf00      	nop
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007888:	bf00      	nop
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8007892:	b480      	push	{r7}
 8007894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007896:	bf00      	nop
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078a4:	f7f9 fb40 	bl	8000f28 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80078a8:	f7fa fb2e 	bl	8001f08 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078ac:	bf00      	nop
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <DMA1_Stream0_IRQHandler>:

/**
* @brief This function handles DMA1 stream0 global interrupt.
*/
void DMA1_Stream0_IRQHandler(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80078b4:	4802      	ldr	r0, [pc, #8]	; (80078c0 <DMA1_Stream0_IRQHandler+0x10>)
 80078b6:	f7fa fb4f 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80078ba:	bf00      	nop
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200004b0 	.word	0x200004b0

080078c4 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80078c8:	4802      	ldr	r0, [pc, #8]	; (80078d4 <DMA1_Stream1_IRQHandler+0x10>)
 80078ca:	f7fa fb45 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80078ce:	bf00      	nop
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20000630 	.word	0x20000630

080078d8 <DMA1_Stream2_IRQHandler>:

/**
* @brief This function handles DMA1 stream2 global interrupt.
*/
void DMA1_Stream2_IRQHandler(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_rx);
 80078dc:	4802      	ldr	r0, [pc, #8]	; (80078e8 <DMA1_Stream2_IRQHandler+0x10>)
 80078de:	f7fa fb3b 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80078e2:	bf00      	nop
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	200003f0 	.word	0x200003f0

080078ec <DMA1_Stream3_IRQHandler>:

/**
* @brief This function handles DMA1 stream3 global interrupt.
*/
void DMA1_Stream3_IRQHandler(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80078f0:	4802      	ldr	r0, [pc, #8]	; (80078fc <DMA1_Stream3_IRQHandler+0x10>)
 80078f2:	f7fa fb31 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000570 	.word	0x20000570

08007900 <DMA1_Stream4_IRQHandler>:

/**
* @brief This function handles DMA1 stream4 global interrupt.
*/
void DMA1_Stream4_IRQHandler(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8007904:	4802      	ldr	r0, [pc, #8]	; (8007910 <DMA1_Stream4_IRQHandler+0x10>)
 8007906:	f7fa fb27 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800790a:	bf00      	nop
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000690 	.word	0x20000690

08007914 <DMA1_Stream5_IRQHandler>:

/**
* @brief This function handles DMA1 stream5 global interrupt.
*/
void DMA1_Stream5_IRQHandler(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_tx);
 8007918:	4802      	ldr	r0, [pc, #8]	; (8007924 <DMA1_Stream5_IRQHandler+0x10>)
 800791a:	f7fa fb1d 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800791e:	bf00      	nop
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000450 	.word	0x20000450

08007928 <DMA1_Stream6_IRQHandler>:

/**
* @brief This function handles DMA1 stream6 global interrupt.
*/
void DMA1_Stream6_IRQHandler(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800792c:	4802      	ldr	r0, [pc, #8]	; (8007938 <DMA1_Stream6_IRQHandler+0x10>)
 800792e:	f7fa fb13 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007932:	bf00      	nop
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20000510 	.word	0x20000510

0800793c <CAN1_TX_IRQHandler>:

/**
* @brief This function handles CAN1 TX interrupt.
*/
void CAN1_TX_IRQHandler(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007940:	4802      	ldr	r0, [pc, #8]	; (800794c <CAN1_TX_IRQHandler+0x10>)
 8007942:	f7f9 ff74 	bl	800182e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007946:	bf00      	nop
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20000398 	.word	0x20000398

08007950 <CAN1_RX0_IRQHandler>:

/**
* @brief This function handles CAN1 RX0 interrupt.
*/
void CAN1_RX0_IRQHandler(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007954:	4802      	ldr	r0, [pc, #8]	; (8007960 <CAN1_RX0_IRQHandler+0x10>)
 8007956:	f7f9 ff6a 	bl	800182e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800795a:	bf00      	nop
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000398 	.word	0x20000398

08007964 <CAN1_RX1_IRQHandler>:

/**
* @brief This function handles CAN1 RX1 interrupt.
*/
void CAN1_RX1_IRQHandler(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007968:	4802      	ldr	r0, [pc, #8]	; (8007974 <CAN1_RX1_IRQHandler+0x10>)
 800796a:	f7f9 ff60 	bl	800182e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800796e:	bf00      	nop
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000398 	.word	0x20000398

08007978 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800797c:	4802      	ldr	r0, [pc, #8]	; (8007988 <USART1_IRQHandler+0x10>)
 800797e:	f7fb fed5 	bl	800372c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007982:	bf00      	nop
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200007c4 	.word	0x200007c4

0800798c <DMA1_Stream7_IRQHandler>:

/**
* @brief This function handles DMA1 stream7 global interrupt.
*/
void DMA1_Stream7_IRQHandler(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8007990:	4802      	ldr	r0, [pc, #8]	; (800799c <DMA1_Stream7_IRQHandler+0x10>)
 8007992:	f7fa fae1 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8007996:	bf00      	nop
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	200005d0 	.word	0x200005d0

080079a0 <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80079a4:	4802      	ldr	r0, [pc, #8]	; (80079b0 <DMA2_Stream0_IRQHandler+0x10>)
 80079a6:	f7fa fad7 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80079aa:	bf00      	nop
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000704 	.word	0x20000704

080079b4 <DMA2_Stream2_IRQHandler>:

/**
* @brief This function handles DMA2 stream2 global interrupt.
*/
void DMA2_Stream2_IRQHandler(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80079b8:	4802      	ldr	r0, [pc, #8]	; (80079c4 <DMA2_Stream2_IRQHandler+0x10>)
 80079ba:	f7fa facd 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80079be:	bf00      	nop
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000804 	.word	0x20000804

080079c8 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80079cc:	4802      	ldr	r0, [pc, #8]	; (80079d8 <DMA2_Stream3_IRQHandler+0x10>)
 80079ce:	f7fa fac3 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80079d2:	bf00      	nop
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20000764 	.word	0x20000764

080079dc <CAN2_TX_IRQHandler>:

/**
* @brief This function handles CAN2 TX interrupt.
*/
void CAN2_TX_IRQHandler(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80079e0:	4802      	ldr	r0, [pc, #8]	; (80079ec <CAN2_TX_IRQHandler+0x10>)
 80079e2:	f7f9 ff24 	bl	800182e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	200003c0 	.word	0x200003c0

080079f0 <CAN2_RX0_IRQHandler>:

/**
* @brief This function handles CAN2 RX0 interrupt.
*/
void CAN2_RX0_IRQHandler(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80079f4:	4802      	ldr	r0, [pc, #8]	; (8007a00 <CAN2_RX0_IRQHandler+0x10>)
 80079f6:	f7f9 ff1a 	bl	800182e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80079fa:	bf00      	nop
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	200003c0 	.word	0x200003c0

08007a04 <CAN2_RX1_IRQHandler>:

/**
* @brief This function handles CAN2 RX1 interrupt.
*/
void CAN2_RX1_IRQHandler(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007a08:	4802      	ldr	r0, [pc, #8]	; (8007a14 <CAN2_RX1_IRQHandler+0x10>)
 8007a0a:	f7f9 ff10 	bl	800182e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8007a0e:	bf00      	nop
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	200003c0 	.word	0x200003c0

08007a18 <DMA2_Stream7_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream7_IRQHandler(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007a1c:	4802      	ldr	r0, [pc, #8]	; (8007a28 <DMA2_Stream7_IRQHandler+0x10>)
 8007a1e:	f7fa fa9b 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000864 	.word	0x20000864

08007a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a30:	4b16      	ldr	r3, [pc, #88]	; (8007a8c <SystemInit+0x60>)
 8007a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a36:	4a15      	ldr	r2, [pc, #84]	; (8007a8c <SystemInit+0x60>)
 8007a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007a40:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <SystemInit+0x64>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a12      	ldr	r2, [pc, #72]	; (8007a90 <SystemInit+0x64>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007a4c:	4b10      	ldr	r3, [pc, #64]	; (8007a90 <SystemInit+0x64>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007a52:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <SystemInit+0x64>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	; (8007a90 <SystemInit+0x64>)
 8007a58:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007a62:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <SystemInit+0x64>)
 8007a64:	4a0b      	ldr	r2, [pc, #44]	; (8007a94 <SystemInit+0x68>)
 8007a66:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007a68:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <SystemInit+0x64>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a08      	ldr	r2, [pc, #32]	; (8007a90 <SystemInit+0x64>)
 8007a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007a74:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <SystemInit+0x64>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a7a:	4b04      	ldr	r3, [pc, #16]	; (8007a8c <SystemInit+0x60>)
 8007a7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a80:	609a      	str	r2, [r3, #8]
#endif
}
 8007a82:	bf00      	nop
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	e000ed00 	.word	0xe000ed00
 8007a90:	40023800 	.word	0x40023800
 8007a94:	24003010 	.word	0x24003010

08007a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007a98:	480d      	ldr	r0, [pc, #52]	; (8007ad0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007a9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007a9c:	f7ff ffc6 	bl	8007a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007aa0:	480c      	ldr	r0, [pc, #48]	; (8007ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8007aa2:	490d      	ldr	r1, [pc, #52]	; (8007ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007aa4:	4a0d      	ldr	r2, [pc, #52]	; (8007adc <LoopForever+0xe>)
  movs r3, #0
 8007aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007aa8:	e002      	b.n	8007ab0 <LoopCopyDataInit>

08007aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007aae:	3304      	adds	r3, #4

08007ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ab4:	d3f9      	bcc.n	8007aaa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ab6:	4a0a      	ldr	r2, [pc, #40]	; (8007ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007ab8:	4c0a      	ldr	r4, [pc, #40]	; (8007ae4 <LoopForever+0x16>)
  movs r3, #0
 8007aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007abc:	e001      	b.n	8007ac2 <LoopFillZerobss>

08007abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ac0:	3204      	adds	r2, #4

08007ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ac4:	d3fb      	bcc.n	8007abe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007ac6:	f000 f817 	bl	8007af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007aca:	f7ff fc0f 	bl	80072ec <main>

08007ace <LoopForever>:

LoopForever:
    b LoopForever
 8007ace:	e7fe      	b.n	8007ace <LoopForever>
  ldr   r0, =_estack
 8007ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ad8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8007adc:	0800a4e8 	.word	0x0800a4e8
  ldr r2, =_sbss
 8007ae0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8007ae4:	200008c4 	.word	0x200008c4

08007ae8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007ae8:	e7fe      	b.n	8007ae8 <ADC_IRQHandler>
	...

08007aec <__errno>:
 8007aec:	4b01      	ldr	r3, [pc, #4]	; (8007af4 <__errno+0x8>)
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20000018 	.word	0x20000018

08007af8 <__libc_init_array>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	4d0d      	ldr	r5, [pc, #52]	; (8007b30 <__libc_init_array+0x38>)
 8007afc:	4c0d      	ldr	r4, [pc, #52]	; (8007b34 <__libc_init_array+0x3c>)
 8007afe:	1b64      	subs	r4, r4, r5
 8007b00:	10a4      	asrs	r4, r4, #2
 8007b02:	2600      	movs	r6, #0
 8007b04:	42a6      	cmp	r6, r4
 8007b06:	d109      	bne.n	8007b1c <__libc_init_array+0x24>
 8007b08:	4d0b      	ldr	r5, [pc, #44]	; (8007b38 <__libc_init_array+0x40>)
 8007b0a:	4c0c      	ldr	r4, [pc, #48]	; (8007b3c <__libc_init_array+0x44>)
 8007b0c:	f002 fa5a 	bl	8009fc4 <_init>
 8007b10:	1b64      	subs	r4, r4, r5
 8007b12:	10a4      	asrs	r4, r4, #2
 8007b14:	2600      	movs	r6, #0
 8007b16:	42a6      	cmp	r6, r4
 8007b18:	d105      	bne.n	8007b26 <__libc_init_array+0x2e>
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b20:	4798      	blx	r3
 8007b22:	3601      	adds	r6, #1
 8007b24:	e7ee      	b.n	8007b04 <__libc_init_array+0xc>
 8007b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2a:	4798      	blx	r3
 8007b2c:	3601      	adds	r6, #1
 8007b2e:	e7f2      	b.n	8007b16 <__libc_init_array+0x1e>
 8007b30:	0800a4e0 	.word	0x0800a4e0
 8007b34:	0800a4e0 	.word	0x0800a4e0
 8007b38:	0800a4e0 	.word	0x0800a4e0
 8007b3c:	0800a4e4 	.word	0x0800a4e4

08007b40 <cosf>:
 8007b40:	ee10 3a10 	vmov	r3, s0
 8007b44:	b507      	push	{r0, r1, r2, lr}
 8007b46:	4a1e      	ldr	r2, [pc, #120]	; (8007bc0 <cosf+0x80>)
 8007b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	dc06      	bgt.n	8007b5e <cosf+0x1e>
 8007b50:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8007bc4 <cosf+0x84>
 8007b54:	b003      	add	sp, #12
 8007b56:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b5a:	f001 bb9d 	b.w	8009298 <__kernel_cosf>
 8007b5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007b62:	db04      	blt.n	8007b6e <cosf+0x2e>
 8007b64:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007b68:	b003      	add	sp, #12
 8007b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b6e:	4668      	mov	r0, sp
 8007b70:	f001 fa52 	bl	8009018 <__ieee754_rem_pio2f>
 8007b74:	f000 0003 	and.w	r0, r0, #3
 8007b78:	2801      	cmp	r0, #1
 8007b7a:	d009      	beq.n	8007b90 <cosf+0x50>
 8007b7c:	2802      	cmp	r0, #2
 8007b7e:	d010      	beq.n	8007ba2 <cosf+0x62>
 8007b80:	b9b0      	cbnz	r0, 8007bb0 <cosf+0x70>
 8007b82:	eddd 0a01 	vldr	s1, [sp, #4]
 8007b86:	ed9d 0a00 	vldr	s0, [sp]
 8007b8a:	f001 fb85 	bl	8009298 <__kernel_cosf>
 8007b8e:	e7eb      	b.n	8007b68 <cosf+0x28>
 8007b90:	eddd 0a01 	vldr	s1, [sp, #4]
 8007b94:	ed9d 0a00 	vldr	s0, [sp]
 8007b98:	f001 fe54 	bl	8009844 <__kernel_sinf>
 8007b9c:	eeb1 0a40 	vneg.f32	s0, s0
 8007ba0:	e7e2      	b.n	8007b68 <cosf+0x28>
 8007ba2:	eddd 0a01 	vldr	s1, [sp, #4]
 8007ba6:	ed9d 0a00 	vldr	s0, [sp]
 8007baa:	f001 fb75 	bl	8009298 <__kernel_cosf>
 8007bae:	e7f5      	b.n	8007b9c <cosf+0x5c>
 8007bb0:	eddd 0a01 	vldr	s1, [sp, #4]
 8007bb4:	ed9d 0a00 	vldr	s0, [sp]
 8007bb8:	2001      	movs	r0, #1
 8007bba:	f001 fe43 	bl	8009844 <__kernel_sinf>
 8007bbe:	e7d3      	b.n	8007b68 <cosf+0x28>
 8007bc0:	3f490fd8 	.word	0x3f490fd8
 8007bc4:	00000000 	.word	0x00000000

08007bc8 <sinf>:
 8007bc8:	ee10 3a10 	vmov	r3, s0
 8007bcc:	b507      	push	{r0, r1, r2, lr}
 8007bce:	4a1f      	ldr	r2, [pc, #124]	; (8007c4c <sinf+0x84>)
 8007bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	dc07      	bgt.n	8007be8 <sinf+0x20>
 8007bd8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8007c50 <sinf+0x88>
 8007bdc:	2000      	movs	r0, #0
 8007bde:	b003      	add	sp, #12
 8007be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be4:	f001 be2e 	b.w	8009844 <__kernel_sinf>
 8007be8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007bec:	db04      	blt.n	8007bf8 <sinf+0x30>
 8007bee:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007bf2:	b003      	add	sp, #12
 8007bf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bf8:	4668      	mov	r0, sp
 8007bfa:	f001 fa0d 	bl	8009018 <__ieee754_rem_pio2f>
 8007bfe:	f000 0003 	and.w	r0, r0, #3
 8007c02:	2801      	cmp	r0, #1
 8007c04:	d00a      	beq.n	8007c1c <sinf+0x54>
 8007c06:	2802      	cmp	r0, #2
 8007c08:	d00f      	beq.n	8007c2a <sinf+0x62>
 8007c0a:	b9c0      	cbnz	r0, 8007c3e <sinf+0x76>
 8007c0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c10:	ed9d 0a00 	vldr	s0, [sp]
 8007c14:	2001      	movs	r0, #1
 8007c16:	f001 fe15 	bl	8009844 <__kernel_sinf>
 8007c1a:	e7ea      	b.n	8007bf2 <sinf+0x2a>
 8007c1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c20:	ed9d 0a00 	vldr	s0, [sp]
 8007c24:	f001 fb38 	bl	8009298 <__kernel_cosf>
 8007c28:	e7e3      	b.n	8007bf2 <sinf+0x2a>
 8007c2a:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c2e:	ed9d 0a00 	vldr	s0, [sp]
 8007c32:	2001      	movs	r0, #1
 8007c34:	f001 fe06 	bl	8009844 <__kernel_sinf>
 8007c38:	eeb1 0a40 	vneg.f32	s0, s0
 8007c3c:	e7d9      	b.n	8007bf2 <sinf+0x2a>
 8007c3e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c42:	ed9d 0a00 	vldr	s0, [sp]
 8007c46:	f001 fb27 	bl	8009298 <__kernel_cosf>
 8007c4a:	e7f5      	b.n	8007c38 <sinf+0x70>
 8007c4c:	3f490fd8 	.word	0x3f490fd8
 8007c50:	00000000 	.word	0x00000000

08007c54 <asin>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	ed2d 8b02 	vpush	{d8}
 8007c5a:	ec55 4b10 	vmov	r4, r5, d0
 8007c5e:	f000 f8ff 	bl	8007e60 <__ieee754_asin>
 8007c62:	4622      	mov	r2, r4
 8007c64:	462b      	mov	r3, r5
 8007c66:	4620      	mov	r0, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	eeb0 8a40 	vmov.f32	s16, s0
 8007c6e:	eef0 8a60 	vmov.f32	s17, s1
 8007c72:	f7f8 ff1f 	bl	8000ab4 <__aeabi_dcmpun>
 8007c76:	b9a8      	cbnz	r0, 8007ca4 <asin+0x50>
 8007c78:	ec45 4b10 	vmov	d0, r4, r5
 8007c7c:	f001 ffec 	bl	8009c58 <fabs>
 8007c80:	4b0c      	ldr	r3, [pc, #48]	; (8007cb4 <asin+0x60>)
 8007c82:	ec51 0b10 	vmov	r0, r1, d0
 8007c86:	2200      	movs	r2, #0
 8007c88:	f7f8 ff0a 	bl	8000aa0 <__aeabi_dcmpgt>
 8007c8c:	b150      	cbz	r0, 8007ca4 <asin+0x50>
 8007c8e:	f7ff ff2d 	bl	8007aec <__errno>
 8007c92:	ecbd 8b02 	vpop	{d8}
 8007c96:	2321      	movs	r3, #33	; 0x21
 8007c98:	6003      	str	r3, [r0, #0]
 8007c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c9e:	4806      	ldr	r0, [pc, #24]	; (8007cb8 <asin+0x64>)
 8007ca0:	f001 bfe6 	b.w	8009c70 <nan>
 8007ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ca8:	eef0 0a68 	vmov.f32	s1, s17
 8007cac:	ecbd 8b02 	vpop	{d8}
 8007cb0:	bd38      	pop	{r3, r4, r5, pc}
 8007cb2:	bf00      	nop
 8007cb4:	3ff00000 	.word	0x3ff00000
 8007cb8:	0800a040 	.word	0x0800a040

08007cbc <atan2>:
 8007cbc:	f000 bae4 	b.w	8008288 <__ieee754_atan2>

08007cc0 <acosf>:
 8007cc0:	b508      	push	{r3, lr}
 8007cc2:	ed2d 8b02 	vpush	{d8}
 8007cc6:	eeb0 8a40 	vmov.f32	s16, s0
 8007cca:	f000 fc59 	bl	8008580 <__ieee754_acosf>
 8007cce:	eeb4 8a48 	vcmp.f32	s16, s16
 8007cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd6:	eef0 8a40 	vmov.f32	s17, s0
 8007cda:	d615      	bvs.n	8007d08 <acosf+0x48>
 8007cdc:	eeb0 0a48 	vmov.f32	s0, s16
 8007ce0:	f002 f8a2 	bl	8009e28 <fabsf>
 8007ce4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ce8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf0:	dd0a      	ble.n	8007d08 <acosf+0x48>
 8007cf2:	f7ff fefb 	bl	8007aec <__errno>
 8007cf6:	ecbd 8b02 	vpop	{d8}
 8007cfa:	2321      	movs	r3, #33	; 0x21
 8007cfc:	6003      	str	r3, [r0, #0]
 8007cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d02:	4804      	ldr	r0, [pc, #16]	; (8007d14 <acosf+0x54>)
 8007d04:	f002 b8e6 	b.w	8009ed4 <nanf>
 8007d08:	eeb0 0a68 	vmov.f32	s0, s17
 8007d0c:	ecbd 8b02 	vpop	{d8}
 8007d10:	bd08      	pop	{r3, pc}
 8007d12:	bf00      	nop
 8007d14:	0800a040 	.word	0x0800a040

08007d18 <asinf>:
 8007d18:	b508      	push	{r3, lr}
 8007d1a:	ed2d 8b02 	vpush	{d8}
 8007d1e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d22:	f000 fd25 	bl	8008770 <__ieee754_asinf>
 8007d26:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2e:	eef0 8a40 	vmov.f32	s17, s0
 8007d32:	d615      	bvs.n	8007d60 <asinf+0x48>
 8007d34:	eeb0 0a48 	vmov.f32	s0, s16
 8007d38:	f002 f876 	bl	8009e28 <fabsf>
 8007d3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007d40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d48:	dd0a      	ble.n	8007d60 <asinf+0x48>
 8007d4a:	f7ff fecf 	bl	8007aec <__errno>
 8007d4e:	ecbd 8b02 	vpop	{d8}
 8007d52:	2321      	movs	r3, #33	; 0x21
 8007d54:	6003      	str	r3, [r0, #0]
 8007d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d5a:	4804      	ldr	r0, [pc, #16]	; (8007d6c <asinf+0x54>)
 8007d5c:	f002 b8ba 	b.w	8009ed4 <nanf>
 8007d60:	eeb0 0a68 	vmov.f32	s0, s17
 8007d64:	ecbd 8b02 	vpop	{d8}
 8007d68:	bd08      	pop	{r3, pc}
 8007d6a:	bf00      	nop
 8007d6c:	0800a040 	.word	0x0800a040

08007d70 <atan2f>:
 8007d70:	f000 bde4 	b.w	800893c <__ieee754_atan2f>

08007d74 <powf>:
 8007d74:	b508      	push	{r3, lr}
 8007d76:	ed2d 8b04 	vpush	{d8-d9}
 8007d7a:	eeb0 8a60 	vmov.f32	s16, s1
 8007d7e:	eeb0 9a40 	vmov.f32	s18, s0
 8007d82:	f000 fe7b 	bl	8008a7c <__ieee754_powf>
 8007d86:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8e:	eef0 8a40 	vmov.f32	s17, s0
 8007d92:	d63e      	bvs.n	8007e12 <powf+0x9e>
 8007d94:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d9c:	d112      	bne.n	8007dc4 <powf+0x50>
 8007d9e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da6:	d039      	beq.n	8007e1c <powf+0xa8>
 8007da8:	eeb0 0a48 	vmov.f32	s0, s16
 8007dac:	f002 f843 	bl	8009e36 <finitef>
 8007db0:	b378      	cbz	r0, 8007e12 <powf+0x9e>
 8007db2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dba:	d52a      	bpl.n	8007e12 <powf+0x9e>
 8007dbc:	f7ff fe96 	bl	8007aec <__errno>
 8007dc0:	2322      	movs	r3, #34	; 0x22
 8007dc2:	e014      	b.n	8007dee <powf+0x7a>
 8007dc4:	f002 f837 	bl	8009e36 <finitef>
 8007dc8:	b998      	cbnz	r0, 8007df2 <powf+0x7e>
 8007dca:	eeb0 0a49 	vmov.f32	s0, s18
 8007dce:	f002 f832 	bl	8009e36 <finitef>
 8007dd2:	b170      	cbz	r0, 8007df2 <powf+0x7e>
 8007dd4:	eeb0 0a48 	vmov.f32	s0, s16
 8007dd8:	f002 f82d 	bl	8009e36 <finitef>
 8007ddc:	b148      	cbz	r0, 8007df2 <powf+0x7e>
 8007dde:	eef4 8a68 	vcmp.f32	s17, s17
 8007de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de6:	d7e9      	bvc.n	8007dbc <powf+0x48>
 8007de8:	f7ff fe80 	bl	8007aec <__errno>
 8007dec:	2321      	movs	r3, #33	; 0x21
 8007dee:	6003      	str	r3, [r0, #0]
 8007df0:	e00f      	b.n	8007e12 <powf+0x9e>
 8007df2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfa:	d10a      	bne.n	8007e12 <powf+0x9e>
 8007dfc:	eeb0 0a49 	vmov.f32	s0, s18
 8007e00:	f002 f819 	bl	8009e36 <finitef>
 8007e04:	b128      	cbz	r0, 8007e12 <powf+0x9e>
 8007e06:	eeb0 0a48 	vmov.f32	s0, s16
 8007e0a:	f002 f814 	bl	8009e36 <finitef>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d1d4      	bne.n	8007dbc <powf+0x48>
 8007e12:	eeb0 0a68 	vmov.f32	s0, s17
 8007e16:	ecbd 8b04 	vpop	{d8-d9}
 8007e1a:	bd08      	pop	{r3, pc}
 8007e1c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8007e20:	e7f7      	b.n	8007e12 <powf+0x9e>
	...

08007e24 <sqrtf>:
 8007e24:	b508      	push	{r3, lr}
 8007e26:	ed2d 8b02 	vpush	{d8}
 8007e2a:	eeb0 8a40 	vmov.f32	s16, s0
 8007e2e:	f001 fa2f 	bl	8009290 <__ieee754_sqrtf>
 8007e32:	eeb4 8a48 	vcmp.f32	s16, s16
 8007e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3a:	d60c      	bvs.n	8007e56 <sqrtf+0x32>
 8007e3c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007e5c <sqrtf+0x38>
 8007e40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e48:	d505      	bpl.n	8007e56 <sqrtf+0x32>
 8007e4a:	f7ff fe4f 	bl	8007aec <__errno>
 8007e4e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007e52:	2321      	movs	r3, #33	; 0x21
 8007e54:	6003      	str	r3, [r0, #0]
 8007e56:	ecbd 8b02 	vpop	{d8}
 8007e5a:	bd08      	pop	{r3, pc}
 8007e5c:	00000000 	.word	0x00000000

08007e60 <__ieee754_asin>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	ed2d 8b04 	vpush	{d8-d9}
 8007e68:	ec55 4b10 	vmov	r4, r5, d0
 8007e6c:	4bcc      	ldr	r3, [pc, #816]	; (80081a0 <__ieee754_asin+0x340>)
 8007e6e:	b083      	sub	sp, #12
 8007e70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007e74:	4598      	cmp	r8, r3
 8007e76:	9501      	str	r5, [sp, #4]
 8007e78:	dd35      	ble.n	8007ee6 <__ieee754_asin+0x86>
 8007e7a:	ee10 3a10 	vmov	r3, s0
 8007e7e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007e82:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007e86:	ea58 0303 	orrs.w	r3, r8, r3
 8007e8a:	d117      	bne.n	8007ebc <__ieee754_asin+0x5c>
 8007e8c:	a3aa      	add	r3, pc, #680	; (adr r3, 8008138 <__ieee754_asin+0x2d8>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	ee10 0a10 	vmov	r0, s0
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 fb72 	bl	8000580 <__aeabi_dmul>
 8007e9c:	a3a8      	add	r3, pc, #672	; (adr r3, 8008140 <__ieee754_asin+0x2e0>)
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7f8 fb69 	bl	8000580 <__aeabi_dmul>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	f7f8 f9ad 	bl	8000214 <__adddf3>
 8007eba:	e00b      	b.n	8007ed4 <__ieee754_asin+0x74>
 8007ebc:	ee10 2a10 	vmov	r2, s0
 8007ec0:	462b      	mov	r3, r5
 8007ec2:	ee10 0a10 	vmov	r0, s0
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 f9a2 	bl	8000210 <__aeabi_dsub>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	f7f8 fc80 	bl	80007d4 <__aeabi_ddiv>
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	ec45 4b10 	vmov	d0, r4, r5
 8007edc:	b003      	add	sp, #12
 8007ede:	ecbd 8b04 	vpop	{d8-d9}
 8007ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee6:	4baf      	ldr	r3, [pc, #700]	; (80081a4 <__ieee754_asin+0x344>)
 8007ee8:	4598      	cmp	r8, r3
 8007eea:	dc11      	bgt.n	8007f10 <__ieee754_asin+0xb0>
 8007eec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007ef0:	f280 80ae 	bge.w	8008050 <__ieee754_asin+0x1f0>
 8007ef4:	a394      	add	r3, pc, #592	; (adr r3, 8008148 <__ieee754_asin+0x2e8>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	ee10 0a10 	vmov	r0, s0
 8007efe:	4629      	mov	r1, r5
 8007f00:	f7f8 f988 	bl	8000214 <__adddf3>
 8007f04:	4ba8      	ldr	r3, [pc, #672]	; (80081a8 <__ieee754_asin+0x348>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	f7f8 fdca 	bl	8000aa0 <__aeabi_dcmpgt>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d1e3      	bne.n	8007ed8 <__ieee754_asin+0x78>
 8007f10:	ec45 4b10 	vmov	d0, r4, r5
 8007f14:	f001 fea0 	bl	8009c58 <fabs>
 8007f18:	49a3      	ldr	r1, [pc, #652]	; (80081a8 <__ieee754_asin+0x348>)
 8007f1a:	ec53 2b10 	vmov	r2, r3, d0
 8007f1e:	2000      	movs	r0, #0
 8007f20:	f7f8 f976 	bl	8000210 <__aeabi_dsub>
 8007f24:	4ba1      	ldr	r3, [pc, #644]	; (80081ac <__ieee754_asin+0x34c>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	f7f8 fb2a 	bl	8000580 <__aeabi_dmul>
 8007f2c:	a388      	add	r3, pc, #544	; (adr r3, 8008150 <__ieee754_asin+0x2f0>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	4604      	mov	r4, r0
 8007f34:	460d      	mov	r5, r1
 8007f36:	f7f8 fb23 	bl	8000580 <__aeabi_dmul>
 8007f3a:	a387      	add	r3, pc, #540	; (adr r3, 8008158 <__ieee754_asin+0x2f8>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f7f8 f968 	bl	8000214 <__adddf3>
 8007f44:	4622      	mov	r2, r4
 8007f46:	462b      	mov	r3, r5
 8007f48:	f7f8 fb1a 	bl	8000580 <__aeabi_dmul>
 8007f4c:	a384      	add	r3, pc, #528	; (adr r3, 8008160 <__ieee754_asin+0x300>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	f7f8 f95d 	bl	8000210 <__aeabi_dsub>
 8007f56:	4622      	mov	r2, r4
 8007f58:	462b      	mov	r3, r5
 8007f5a:	f7f8 fb11 	bl	8000580 <__aeabi_dmul>
 8007f5e:	a382      	add	r3, pc, #520	; (adr r3, 8008168 <__ieee754_asin+0x308>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 f956 	bl	8000214 <__adddf3>
 8007f68:	4622      	mov	r2, r4
 8007f6a:	462b      	mov	r3, r5
 8007f6c:	f7f8 fb08 	bl	8000580 <__aeabi_dmul>
 8007f70:	a37f      	add	r3, pc, #508	; (adr r3, 8008170 <__ieee754_asin+0x310>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 f94b 	bl	8000210 <__aeabi_dsub>
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	f7f8 faff 	bl	8000580 <__aeabi_dmul>
 8007f82:	a37d      	add	r3, pc, #500	; (adr r3, 8008178 <__ieee754_asin+0x318>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 f944 	bl	8000214 <__adddf3>
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	462b      	mov	r3, r5
 8007f90:	f7f8 faf6 	bl	8000580 <__aeabi_dmul>
 8007f94:	a37a      	add	r3, pc, #488	; (adr r3, 8008180 <__ieee754_asin+0x320>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	ec41 0b18 	vmov	d8, r0, r1
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f7f8 faed 	bl	8000580 <__aeabi_dmul>
 8007fa6:	a378      	add	r3, pc, #480	; (adr r3, 8008188 <__ieee754_asin+0x328>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 f930 	bl	8000210 <__aeabi_dsub>
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	f7f8 fae4 	bl	8000580 <__aeabi_dmul>
 8007fb8:	a375      	add	r3, pc, #468	; (adr r3, 8008190 <__ieee754_asin+0x330>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 f929 	bl	8000214 <__adddf3>
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	f7f8 fadb 	bl	8000580 <__aeabi_dmul>
 8007fca:	a373      	add	r3, pc, #460	; (adr r3, 8008198 <__ieee754_asin+0x338>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 f91e 	bl	8000210 <__aeabi_dsub>
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	f7f8 fad2 	bl	8000580 <__aeabi_dmul>
 8007fdc:	4b72      	ldr	r3, [pc, #456]	; (80081a8 <__ieee754_asin+0x348>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f7f8 f918 	bl	8000214 <__adddf3>
 8007fe4:	ec45 4b10 	vmov	d0, r4, r5
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	f000 fa16 	bl	800841c <__ieee754_sqrt>
 8007ff0:	4b6f      	ldr	r3, [pc, #444]	; (80081b0 <__ieee754_asin+0x350>)
 8007ff2:	4598      	cmp	r8, r3
 8007ff4:	ec5b ab10 	vmov	sl, fp, d0
 8007ff8:	f340 80dc 	ble.w	80081b4 <__ieee754_asin+0x354>
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	463b      	mov	r3, r7
 8008000:	ec51 0b18 	vmov	r0, r1, d8
 8008004:	f7f8 fbe6 	bl	80007d4 <__aeabi_ddiv>
 8008008:	4652      	mov	r2, sl
 800800a:	465b      	mov	r3, fp
 800800c:	f7f8 fab8 	bl	8000580 <__aeabi_dmul>
 8008010:	4652      	mov	r2, sl
 8008012:	465b      	mov	r3, fp
 8008014:	f7f8 f8fe 	bl	8000214 <__adddf3>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	f7f8 f8fa 	bl	8000214 <__adddf3>
 8008020:	a347      	add	r3, pc, #284	; (adr r3, 8008140 <__ieee754_asin+0x2e0>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f7f8 f8f3 	bl	8000210 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	a142      	add	r1, pc, #264	; (adr r1, 8008138 <__ieee754_asin+0x2d8>)
 8008030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008034:	f7f8 f8ec 	bl	8000210 <__aeabi_dsub>
 8008038:	9b01      	ldr	r3, [sp, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	bfdc      	itt	le
 800803e:	4602      	movle	r2, r0
 8008040:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008044:	4604      	mov	r4, r0
 8008046:	460d      	mov	r5, r1
 8008048:	bfdc      	itt	le
 800804a:	4614      	movle	r4, r2
 800804c:	461d      	movle	r5, r3
 800804e:	e743      	b.n	8007ed8 <__ieee754_asin+0x78>
 8008050:	ee10 2a10 	vmov	r2, s0
 8008054:	ee10 0a10 	vmov	r0, s0
 8008058:	462b      	mov	r3, r5
 800805a:	4629      	mov	r1, r5
 800805c:	f7f8 fa90 	bl	8000580 <__aeabi_dmul>
 8008060:	a33b      	add	r3, pc, #236	; (adr r3, 8008150 <__ieee754_asin+0x2f0>)
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	4606      	mov	r6, r0
 8008068:	460f      	mov	r7, r1
 800806a:	f7f8 fa89 	bl	8000580 <__aeabi_dmul>
 800806e:	a33a      	add	r3, pc, #232	; (adr r3, 8008158 <__ieee754_asin+0x2f8>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f8ce 	bl	8000214 <__adddf3>
 8008078:	4632      	mov	r2, r6
 800807a:	463b      	mov	r3, r7
 800807c:	f7f8 fa80 	bl	8000580 <__aeabi_dmul>
 8008080:	a337      	add	r3, pc, #220	; (adr r3, 8008160 <__ieee754_asin+0x300>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 f8c3 	bl	8000210 <__aeabi_dsub>
 800808a:	4632      	mov	r2, r6
 800808c:	463b      	mov	r3, r7
 800808e:	f7f8 fa77 	bl	8000580 <__aeabi_dmul>
 8008092:	a335      	add	r3, pc, #212	; (adr r3, 8008168 <__ieee754_asin+0x308>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 f8bc 	bl	8000214 <__adddf3>
 800809c:	4632      	mov	r2, r6
 800809e:	463b      	mov	r3, r7
 80080a0:	f7f8 fa6e 	bl	8000580 <__aeabi_dmul>
 80080a4:	a332      	add	r3, pc, #200	; (adr r3, 8008170 <__ieee754_asin+0x310>)
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 f8b1 	bl	8000210 <__aeabi_dsub>
 80080ae:	4632      	mov	r2, r6
 80080b0:	463b      	mov	r3, r7
 80080b2:	f7f8 fa65 	bl	8000580 <__aeabi_dmul>
 80080b6:	a330      	add	r3, pc, #192	; (adr r3, 8008178 <__ieee754_asin+0x318>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f7f8 f8aa 	bl	8000214 <__adddf3>
 80080c0:	4632      	mov	r2, r6
 80080c2:	463b      	mov	r3, r7
 80080c4:	f7f8 fa5c 	bl	8000580 <__aeabi_dmul>
 80080c8:	a32d      	add	r3, pc, #180	; (adr r3, 8008180 <__ieee754_asin+0x320>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	4680      	mov	r8, r0
 80080d0:	4689      	mov	r9, r1
 80080d2:	4630      	mov	r0, r6
 80080d4:	4639      	mov	r1, r7
 80080d6:	f7f8 fa53 	bl	8000580 <__aeabi_dmul>
 80080da:	a32b      	add	r3, pc, #172	; (adr r3, 8008188 <__ieee754_asin+0x328>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 f896 	bl	8000210 <__aeabi_dsub>
 80080e4:	4632      	mov	r2, r6
 80080e6:	463b      	mov	r3, r7
 80080e8:	f7f8 fa4a 	bl	8000580 <__aeabi_dmul>
 80080ec:	a328      	add	r3, pc, #160	; (adr r3, 8008190 <__ieee754_asin+0x330>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	f7f8 f88f 	bl	8000214 <__adddf3>
 80080f6:	4632      	mov	r2, r6
 80080f8:	463b      	mov	r3, r7
 80080fa:	f7f8 fa41 	bl	8000580 <__aeabi_dmul>
 80080fe:	a326      	add	r3, pc, #152	; (adr r3, 8008198 <__ieee754_asin+0x338>)
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f7f8 f884 	bl	8000210 <__aeabi_dsub>
 8008108:	4632      	mov	r2, r6
 800810a:	463b      	mov	r3, r7
 800810c:	f7f8 fa38 	bl	8000580 <__aeabi_dmul>
 8008110:	4b25      	ldr	r3, [pc, #148]	; (80081a8 <__ieee754_asin+0x348>)
 8008112:	2200      	movs	r2, #0
 8008114:	f7f8 f87e 	bl	8000214 <__adddf3>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4640      	mov	r0, r8
 800811e:	4649      	mov	r1, r9
 8008120:	f7f8 fb58 	bl	80007d4 <__aeabi_ddiv>
 8008124:	4622      	mov	r2, r4
 8008126:	462b      	mov	r3, r5
 8008128:	f7f8 fa2a 	bl	8000580 <__aeabi_dmul>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4620      	mov	r0, r4
 8008132:	4629      	mov	r1, r5
 8008134:	e6bf      	b.n	8007eb6 <__ieee754_asin+0x56>
 8008136:	bf00      	nop
 8008138:	54442d18 	.word	0x54442d18
 800813c:	3ff921fb 	.word	0x3ff921fb
 8008140:	33145c07 	.word	0x33145c07
 8008144:	3c91a626 	.word	0x3c91a626
 8008148:	8800759c 	.word	0x8800759c
 800814c:	7e37e43c 	.word	0x7e37e43c
 8008150:	0dfdf709 	.word	0x0dfdf709
 8008154:	3f023de1 	.word	0x3f023de1
 8008158:	7501b288 	.word	0x7501b288
 800815c:	3f49efe0 	.word	0x3f49efe0
 8008160:	b5688f3b 	.word	0xb5688f3b
 8008164:	3fa48228 	.word	0x3fa48228
 8008168:	0e884455 	.word	0x0e884455
 800816c:	3fc9c155 	.word	0x3fc9c155
 8008170:	03eb6f7d 	.word	0x03eb6f7d
 8008174:	3fd4d612 	.word	0x3fd4d612
 8008178:	55555555 	.word	0x55555555
 800817c:	3fc55555 	.word	0x3fc55555
 8008180:	b12e9282 	.word	0xb12e9282
 8008184:	3fb3b8c5 	.word	0x3fb3b8c5
 8008188:	1b8d0159 	.word	0x1b8d0159
 800818c:	3fe6066c 	.word	0x3fe6066c
 8008190:	9c598ac8 	.word	0x9c598ac8
 8008194:	40002ae5 	.word	0x40002ae5
 8008198:	1c8a2d4b 	.word	0x1c8a2d4b
 800819c:	40033a27 	.word	0x40033a27
 80081a0:	3fefffff 	.word	0x3fefffff
 80081a4:	3fdfffff 	.word	0x3fdfffff
 80081a8:	3ff00000 	.word	0x3ff00000
 80081ac:	3fe00000 	.word	0x3fe00000
 80081b0:	3fef3332 	.word	0x3fef3332
 80081b4:	ee10 2a10 	vmov	r2, s0
 80081b8:	ee10 0a10 	vmov	r0, s0
 80081bc:	465b      	mov	r3, fp
 80081be:	4659      	mov	r1, fp
 80081c0:	f7f8 f828 	bl	8000214 <__adddf3>
 80081c4:	4632      	mov	r2, r6
 80081c6:	463b      	mov	r3, r7
 80081c8:	ec41 0b19 	vmov	d9, r0, r1
 80081cc:	ec51 0b18 	vmov	r0, r1, d8
 80081d0:	f7f8 fb00 	bl	80007d4 <__aeabi_ddiv>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	ec51 0b19 	vmov	r0, r1, d9
 80081dc:	f7f8 f9d0 	bl	8000580 <__aeabi_dmul>
 80081e0:	f04f 0800 	mov.w	r8, #0
 80081e4:	4606      	mov	r6, r0
 80081e6:	460f      	mov	r7, r1
 80081e8:	4642      	mov	r2, r8
 80081ea:	465b      	mov	r3, fp
 80081ec:	4640      	mov	r0, r8
 80081ee:	4659      	mov	r1, fp
 80081f0:	f7f8 f9c6 	bl	8000580 <__aeabi_dmul>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4620      	mov	r0, r4
 80081fa:	4629      	mov	r1, r5
 80081fc:	f7f8 f808 	bl	8000210 <__aeabi_dsub>
 8008200:	4642      	mov	r2, r8
 8008202:	4604      	mov	r4, r0
 8008204:	460d      	mov	r5, r1
 8008206:	465b      	mov	r3, fp
 8008208:	4650      	mov	r0, sl
 800820a:	4659      	mov	r1, fp
 800820c:	f7f8 f802 	bl	8000214 <__adddf3>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4620      	mov	r0, r4
 8008216:	4629      	mov	r1, r5
 8008218:	f7f8 fadc 	bl	80007d4 <__aeabi_ddiv>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	f7f7 fff8 	bl	8000214 <__adddf3>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	a113      	add	r1, pc, #76	; (adr r1, 8008278 <__ieee754_asin+0x418>)
 800822a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800822e:	f7f7 ffef 	bl	8000210 <__aeabi_dsub>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4630      	mov	r0, r6
 8008238:	4639      	mov	r1, r7
 800823a:	f7f7 ffe9 	bl	8000210 <__aeabi_dsub>
 800823e:	4642      	mov	r2, r8
 8008240:	4604      	mov	r4, r0
 8008242:	460d      	mov	r5, r1
 8008244:	465b      	mov	r3, fp
 8008246:	4640      	mov	r0, r8
 8008248:	4659      	mov	r1, fp
 800824a:	f7f7 ffe3 	bl	8000214 <__adddf3>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	a10b      	add	r1, pc, #44	; (adr r1, 8008280 <__ieee754_asin+0x420>)
 8008254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008258:	f7f7 ffda 	bl	8000210 <__aeabi_dsub>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f7 ffd4 	bl	8000210 <__aeabi_dsub>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	a104      	add	r1, pc, #16	; (adr r1, 8008280 <__ieee754_asin+0x420>)
 800826e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008272:	e6df      	b.n	8008034 <__ieee754_asin+0x1d4>
 8008274:	f3af 8000 	nop.w
 8008278:	33145c07 	.word	0x33145c07
 800827c:	3c91a626 	.word	0x3c91a626
 8008280:	54442d18 	.word	0x54442d18
 8008284:	3fe921fb 	.word	0x3fe921fb

08008288 <__ieee754_atan2>:
 8008288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800828c:	ec57 6b11 	vmov	r6, r7, d1
 8008290:	4273      	negs	r3, r6
 8008292:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008418 <__ieee754_atan2+0x190>
 8008296:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800829a:	4333      	orrs	r3, r6
 800829c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80082a0:	4573      	cmp	r3, lr
 80082a2:	ec51 0b10 	vmov	r0, r1, d0
 80082a6:	ee11 8a10 	vmov	r8, s2
 80082aa:	d80a      	bhi.n	80082c2 <__ieee754_atan2+0x3a>
 80082ac:	4244      	negs	r4, r0
 80082ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082b2:	4304      	orrs	r4, r0
 80082b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80082b8:	4574      	cmp	r4, lr
 80082ba:	ee10 9a10 	vmov	r9, s0
 80082be:	468c      	mov	ip, r1
 80082c0:	d907      	bls.n	80082d2 <__ieee754_atan2+0x4a>
 80082c2:	4632      	mov	r2, r6
 80082c4:	463b      	mov	r3, r7
 80082c6:	f7f7 ffa5 	bl	8000214 <__adddf3>
 80082ca:	ec41 0b10 	vmov	d0, r0, r1
 80082ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80082d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80082da:	4334      	orrs	r4, r6
 80082dc:	d103      	bne.n	80082e6 <__ieee754_atan2+0x5e>
 80082de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e2:	f001 bb19 	b.w	8009918 <atan>
 80082e6:	17bc      	asrs	r4, r7, #30
 80082e8:	f004 0402 	and.w	r4, r4, #2
 80082ec:	ea53 0909 	orrs.w	r9, r3, r9
 80082f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80082f4:	d107      	bne.n	8008306 <__ieee754_atan2+0x7e>
 80082f6:	2c02      	cmp	r4, #2
 80082f8:	d060      	beq.n	80083bc <__ieee754_atan2+0x134>
 80082fa:	2c03      	cmp	r4, #3
 80082fc:	d1e5      	bne.n	80082ca <__ieee754_atan2+0x42>
 80082fe:	a142      	add	r1, pc, #264	; (adr r1, 8008408 <__ieee754_atan2+0x180>)
 8008300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008304:	e7e1      	b.n	80082ca <__ieee754_atan2+0x42>
 8008306:	ea52 0808 	orrs.w	r8, r2, r8
 800830a:	d106      	bne.n	800831a <__ieee754_atan2+0x92>
 800830c:	f1bc 0f00 	cmp.w	ip, #0
 8008310:	da5f      	bge.n	80083d2 <__ieee754_atan2+0x14a>
 8008312:	a13f      	add	r1, pc, #252	; (adr r1, 8008410 <__ieee754_atan2+0x188>)
 8008314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008318:	e7d7      	b.n	80082ca <__ieee754_atan2+0x42>
 800831a:	4572      	cmp	r2, lr
 800831c:	d10f      	bne.n	800833e <__ieee754_atan2+0xb6>
 800831e:	4293      	cmp	r3, r2
 8008320:	f104 34ff 	add.w	r4, r4, #4294967295
 8008324:	d107      	bne.n	8008336 <__ieee754_atan2+0xae>
 8008326:	2c02      	cmp	r4, #2
 8008328:	d84c      	bhi.n	80083c4 <__ieee754_atan2+0x13c>
 800832a:	4b35      	ldr	r3, [pc, #212]	; (8008400 <__ieee754_atan2+0x178>)
 800832c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008330:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008334:	e7c9      	b.n	80082ca <__ieee754_atan2+0x42>
 8008336:	2c02      	cmp	r4, #2
 8008338:	d848      	bhi.n	80083cc <__ieee754_atan2+0x144>
 800833a:	4b32      	ldr	r3, [pc, #200]	; (8008404 <__ieee754_atan2+0x17c>)
 800833c:	e7f6      	b.n	800832c <__ieee754_atan2+0xa4>
 800833e:	4573      	cmp	r3, lr
 8008340:	d0e4      	beq.n	800830c <__ieee754_atan2+0x84>
 8008342:	1a9b      	subs	r3, r3, r2
 8008344:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008348:	ea4f 5223 	mov.w	r2, r3, asr #20
 800834c:	da1e      	bge.n	800838c <__ieee754_atan2+0x104>
 800834e:	2f00      	cmp	r7, #0
 8008350:	da01      	bge.n	8008356 <__ieee754_atan2+0xce>
 8008352:	323c      	adds	r2, #60	; 0x3c
 8008354:	db1e      	blt.n	8008394 <__ieee754_atan2+0x10c>
 8008356:	4632      	mov	r2, r6
 8008358:	463b      	mov	r3, r7
 800835a:	f7f8 fa3b 	bl	80007d4 <__aeabi_ddiv>
 800835e:	ec41 0b10 	vmov	d0, r0, r1
 8008362:	f001 fc79 	bl	8009c58 <fabs>
 8008366:	f001 fad7 	bl	8009918 <atan>
 800836a:	ec51 0b10 	vmov	r0, r1, d0
 800836e:	2c01      	cmp	r4, #1
 8008370:	d013      	beq.n	800839a <__ieee754_atan2+0x112>
 8008372:	2c02      	cmp	r4, #2
 8008374:	d015      	beq.n	80083a2 <__ieee754_atan2+0x11a>
 8008376:	2c00      	cmp	r4, #0
 8008378:	d0a7      	beq.n	80082ca <__ieee754_atan2+0x42>
 800837a:	a319      	add	r3, pc, #100	; (adr r3, 80083e0 <__ieee754_atan2+0x158>)
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f7f7 ff46 	bl	8000210 <__aeabi_dsub>
 8008384:	a318      	add	r3, pc, #96	; (adr r3, 80083e8 <__ieee754_atan2+0x160>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	e014      	b.n	80083b6 <__ieee754_atan2+0x12e>
 800838c:	a118      	add	r1, pc, #96	; (adr r1, 80083f0 <__ieee754_atan2+0x168>)
 800838e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008392:	e7ec      	b.n	800836e <__ieee754_atan2+0xe6>
 8008394:	2000      	movs	r0, #0
 8008396:	2100      	movs	r1, #0
 8008398:	e7e9      	b.n	800836e <__ieee754_atan2+0xe6>
 800839a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800839e:	4619      	mov	r1, r3
 80083a0:	e793      	b.n	80082ca <__ieee754_atan2+0x42>
 80083a2:	a30f      	add	r3, pc, #60	; (adr r3, 80083e0 <__ieee754_atan2+0x158>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f7 ff32 	bl	8000210 <__aeabi_dsub>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	a10d      	add	r1, pc, #52	; (adr r1, 80083e8 <__ieee754_atan2+0x160>)
 80083b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083b6:	f7f7 ff2b 	bl	8000210 <__aeabi_dsub>
 80083ba:	e786      	b.n	80082ca <__ieee754_atan2+0x42>
 80083bc:	a10a      	add	r1, pc, #40	; (adr r1, 80083e8 <__ieee754_atan2+0x160>)
 80083be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c2:	e782      	b.n	80082ca <__ieee754_atan2+0x42>
 80083c4:	a10c      	add	r1, pc, #48	; (adr r1, 80083f8 <__ieee754_atan2+0x170>)
 80083c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ca:	e77e      	b.n	80082ca <__ieee754_atan2+0x42>
 80083cc:	2000      	movs	r0, #0
 80083ce:	2100      	movs	r1, #0
 80083d0:	e77b      	b.n	80082ca <__ieee754_atan2+0x42>
 80083d2:	a107      	add	r1, pc, #28	; (adr r1, 80083f0 <__ieee754_atan2+0x168>)
 80083d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083d8:	e777      	b.n	80082ca <__ieee754_atan2+0x42>
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	33145c07 	.word	0x33145c07
 80083e4:	3ca1a626 	.word	0x3ca1a626
 80083e8:	54442d18 	.word	0x54442d18
 80083ec:	400921fb 	.word	0x400921fb
 80083f0:	54442d18 	.word	0x54442d18
 80083f4:	3ff921fb 	.word	0x3ff921fb
 80083f8:	54442d18 	.word	0x54442d18
 80083fc:	3fe921fb 	.word	0x3fe921fb
 8008400:	0800a048 	.word	0x0800a048
 8008404:	0800a060 	.word	0x0800a060
 8008408:	54442d18 	.word	0x54442d18
 800840c:	c00921fb 	.word	0xc00921fb
 8008410:	54442d18 	.word	0x54442d18
 8008414:	bff921fb 	.word	0xbff921fb
 8008418:	7ff00000 	.word	0x7ff00000

0800841c <__ieee754_sqrt>:
 800841c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008420:	ec55 4b10 	vmov	r4, r5, d0
 8008424:	4e55      	ldr	r6, [pc, #340]	; (800857c <__ieee754_sqrt+0x160>)
 8008426:	43ae      	bics	r6, r5
 8008428:	ee10 0a10 	vmov	r0, s0
 800842c:	ee10 3a10 	vmov	r3, s0
 8008430:	462a      	mov	r2, r5
 8008432:	4629      	mov	r1, r5
 8008434:	d110      	bne.n	8008458 <__ieee754_sqrt+0x3c>
 8008436:	ee10 2a10 	vmov	r2, s0
 800843a:	462b      	mov	r3, r5
 800843c:	f7f8 f8a0 	bl	8000580 <__aeabi_dmul>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	4620      	mov	r0, r4
 8008446:	4629      	mov	r1, r5
 8008448:	f7f7 fee4 	bl	8000214 <__adddf3>
 800844c:	4604      	mov	r4, r0
 800844e:	460d      	mov	r5, r1
 8008450:	ec45 4b10 	vmov	d0, r4, r5
 8008454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008458:	2d00      	cmp	r5, #0
 800845a:	dc10      	bgt.n	800847e <__ieee754_sqrt+0x62>
 800845c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008460:	4330      	orrs	r0, r6
 8008462:	d0f5      	beq.n	8008450 <__ieee754_sqrt+0x34>
 8008464:	b15d      	cbz	r5, 800847e <__ieee754_sqrt+0x62>
 8008466:	ee10 2a10 	vmov	r2, s0
 800846a:	462b      	mov	r3, r5
 800846c:	ee10 0a10 	vmov	r0, s0
 8008470:	f7f7 fece 	bl	8000210 <__aeabi_dsub>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	f7f8 f9ac 	bl	80007d4 <__aeabi_ddiv>
 800847c:	e7e6      	b.n	800844c <__ieee754_sqrt+0x30>
 800847e:	1512      	asrs	r2, r2, #20
 8008480:	d074      	beq.n	800856c <__ieee754_sqrt+0x150>
 8008482:	07d4      	lsls	r4, r2, #31
 8008484:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008488:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800848c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008490:	bf5e      	ittt	pl
 8008492:	0fda      	lsrpl	r2, r3, #31
 8008494:	005b      	lslpl	r3, r3, #1
 8008496:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800849a:	2400      	movs	r4, #0
 800849c:	0fda      	lsrs	r2, r3, #31
 800849e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80084a2:	107f      	asrs	r7, r7, #1
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	2516      	movs	r5, #22
 80084a8:	4620      	mov	r0, r4
 80084aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80084ae:	1886      	adds	r6, r0, r2
 80084b0:	428e      	cmp	r6, r1
 80084b2:	bfde      	ittt	le
 80084b4:	1b89      	suble	r1, r1, r6
 80084b6:	18b0      	addle	r0, r6, r2
 80084b8:	18a4      	addle	r4, r4, r2
 80084ba:	0049      	lsls	r1, r1, #1
 80084bc:	3d01      	subs	r5, #1
 80084be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80084c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80084c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084ca:	d1f0      	bne.n	80084ae <__ieee754_sqrt+0x92>
 80084cc:	462a      	mov	r2, r5
 80084ce:	f04f 0e20 	mov.w	lr, #32
 80084d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80084d6:	4281      	cmp	r1, r0
 80084d8:	eb06 0c05 	add.w	ip, r6, r5
 80084dc:	dc02      	bgt.n	80084e4 <__ieee754_sqrt+0xc8>
 80084de:	d113      	bne.n	8008508 <__ieee754_sqrt+0xec>
 80084e0:	459c      	cmp	ip, r3
 80084e2:	d811      	bhi.n	8008508 <__ieee754_sqrt+0xec>
 80084e4:	f1bc 0f00 	cmp.w	ip, #0
 80084e8:	eb0c 0506 	add.w	r5, ip, r6
 80084ec:	da43      	bge.n	8008576 <__ieee754_sqrt+0x15a>
 80084ee:	2d00      	cmp	r5, #0
 80084f0:	db41      	blt.n	8008576 <__ieee754_sqrt+0x15a>
 80084f2:	f100 0801 	add.w	r8, r0, #1
 80084f6:	1a09      	subs	r1, r1, r0
 80084f8:	459c      	cmp	ip, r3
 80084fa:	bf88      	it	hi
 80084fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008500:	eba3 030c 	sub.w	r3, r3, ip
 8008504:	4432      	add	r2, r6
 8008506:	4640      	mov	r0, r8
 8008508:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800850c:	f1be 0e01 	subs.w	lr, lr, #1
 8008510:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008514:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008518:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800851c:	d1db      	bne.n	80084d6 <__ieee754_sqrt+0xba>
 800851e:	430b      	orrs	r3, r1
 8008520:	d006      	beq.n	8008530 <__ieee754_sqrt+0x114>
 8008522:	1c50      	adds	r0, r2, #1
 8008524:	bf13      	iteet	ne
 8008526:	3201      	addne	r2, #1
 8008528:	3401      	addeq	r4, #1
 800852a:	4672      	moveq	r2, lr
 800852c:	f022 0201 	bicne.w	r2, r2, #1
 8008530:	1063      	asrs	r3, r4, #1
 8008532:	0852      	lsrs	r2, r2, #1
 8008534:	07e1      	lsls	r1, r4, #31
 8008536:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800853a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800853e:	bf48      	it	mi
 8008540:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008544:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008548:	4614      	mov	r4, r2
 800854a:	e781      	b.n	8008450 <__ieee754_sqrt+0x34>
 800854c:	0ad9      	lsrs	r1, r3, #11
 800854e:	3815      	subs	r0, #21
 8008550:	055b      	lsls	r3, r3, #21
 8008552:	2900      	cmp	r1, #0
 8008554:	d0fa      	beq.n	800854c <__ieee754_sqrt+0x130>
 8008556:	02cd      	lsls	r5, r1, #11
 8008558:	d50a      	bpl.n	8008570 <__ieee754_sqrt+0x154>
 800855a:	f1c2 0420 	rsb	r4, r2, #32
 800855e:	fa23 f404 	lsr.w	r4, r3, r4
 8008562:	1e55      	subs	r5, r2, #1
 8008564:	4093      	lsls	r3, r2
 8008566:	4321      	orrs	r1, r4
 8008568:	1b42      	subs	r2, r0, r5
 800856a:	e78a      	b.n	8008482 <__ieee754_sqrt+0x66>
 800856c:	4610      	mov	r0, r2
 800856e:	e7f0      	b.n	8008552 <__ieee754_sqrt+0x136>
 8008570:	0049      	lsls	r1, r1, #1
 8008572:	3201      	adds	r2, #1
 8008574:	e7ef      	b.n	8008556 <__ieee754_sqrt+0x13a>
 8008576:	4680      	mov	r8, r0
 8008578:	e7bd      	b.n	80084f6 <__ieee754_sqrt+0xda>
 800857a:	bf00      	nop
 800857c:	7ff00000 	.word	0x7ff00000

08008580 <__ieee754_acosf>:
 8008580:	b508      	push	{r3, lr}
 8008582:	ee10 3a10 	vmov	r3, s0
 8008586:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800858a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800858e:	ed2d 8b0c 	vpush	{d8-d13}
 8008592:	d10a      	bne.n	80085aa <__ieee754_acosf+0x2a>
 8008594:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800872c <__ieee754_acosf+0x1ac>
 8008598:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8008730 <__ieee754_acosf+0x1b0>
 800859c:	2b00      	cmp	r3, #0
 800859e:	bfd8      	it	le
 80085a0:	eeb0 0a48 	vmovle.f32	s0, s16
 80085a4:	ecbd 8b0c 	vpop	{d8-d13}
 80085a8:	bd08      	pop	{r3, pc}
 80085aa:	dd04      	ble.n	80085b6 <__ieee754_acosf+0x36>
 80085ac:	ee30 8a40 	vsub.f32	s16, s0, s0
 80085b0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80085b4:	e7f6      	b.n	80085a4 <__ieee754_acosf+0x24>
 80085b6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80085ba:	da3c      	bge.n	8008636 <__ieee754_acosf+0xb6>
 80085bc:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80085c0:	f340 80b1 	ble.w	8008726 <__ieee754_acosf+0x1a6>
 80085c4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80085c8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8008734 <__ieee754_acosf+0x1b4>
 80085cc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8008738 <__ieee754_acosf+0x1b8>
 80085d0:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 800873c <__ieee754_acosf+0x1bc>
 80085d4:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8008740 <__ieee754_acosf+0x1c0>
 80085d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80085dc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8008744 <__ieee754_acosf+0x1c4>
 80085e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085e4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8008748 <__ieee754_acosf+0x1c8>
 80085e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800874c <__ieee754_acosf+0x1cc>
 80085f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085f4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008750 <__ieee754_acosf+0x1d0>
 80085f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085fc:	eddf 6a55 	vldr	s13, [pc, #340]	; 8008754 <__ieee754_acosf+0x1d4>
 8008600:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8008604:	eddf 6a54 	vldr	s13, [pc, #336]	; 8008758 <__ieee754_acosf+0x1d8>
 8008608:	eee6 6a27 	vfma.f32	s13, s12, s15
 800860c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 800875c <__ieee754_acosf+0x1dc>
 8008610:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008618:	eee6 6a27 	vfma.f32	s13, s12, s15
 800861c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008624:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008628:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008760 <__ieee754_acosf+0x1e0>
 800862c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008630:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008634:	e7b6      	b.n	80085a4 <__ieee754_acosf+0x24>
 8008636:	2b00      	cmp	r3, #0
 8008638:	eddf da3e 	vldr	s27, [pc, #248]	; 8008734 <__ieee754_acosf+0x1b4>
 800863c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8008738 <__ieee754_acosf+0x1b8>
 8008640:	ed9f ca40 	vldr	s24, [pc, #256]	; 8008744 <__ieee754_acosf+0x1c4>
 8008644:	eddf ba40 	vldr	s23, [pc, #256]	; 8008748 <__ieee754_acosf+0x1c8>
 8008648:	ed9f ba40 	vldr	s22, [pc, #256]	; 800874c <__ieee754_acosf+0x1cc>
 800864c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8008750 <__ieee754_acosf+0x1d0>
 8008650:	ed9f da40 	vldr	s26, [pc, #256]	; 8008754 <__ieee754_acosf+0x1d4>
 8008654:	eddf aa39 	vldr	s21, [pc, #228]	; 800873c <__ieee754_acosf+0x1bc>
 8008658:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8008758 <__ieee754_acosf+0x1d8>
 800865c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 800875c <__ieee754_acosf+0x1dc>
 8008660:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008664:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008668:	da28      	bge.n	80086bc <__ieee754_acosf+0x13c>
 800866a:	ee30 0a09 	vadd.f32	s0, s0, s18
 800866e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008672:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8008676:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800867a:	eeac ca80 	vfma.f32	s24, s25, s0
 800867e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8008682:	eeec ba00 	vfma.f32	s23, s24, s0
 8008686:	eeea 9a00 	vfma.f32	s19, s20, s0
 800868a:	eeab ba80 	vfma.f32	s22, s23, s0
 800868e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8008692:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8008696:	ee68 8a80 	vmul.f32	s17, s17, s0
 800869a:	f000 fdf9 	bl	8009290 <__ieee754_sqrtf>
 800869e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80086a2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8008764 <__ieee754_acosf+0x1e4>
 80086a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80086aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80086ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80086b2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8008768 <__ieee754_acosf+0x1e8>
 80086b6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80086ba:	e773      	b.n	80085a4 <__ieee754_acosf+0x24>
 80086bc:	ee39 8a40 	vsub.f32	s16, s18, s0
 80086c0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80086c4:	eeb0 0a48 	vmov.f32	s0, s16
 80086c8:	f000 fde2 	bl	8009290 <__ieee754_sqrtf>
 80086cc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80086d0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80086d4:	eeac ca88 	vfma.f32	s24, s25, s16
 80086d8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80086dc:	eeec ba08 	vfma.f32	s23, s24, s16
 80086e0:	ee10 3a10 	vmov	r3, s0
 80086e4:	eeab ba88 	vfma.f32	s22, s23, s16
 80086e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80086ec:	f023 030f 	bic.w	r3, r3, #15
 80086f0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80086fc:	eeb0 6a48 	vmov.f32	s12, s16
 8008700:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8008704:	eea9 9a88 	vfma.f32	s18, s19, s16
 8008708:	ee70 6a27 	vadd.f32	s13, s0, s15
 800870c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8008710:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008714:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8008718:	eea0 7a26 	vfma.f32	s14, s0, s13
 800871c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008720:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008724:	e73e      	b.n	80085a4 <__ieee754_acosf+0x24>
 8008726:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800876c <__ieee754_acosf+0x1ec>
 800872a:	e73b      	b.n	80085a4 <__ieee754_acosf+0x24>
 800872c:	00000000 	.word	0x00000000
 8008730:	40490fdb 	.word	0x40490fdb
 8008734:	3811ef08 	.word	0x3811ef08
 8008738:	3a4f7f04 	.word	0x3a4f7f04
 800873c:	bf303361 	.word	0xbf303361
 8008740:	33a22168 	.word	0x33a22168
 8008744:	bd241146 	.word	0xbd241146
 8008748:	3e4e0aa8 	.word	0x3e4e0aa8
 800874c:	bea6b090 	.word	0xbea6b090
 8008750:	3e2aaaab 	.word	0x3e2aaaab
 8008754:	3d9dc62e 	.word	0x3d9dc62e
 8008758:	4001572d 	.word	0x4001572d
 800875c:	c019d139 	.word	0xc019d139
 8008760:	3fc90fda 	.word	0x3fc90fda
 8008764:	b3a22168 	.word	0xb3a22168
 8008768:	40490fda 	.word	0x40490fda
 800876c:	3fc90fdb 	.word	0x3fc90fdb

08008770 <__ieee754_asinf>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	ee10 5a10 	vmov	r5, s0
 8008776:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800877a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800877e:	ed2d 8b04 	vpush	{d8-d9}
 8008782:	d10c      	bne.n	800879e <__ieee754_asinf+0x2e>
 8008784:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80088fc <__ieee754_asinf+0x18c>
 8008788:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8008900 <__ieee754_asinf+0x190>
 800878c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008790:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008794:	eeb0 0a67 	vmov.f32	s0, s15
 8008798:	ecbd 8b04 	vpop	{d8-d9}
 800879c:	bd38      	pop	{r3, r4, r5, pc}
 800879e:	dd04      	ble.n	80087aa <__ieee754_asinf+0x3a>
 80087a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80087a4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80087a8:	e7f6      	b.n	8008798 <__ieee754_asinf+0x28>
 80087aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80087ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80087b2:	da0b      	bge.n	80087cc <__ieee754_asinf+0x5c>
 80087b4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80087b8:	da52      	bge.n	8008860 <__ieee754_asinf+0xf0>
 80087ba:	eddf 7a52 	vldr	s15, [pc, #328]	; 8008904 <__ieee754_asinf+0x194>
 80087be:	ee70 7a27 	vadd.f32	s15, s0, s15
 80087c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80087c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ca:	dce5      	bgt.n	8008798 <__ieee754_asinf+0x28>
 80087cc:	f001 fb2c 	bl	8009e28 <fabsf>
 80087d0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80087d4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80087d8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80087dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8008908 <__ieee754_asinf+0x198>
 80087e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800890c <__ieee754_asinf+0x19c>
 80087e4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8008910 <__ieee754_asinf+0x1a0>
 80087e8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80087ec:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008914 <__ieee754_asinf+0x1a4>
 80087f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80087f4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008918 <__ieee754_asinf+0x1a8>
 80087f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80087fc:	eddf 7a47 	vldr	s15, [pc, #284]	; 800891c <__ieee754_asinf+0x1ac>
 8008800:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008804:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008920 <__ieee754_asinf+0x1b0>
 8008808:	eea7 9a88 	vfma.f32	s18, s15, s16
 800880c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008924 <__ieee754_asinf+0x1b4>
 8008810:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008814:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008928 <__ieee754_asinf+0x1b8>
 8008818:	eea7 7a88 	vfma.f32	s14, s15, s16
 800881c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800892c <__ieee754_asinf+0x1bc>
 8008820:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008824:	eeb0 0a48 	vmov.f32	s0, s16
 8008828:	eee7 8a88 	vfma.f32	s17, s15, s16
 800882c:	f000 fd30 	bl	8009290 <__ieee754_sqrtf>
 8008830:	4b3f      	ldr	r3, [pc, #252]	; (8008930 <__ieee754_asinf+0x1c0>)
 8008832:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008836:	429c      	cmp	r4, r3
 8008838:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800883c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008840:	dd3d      	ble.n	80088be <__ieee754_asinf+0x14e>
 8008842:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008846:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008934 <__ieee754_asinf+0x1c4>
 800884a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800884e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008900 <__ieee754_asinf+0x190>
 8008852:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008856:	2d00      	cmp	r5, #0
 8008858:	bfd8      	it	le
 800885a:	eeb1 0a40 	vnegle.f32	s0, s0
 800885e:	e79b      	b.n	8008798 <__ieee754_asinf+0x28>
 8008860:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008864:	eddf 6a28 	vldr	s13, [pc, #160]	; 8008908 <__ieee754_asinf+0x198>
 8008868:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800890c <__ieee754_asinf+0x19c>
 800886c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8008920 <__ieee754_asinf+0x1b0>
 8008870:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008874:	eddf 6a27 	vldr	s13, [pc, #156]	; 8008914 <__ieee754_asinf+0x1a4>
 8008878:	eee7 6a27 	vfma.f32	s13, s14, s15
 800887c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008918 <__ieee754_asinf+0x1a8>
 8008880:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008884:	eddf 6a25 	vldr	s13, [pc, #148]	; 800891c <__ieee754_asinf+0x1ac>
 8008888:	eee7 6a27 	vfma.f32	s13, s14, s15
 800888c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008910 <__ieee754_asinf+0x1a0>
 8008890:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008894:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008924 <__ieee754_asinf+0x1b4>
 8008898:	eee7 6a86 	vfma.f32	s13, s15, s12
 800889c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8008928 <__ieee754_asinf+0x1b8>
 80088a0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80088a4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800892c <__ieee754_asinf+0x1bc>
 80088a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80088ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088b0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80088b4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80088b8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80088bc:	e76c      	b.n	8008798 <__ieee754_asinf+0x28>
 80088be:	ee10 3a10 	vmov	r3, s0
 80088c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80088c6:	f023 030f 	bic.w	r3, r3, #15
 80088ca:	ee07 3a10 	vmov	s14, r3
 80088ce:	eea7 8a47 	vfms.f32	s16, s14, s14
 80088d2:	ee70 7a07 	vadd.f32	s15, s0, s14
 80088d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80088da:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80088de:	eddf 7a07 	vldr	s15, [pc, #28]	; 80088fc <__ieee754_asinf+0x18c>
 80088e2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80088e6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80088ea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008938 <__ieee754_asinf+0x1c8>
 80088ee:	eeb0 6a40 	vmov.f32	s12, s0
 80088f2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80088f6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80088fa:	e7aa      	b.n	8008852 <__ieee754_asinf+0xe2>
 80088fc:	b33bbd2e 	.word	0xb33bbd2e
 8008900:	3fc90fdb 	.word	0x3fc90fdb
 8008904:	7149f2ca 	.word	0x7149f2ca
 8008908:	3811ef08 	.word	0x3811ef08
 800890c:	3a4f7f04 	.word	0x3a4f7f04
 8008910:	3e2aaaab 	.word	0x3e2aaaab
 8008914:	bd241146 	.word	0xbd241146
 8008918:	3e4e0aa8 	.word	0x3e4e0aa8
 800891c:	bea6b090 	.word	0xbea6b090
 8008920:	3d9dc62e 	.word	0x3d9dc62e
 8008924:	bf303361 	.word	0xbf303361
 8008928:	4001572d 	.word	0x4001572d
 800892c:	c019d139 	.word	0xc019d139
 8008930:	3f799999 	.word	0x3f799999
 8008934:	333bbd2e 	.word	0x333bbd2e
 8008938:	3f490fdb 	.word	0x3f490fdb

0800893c <__ieee754_atan2f>:
 800893c:	ee10 2a90 	vmov	r2, s1
 8008940:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008944:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008948:	b510      	push	{r4, lr}
 800894a:	eef0 7a40 	vmov.f32	s15, s0
 800894e:	dc06      	bgt.n	800895e <__ieee754_atan2f+0x22>
 8008950:	ee10 0a10 	vmov	r0, s0
 8008954:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008958:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800895c:	dd04      	ble.n	8008968 <__ieee754_atan2f+0x2c>
 800895e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008962:	eeb0 0a67 	vmov.f32	s0, s15
 8008966:	bd10      	pop	{r4, pc}
 8008968:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800896c:	d103      	bne.n	8008976 <__ieee754_atan2f+0x3a>
 800896e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008972:	f001 b985 	b.w	8009c80 <atanf>
 8008976:	1794      	asrs	r4, r2, #30
 8008978:	f004 0402 	and.w	r4, r4, #2
 800897c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008980:	b943      	cbnz	r3, 8008994 <__ieee754_atan2f+0x58>
 8008982:	2c02      	cmp	r4, #2
 8008984:	d05e      	beq.n	8008a44 <__ieee754_atan2f+0x108>
 8008986:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008a58 <__ieee754_atan2f+0x11c>
 800898a:	2c03      	cmp	r4, #3
 800898c:	bf08      	it	eq
 800898e:	eef0 7a47 	vmoveq.f32	s15, s14
 8008992:	e7e6      	b.n	8008962 <__ieee754_atan2f+0x26>
 8008994:	b941      	cbnz	r1, 80089a8 <__ieee754_atan2f+0x6c>
 8008996:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008a5c <__ieee754_atan2f+0x120>
 800899a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008a60 <__ieee754_atan2f+0x124>
 800899e:	2800      	cmp	r0, #0
 80089a0:	bfb8      	it	lt
 80089a2:	eef0 7a40 	vmovlt.f32	s15, s0
 80089a6:	e7dc      	b.n	8008962 <__ieee754_atan2f+0x26>
 80089a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80089ac:	d110      	bne.n	80089d0 <__ieee754_atan2f+0x94>
 80089ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80089b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80089b6:	d107      	bne.n	80089c8 <__ieee754_atan2f+0x8c>
 80089b8:	2c02      	cmp	r4, #2
 80089ba:	d846      	bhi.n	8008a4a <__ieee754_atan2f+0x10e>
 80089bc:	4b29      	ldr	r3, [pc, #164]	; (8008a64 <__ieee754_atan2f+0x128>)
 80089be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089c2:	edd4 7a00 	vldr	s15, [r4]
 80089c6:	e7cc      	b.n	8008962 <__ieee754_atan2f+0x26>
 80089c8:	2c02      	cmp	r4, #2
 80089ca:	d841      	bhi.n	8008a50 <__ieee754_atan2f+0x114>
 80089cc:	4b26      	ldr	r3, [pc, #152]	; (8008a68 <__ieee754_atan2f+0x12c>)
 80089ce:	e7f6      	b.n	80089be <__ieee754_atan2f+0x82>
 80089d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80089d4:	d0df      	beq.n	8008996 <__ieee754_atan2f+0x5a>
 80089d6:	1a5b      	subs	r3, r3, r1
 80089d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80089dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80089e0:	da1a      	bge.n	8008a18 <__ieee754_atan2f+0xdc>
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	da01      	bge.n	80089ea <__ieee754_atan2f+0xae>
 80089e6:	313c      	adds	r1, #60	; 0x3c
 80089e8:	db19      	blt.n	8008a1e <__ieee754_atan2f+0xe2>
 80089ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80089ee:	f001 fa1b 	bl	8009e28 <fabsf>
 80089f2:	f001 f945 	bl	8009c80 <atanf>
 80089f6:	eef0 7a40 	vmov.f32	s15, s0
 80089fa:	2c01      	cmp	r4, #1
 80089fc:	d012      	beq.n	8008a24 <__ieee754_atan2f+0xe8>
 80089fe:	2c02      	cmp	r4, #2
 8008a00:	d017      	beq.n	8008a32 <__ieee754_atan2f+0xf6>
 8008a02:	2c00      	cmp	r4, #0
 8008a04:	d0ad      	beq.n	8008962 <__ieee754_atan2f+0x26>
 8008a06:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008a6c <__ieee754_atan2f+0x130>
 8008a0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008a0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008a70 <__ieee754_atan2f+0x134>
 8008a12:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008a16:	e7a4      	b.n	8008962 <__ieee754_atan2f+0x26>
 8008a18:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008a5c <__ieee754_atan2f+0x120>
 8008a1c:	e7ed      	b.n	80089fa <__ieee754_atan2f+0xbe>
 8008a1e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008a74 <__ieee754_atan2f+0x138>
 8008a22:	e7ea      	b.n	80089fa <__ieee754_atan2f+0xbe>
 8008a24:	ee17 3a90 	vmov	r3, s15
 8008a28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	e797      	b.n	8008962 <__ieee754_atan2f+0x26>
 8008a32:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008a6c <__ieee754_atan2f+0x130>
 8008a36:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008a3a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008a70 <__ieee754_atan2f+0x134>
 8008a3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008a42:	e78e      	b.n	8008962 <__ieee754_atan2f+0x26>
 8008a44:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008a70 <__ieee754_atan2f+0x134>
 8008a48:	e78b      	b.n	8008962 <__ieee754_atan2f+0x26>
 8008a4a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008a78 <__ieee754_atan2f+0x13c>
 8008a4e:	e788      	b.n	8008962 <__ieee754_atan2f+0x26>
 8008a50:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008a74 <__ieee754_atan2f+0x138>
 8008a54:	e785      	b.n	8008962 <__ieee754_atan2f+0x26>
 8008a56:	bf00      	nop
 8008a58:	c0490fdb 	.word	0xc0490fdb
 8008a5c:	3fc90fdb 	.word	0x3fc90fdb
 8008a60:	bfc90fdb 	.word	0xbfc90fdb
 8008a64:	0800a078 	.word	0x0800a078
 8008a68:	0800a084 	.word	0x0800a084
 8008a6c:	33bbbd2e 	.word	0x33bbbd2e
 8008a70:	40490fdb 	.word	0x40490fdb
 8008a74:	00000000 	.word	0x00000000
 8008a78:	3f490fdb 	.word	0x3f490fdb

08008a7c <__ieee754_powf>:
 8008a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a80:	ee10 4a90 	vmov	r4, s1
 8008a84:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8008a88:	ed2d 8b02 	vpush	{d8}
 8008a8c:	ee10 6a10 	vmov	r6, s0
 8008a90:	eeb0 8a40 	vmov.f32	s16, s0
 8008a94:	eef0 8a60 	vmov.f32	s17, s1
 8008a98:	d10c      	bne.n	8008ab4 <__ieee754_powf+0x38>
 8008a9a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8008a9e:	0076      	lsls	r6, r6, #1
 8008aa0:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8008aa4:	f240 8296 	bls.w	8008fd4 <__ieee754_powf+0x558>
 8008aa8:	ee38 0a28 	vadd.f32	s0, s16, s17
 8008aac:	ecbd 8b02 	vpop	{d8}
 8008ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008ab8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008abc:	dcf4      	bgt.n	8008aa8 <__ieee754_powf+0x2c>
 8008abe:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8008ac2:	dd08      	ble.n	8008ad6 <__ieee754_powf+0x5a>
 8008ac4:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8008ac8:	d1ee      	bne.n	8008aa8 <__ieee754_powf+0x2c>
 8008aca:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8008ace:	0064      	lsls	r4, r4, #1
 8008ad0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8008ad4:	e7e6      	b.n	8008aa4 <__ieee754_powf+0x28>
 8008ad6:	2e00      	cmp	r6, #0
 8008ad8:	da20      	bge.n	8008b1c <__ieee754_powf+0xa0>
 8008ada:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8008ade:	da2d      	bge.n	8008b3c <__ieee754_powf+0xc0>
 8008ae0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008ae4:	f2c0 827f 	blt.w	8008fe6 <__ieee754_powf+0x56a>
 8008ae8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8008aec:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008af0:	fa48 f703 	asr.w	r7, r8, r3
 8008af4:	fa07 f303 	lsl.w	r3, r7, r3
 8008af8:	4543      	cmp	r3, r8
 8008afa:	f040 8274 	bne.w	8008fe6 <__ieee754_powf+0x56a>
 8008afe:	f007 0701 	and.w	r7, r7, #1
 8008b02:	f1c7 0702 	rsb	r7, r7, #2
 8008b06:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008b0a:	d11f      	bne.n	8008b4c <__ieee754_powf+0xd0>
 8008b0c:	2c00      	cmp	r4, #0
 8008b0e:	f280 8267 	bge.w	8008fe0 <__ieee754_powf+0x564>
 8008b12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008b16:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008b1a:	e7c7      	b.n	8008aac <__ieee754_powf+0x30>
 8008b1c:	2700      	movs	r7, #0
 8008b1e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8008b22:	d1f0      	bne.n	8008b06 <__ieee754_powf+0x8a>
 8008b24:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8008b28:	f000 8254 	beq.w	8008fd4 <__ieee754_powf+0x558>
 8008b2c:	dd08      	ble.n	8008b40 <__ieee754_powf+0xc4>
 8008b2e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8008e38 <__ieee754_powf+0x3bc>
 8008b32:	2c00      	cmp	r4, #0
 8008b34:	bfa8      	it	ge
 8008b36:	eeb0 0a68 	vmovge.f32	s0, s17
 8008b3a:	e7b7      	b.n	8008aac <__ieee754_powf+0x30>
 8008b3c:	2702      	movs	r7, #2
 8008b3e:	e7ee      	b.n	8008b1e <__ieee754_powf+0xa2>
 8008b40:	2c00      	cmp	r4, #0
 8008b42:	f280 824a 	bge.w	8008fda <__ieee754_powf+0x55e>
 8008b46:	eeb1 0a68 	vneg.f32	s0, s17
 8008b4a:	e7af      	b.n	8008aac <__ieee754_powf+0x30>
 8008b4c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8008b50:	d102      	bne.n	8008b58 <__ieee754_powf+0xdc>
 8008b52:	ee28 0a08 	vmul.f32	s0, s16, s16
 8008b56:	e7a9      	b.n	8008aac <__ieee754_powf+0x30>
 8008b58:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008b5c:	eeb0 0a48 	vmov.f32	s0, s16
 8008b60:	d107      	bne.n	8008b72 <__ieee754_powf+0xf6>
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	db05      	blt.n	8008b72 <__ieee754_powf+0xf6>
 8008b66:	ecbd 8b02 	vpop	{d8}
 8008b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6e:	f000 bb8f 	b.w	8009290 <__ieee754_sqrtf>
 8008b72:	f001 f959 	bl	8009e28 <fabsf>
 8008b76:	b125      	cbz	r5, 8008b82 <__ieee754_powf+0x106>
 8008b78:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8008b7c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008b80:	d116      	bne.n	8008bb0 <__ieee754_powf+0x134>
 8008b82:	2c00      	cmp	r4, #0
 8008b84:	bfbc      	itt	lt
 8008b86:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8008b8a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008b8e:	2e00      	cmp	r6, #0
 8008b90:	da8c      	bge.n	8008aac <__ieee754_powf+0x30>
 8008b92:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8008b96:	ea55 0307 	orrs.w	r3, r5, r7
 8008b9a:	d104      	bne.n	8008ba6 <__ieee754_powf+0x12a>
 8008b9c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008ba0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008ba4:	e782      	b.n	8008aac <__ieee754_powf+0x30>
 8008ba6:	2f01      	cmp	r7, #1
 8008ba8:	d180      	bne.n	8008aac <__ieee754_powf+0x30>
 8008baa:	eeb1 0a40 	vneg.f32	s0, s0
 8008bae:	e77d      	b.n	8008aac <__ieee754_powf+0x30>
 8008bb0:	0ff0      	lsrs	r0, r6, #31
 8008bb2:	3801      	subs	r0, #1
 8008bb4:	ea57 0300 	orrs.w	r3, r7, r0
 8008bb8:	d104      	bne.n	8008bc4 <__ieee754_powf+0x148>
 8008bba:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008bbe:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008bc2:	e773      	b.n	8008aac <__ieee754_powf+0x30>
 8008bc4:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8008bc8:	dd74      	ble.n	8008cb4 <__ieee754_powf+0x238>
 8008bca:	4b9c      	ldr	r3, [pc, #624]	; (8008e3c <__ieee754_powf+0x3c0>)
 8008bcc:	429d      	cmp	r5, r3
 8008bce:	dc08      	bgt.n	8008be2 <__ieee754_powf+0x166>
 8008bd0:	2c00      	cmp	r4, #0
 8008bd2:	da0b      	bge.n	8008bec <__ieee754_powf+0x170>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	ecbd 8b02 	vpop	{d8}
 8008bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bde:	f000 be95 	b.w	800990c <__math_oflowf>
 8008be2:	4b97      	ldr	r3, [pc, #604]	; (8008e40 <__ieee754_powf+0x3c4>)
 8008be4:	429d      	cmp	r5, r3
 8008be6:	dd08      	ble.n	8008bfa <__ieee754_powf+0x17e>
 8008be8:	2c00      	cmp	r4, #0
 8008bea:	dcf3      	bgt.n	8008bd4 <__ieee754_powf+0x158>
 8008bec:	2000      	movs	r0, #0
 8008bee:	ecbd 8b02 	vpop	{d8}
 8008bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf6:	f000 be83 	b.w	8009900 <__math_uflowf>
 8008bfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008bfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c02:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008e44 <__ieee754_powf+0x3c8>
 8008c06:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008c0a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008c0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008c12:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8008c16:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8008e48 <__ieee754_powf+0x3cc>
 8008c22:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8008c26:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8008e4c <__ieee754_powf+0x3d0>
 8008c2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008c2e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8008e50 <__ieee754_powf+0x3d4>
 8008c32:	eef0 6a67 	vmov.f32	s13, s15
 8008c36:	eee0 6a07 	vfma.f32	s13, s0, s14
 8008c3a:	ee16 3a90 	vmov	r3, s13
 8008c3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008c42:	f023 030f 	bic.w	r3, r3, #15
 8008c46:	ee00 3a90 	vmov	s1, r3
 8008c4a:	eee0 0a47 	vfms.f32	s1, s0, s14
 8008c4e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008c52:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8008c56:	f024 040f 	bic.w	r4, r4, #15
 8008c5a:	ee07 4a10 	vmov	s14, r4
 8008c5e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8008c62:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8008c6e:	3f01      	subs	r7, #1
 8008c70:	ea57 0200 	orrs.w	r2, r7, r0
 8008c74:	ee07 4a10 	vmov	s14, r4
 8008c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c7c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008c80:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8008c84:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008c88:	ee17 4a10 	vmov	r4, s14
 8008c8c:	bf08      	it	eq
 8008c8e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8008c92:	2c00      	cmp	r4, #0
 8008c94:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008c98:	f340 817e 	ble.w	8008f98 <__ieee754_powf+0x51c>
 8008c9c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8008ca0:	f340 80f8 	ble.w	8008e94 <__ieee754_powf+0x418>
 8008ca4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cac:	bf4c      	ite	mi
 8008cae:	2001      	movmi	r0, #1
 8008cb0:	2000      	movpl	r0, #0
 8008cb2:	e790      	b.n	8008bd6 <__ieee754_powf+0x15a>
 8008cb4:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8008cb8:	bf01      	itttt	eq
 8008cba:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8008e54 <__ieee754_powf+0x3d8>
 8008cbe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008cc2:	f06f 0217 	mvneq.w	r2, #23
 8008cc6:	ee17 5a90 	vmoveq	r5, s15
 8008cca:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8008cce:	bf18      	it	ne
 8008cd0:	2200      	movne	r2, #0
 8008cd2:	3b7f      	subs	r3, #127	; 0x7f
 8008cd4:	4413      	add	r3, r2
 8008cd6:	4a60      	ldr	r2, [pc, #384]	; (8008e58 <__ieee754_powf+0x3dc>)
 8008cd8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8008cdc:	4295      	cmp	r5, r2
 8008cde:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8008ce2:	dd06      	ble.n	8008cf2 <__ieee754_powf+0x276>
 8008ce4:	4a5d      	ldr	r2, [pc, #372]	; (8008e5c <__ieee754_powf+0x3e0>)
 8008ce6:	4295      	cmp	r5, r2
 8008ce8:	f340 80a4 	ble.w	8008e34 <__ieee754_powf+0x3b8>
 8008cec:	3301      	adds	r3, #1
 8008cee:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	4a5a      	ldr	r2, [pc, #360]	; (8008e60 <__ieee754_powf+0x3e4>)
 8008cf6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8008cfa:	ee07 1a90 	vmov	s15, r1
 8008cfe:	ed92 7a00 	vldr	s14, [r2]
 8008d02:	4a58      	ldr	r2, [pc, #352]	; (8008e64 <__ieee754_powf+0x3e8>)
 8008d04:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008d08:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008d0c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8008d10:	1049      	asrs	r1, r1, #1
 8008d12:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8008d16:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8008d1a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8008d1e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8008d22:	ee06 1a10 	vmov	s12, r1
 8008d26:	ee65 4a26 	vmul.f32	s9, s10, s13
 8008d2a:	ee36 7a47 	vsub.f32	s14, s12, s14
 8008d2e:	ee14 6a90 	vmov	r6, s9
 8008d32:	4016      	ands	r6, r2
 8008d34:	ee05 6a90 	vmov	s11, r6
 8008d38:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8008d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d40:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008e68 <__ieee754_powf+0x3ec>
 8008d44:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8008d48:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8008d4c:	ee25 6a26 	vmul.f32	s12, s10, s13
 8008d50:	eddf 6a46 	vldr	s13, [pc, #280]	; 8008e6c <__ieee754_powf+0x3f0>
 8008d54:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008d58:	eddf 6a45 	vldr	s13, [pc, #276]	; 8008e70 <__ieee754_powf+0x3f4>
 8008d5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008d60:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008e44 <__ieee754_powf+0x3c8>
 8008d64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d68:	eddf 6a42 	vldr	s13, [pc, #264]	; 8008e74 <__ieee754_powf+0x3f8>
 8008d6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008d70:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8008e78 <__ieee754_powf+0x3fc>
 8008d74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d78:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8008d7c:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8008d80:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008d84:	eee5 6a07 	vfma.f32	s13, s10, s14
 8008d88:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8008d8c:	eef0 7a45 	vmov.f32	s15, s10
 8008d90:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8008d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d98:	ee17 1a90 	vmov	r1, s15
 8008d9c:	4011      	ands	r1, r2
 8008d9e:	ee07 1a90 	vmov	s15, r1
 8008da2:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8008da6:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8008daa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008dae:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008db2:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008db6:	eeb0 6a47 	vmov.f32	s12, s14
 8008dba:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8008dbe:	ee16 1a10 	vmov	r1, s12
 8008dc2:	4011      	ands	r1, r2
 8008dc4:	ee06 1a90 	vmov	s13, r1
 8008dc8:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8008dcc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008e7c <__ieee754_powf+0x400>
 8008dd0:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8008e80 <__ieee754_powf+0x404>
 8008dd4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008dd8:	ee06 1a10 	vmov	s12, r1
 8008ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008de0:	eddf 7a28 	vldr	s15, [pc, #160]	; 8008e84 <__ieee754_powf+0x408>
 8008de4:	4928      	ldr	r1, [pc, #160]	; (8008e88 <__ieee754_powf+0x40c>)
 8008de6:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008dea:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008dee:	edd1 7a00 	vldr	s15, [r1]
 8008df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	4b24      	ldr	r3, [pc, #144]	; (8008e8c <__ieee754_powf+0x410>)
 8008dfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008e00:	eef0 7a47 	vmov.f32	s15, s14
 8008e04:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008e08:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8008e0c:	edd5 0a00 	vldr	s1, [r5]
 8008e10:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e18:	ee17 3a90 	vmov	r3, s15
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8008e26:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8008e2a:	eee6 6a65 	vfms.f32	s13, s12, s11
 8008e2e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8008e32:	e70e      	b.n	8008c52 <__ieee754_powf+0x1d6>
 8008e34:	2501      	movs	r5, #1
 8008e36:	e75d      	b.n	8008cf4 <__ieee754_powf+0x278>
 8008e38:	00000000 	.word	0x00000000
 8008e3c:	3f7ffff3 	.word	0x3f7ffff3
 8008e40:	3f800007 	.word	0x3f800007
 8008e44:	3eaaaaab 	.word	0x3eaaaaab
 8008e48:	3fb8aa3b 	.word	0x3fb8aa3b
 8008e4c:	36eca570 	.word	0x36eca570
 8008e50:	3fb8aa00 	.word	0x3fb8aa00
 8008e54:	4b800000 	.word	0x4b800000
 8008e58:	001cc471 	.word	0x001cc471
 8008e5c:	005db3d6 	.word	0x005db3d6
 8008e60:	0800a090 	.word	0x0800a090
 8008e64:	fffff000 	.word	0xfffff000
 8008e68:	3e6c3255 	.word	0x3e6c3255
 8008e6c:	3e53f142 	.word	0x3e53f142
 8008e70:	3e8ba305 	.word	0x3e8ba305
 8008e74:	3edb6db7 	.word	0x3edb6db7
 8008e78:	3f19999a 	.word	0x3f19999a
 8008e7c:	3f76384f 	.word	0x3f76384f
 8008e80:	3f763800 	.word	0x3f763800
 8008e84:	369dc3a0 	.word	0x369dc3a0
 8008e88:	0800a0a0 	.word	0x0800a0a0
 8008e8c:	0800a098 	.word	0x0800a098
 8008e90:	3338aa3c 	.word	0x3338aa3c
 8008e94:	f040 8095 	bne.w	8008fc2 <__ieee754_powf+0x546>
 8008e98:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8008e90 <__ieee754_powf+0x414>
 8008e9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ea0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008ea4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eac:	f73f aefa 	bgt.w	8008ca4 <__ieee754_powf+0x228>
 8008eb0:	15db      	asrs	r3, r3, #23
 8008eb2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8008eb6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008eba:	4103      	asrs	r3, r0
 8008ebc:	4423      	add	r3, r4
 8008ebe:	494b      	ldr	r1, [pc, #300]	; (8008fec <__ieee754_powf+0x570>)
 8008ec0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008ec4:	3a7f      	subs	r2, #127	; 0x7f
 8008ec6:	4111      	asrs	r1, r2
 8008ec8:	ea23 0101 	bic.w	r1, r3, r1
 8008ecc:	ee07 1a10 	vmov	s14, r1
 8008ed0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8008ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ed8:	f1c2 0217 	rsb	r2, r2, #23
 8008edc:	4110      	asrs	r0, r2
 8008ede:	2c00      	cmp	r4, #0
 8008ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ee4:	bfb8      	it	lt
 8008ee6:	4240      	neglt	r0, r0
 8008ee8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008eec:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8008ff0 <__ieee754_powf+0x574>
 8008ef0:	eddf 6a40 	vldr	s13, [pc, #256]	; 8008ff4 <__ieee754_powf+0x578>
 8008ef4:	ee17 3a10 	vmov	r3, s14
 8008ef8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008efc:	f023 030f 	bic.w	r3, r3, #15
 8008f00:	ee07 3a10 	vmov	s14, r3
 8008f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f08:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008f0c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008f10:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008ff8 <__ieee754_powf+0x57c>
 8008f14:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8008f18:	eef0 7a40 	vmov.f32	s15, s0
 8008f1c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008f20:	eeb0 6a67 	vmov.f32	s12, s15
 8008f24:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008f28:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008f2c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008f30:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008ffc <__ieee754_powf+0x580>
 8008f34:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8009000 <__ieee754_powf+0x584>
 8008f38:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008f3c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8009004 <__ieee754_powf+0x588>
 8008f40:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008f44:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009008 <__ieee754_powf+0x58c>
 8008f48:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008f4c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800900c <__ieee754_powf+0x590>
 8008f50:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008f54:	eef0 6a67 	vmov.f32	s13, s15
 8008f58:	eee6 6a47 	vfms.f32	s13, s12, s14
 8008f5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f60:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8008f64:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8008f68:	eea7 0a80 	vfma.f32	s0, s15, s0
 8008f6c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008f70:	ee37 0a40 	vsub.f32	s0, s14, s0
 8008f74:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008f78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008f7c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008f80:	ee10 3a10 	vmov	r3, s0
 8008f84:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008f88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f8c:	da1f      	bge.n	8008fce <__ieee754_powf+0x552>
 8008f8e:	f000 ffa7 	bl	8009ee0 <scalbnf>
 8008f92:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008f96:	e589      	b.n	8008aac <__ieee754_powf+0x30>
 8008f98:	4a1d      	ldr	r2, [pc, #116]	; (8009010 <__ieee754_powf+0x594>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	dd07      	ble.n	8008fae <__ieee754_powf+0x532>
 8008f9e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa6:	bf4c      	ite	mi
 8008fa8:	2001      	movmi	r0, #1
 8008faa:	2000      	movpl	r0, #0
 8008fac:	e61f      	b.n	8008bee <__ieee754_powf+0x172>
 8008fae:	d108      	bne.n	8008fc2 <__ieee754_powf+0x546>
 8008fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fb4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbc:	f6ff af78 	blt.w	8008eb0 <__ieee754_powf+0x434>
 8008fc0:	e7ed      	b.n	8008f9e <__ieee754_powf+0x522>
 8008fc2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008fc6:	f73f af73 	bgt.w	8008eb0 <__ieee754_powf+0x434>
 8008fca:	2000      	movs	r0, #0
 8008fcc:	e78c      	b.n	8008ee8 <__ieee754_powf+0x46c>
 8008fce:	ee00 3a10 	vmov	s0, r3
 8008fd2:	e7de      	b.n	8008f92 <__ieee754_powf+0x516>
 8008fd4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008fd8:	e568      	b.n	8008aac <__ieee754_powf+0x30>
 8008fda:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009014 <__ieee754_powf+0x598>
 8008fde:	e565      	b.n	8008aac <__ieee754_powf+0x30>
 8008fe0:	eeb0 0a48 	vmov.f32	s0, s16
 8008fe4:	e562      	b.n	8008aac <__ieee754_powf+0x30>
 8008fe6:	2700      	movs	r7, #0
 8008fe8:	e58d      	b.n	8008b06 <__ieee754_powf+0x8a>
 8008fea:	bf00      	nop
 8008fec:	007fffff 	.word	0x007fffff
 8008ff0:	35bfbe8c 	.word	0x35bfbe8c
 8008ff4:	3f317200 	.word	0x3f317200
 8008ff8:	3f317218 	.word	0x3f317218
 8008ffc:	b5ddea0e 	.word	0xb5ddea0e
 8009000:	3331bb4c 	.word	0x3331bb4c
 8009004:	388ab355 	.word	0x388ab355
 8009008:	bb360b61 	.word	0xbb360b61
 800900c:	3e2aaaab 	.word	0x3e2aaaab
 8009010:	43160000 	.word	0x43160000
 8009014:	00000000 	.word	0x00000000

08009018 <__ieee754_rem_pio2f>:
 8009018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800901a:	ee10 6a10 	vmov	r6, s0
 800901e:	4b8e      	ldr	r3, [pc, #568]	; (8009258 <__ieee754_rem_pio2f+0x240>)
 8009020:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009024:	429d      	cmp	r5, r3
 8009026:	b087      	sub	sp, #28
 8009028:	eef0 7a40 	vmov.f32	s15, s0
 800902c:	4604      	mov	r4, r0
 800902e:	dc05      	bgt.n	800903c <__ieee754_rem_pio2f+0x24>
 8009030:	2300      	movs	r3, #0
 8009032:	ed80 0a00 	vstr	s0, [r0]
 8009036:	6043      	str	r3, [r0, #4]
 8009038:	2000      	movs	r0, #0
 800903a:	e01a      	b.n	8009072 <__ieee754_rem_pio2f+0x5a>
 800903c:	4b87      	ldr	r3, [pc, #540]	; (800925c <__ieee754_rem_pio2f+0x244>)
 800903e:	429d      	cmp	r5, r3
 8009040:	dc46      	bgt.n	80090d0 <__ieee754_rem_pio2f+0xb8>
 8009042:	2e00      	cmp	r6, #0
 8009044:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8009260 <__ieee754_rem_pio2f+0x248>
 8009048:	4b86      	ldr	r3, [pc, #536]	; (8009264 <__ieee754_rem_pio2f+0x24c>)
 800904a:	f025 050f 	bic.w	r5, r5, #15
 800904e:	dd1f      	ble.n	8009090 <__ieee754_rem_pio2f+0x78>
 8009050:	429d      	cmp	r5, r3
 8009052:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009056:	d00e      	beq.n	8009076 <__ieee754_rem_pio2f+0x5e>
 8009058:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009268 <__ieee754_rem_pio2f+0x250>
 800905c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009060:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009064:	ed80 0a00 	vstr	s0, [r0]
 8009068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800906c:	2001      	movs	r0, #1
 800906e:	edc4 7a01 	vstr	s15, [r4, #4]
 8009072:	b007      	add	sp, #28
 8009074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009076:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800926c <__ieee754_rem_pio2f+0x254>
 800907a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009270 <__ieee754_rem_pio2f+0x258>
 800907e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009082:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009086:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800908a:	edc0 6a00 	vstr	s13, [r0]
 800908e:	e7eb      	b.n	8009068 <__ieee754_rem_pio2f+0x50>
 8009090:	429d      	cmp	r5, r3
 8009092:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009096:	d00e      	beq.n	80090b6 <__ieee754_rem_pio2f+0x9e>
 8009098:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009268 <__ieee754_rem_pio2f+0x250>
 800909c:	ee37 0a87 	vadd.f32	s0, s15, s14
 80090a0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80090a4:	ed80 0a00 	vstr	s0, [r0]
 80090a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
 80090b0:	edc4 7a01 	vstr	s15, [r4, #4]
 80090b4:	e7dd      	b.n	8009072 <__ieee754_rem_pio2f+0x5a>
 80090b6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800926c <__ieee754_rem_pio2f+0x254>
 80090ba:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009270 <__ieee754_rem_pio2f+0x258>
 80090be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80090c2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80090c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090ca:	edc0 6a00 	vstr	s13, [r0]
 80090ce:	e7eb      	b.n	80090a8 <__ieee754_rem_pio2f+0x90>
 80090d0:	4b68      	ldr	r3, [pc, #416]	; (8009274 <__ieee754_rem_pio2f+0x25c>)
 80090d2:	429d      	cmp	r5, r3
 80090d4:	dc72      	bgt.n	80091bc <__ieee754_rem_pio2f+0x1a4>
 80090d6:	f000 fea7 	bl	8009e28 <fabsf>
 80090da:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009278 <__ieee754_rem_pio2f+0x260>
 80090de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80090e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80090e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090ee:	ee17 0a90 	vmov	r0, s15
 80090f2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009260 <__ieee754_rem_pio2f+0x248>
 80090f6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80090fa:	281f      	cmp	r0, #31
 80090fc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009268 <__ieee754_rem_pio2f+0x250>
 8009100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009104:	eeb1 6a47 	vneg.f32	s12, s14
 8009108:	ee70 6a67 	vsub.f32	s13, s0, s15
 800910c:	ee16 2a90 	vmov	r2, s13
 8009110:	dc1c      	bgt.n	800914c <__ieee754_rem_pio2f+0x134>
 8009112:	495a      	ldr	r1, [pc, #360]	; (800927c <__ieee754_rem_pio2f+0x264>)
 8009114:	1e47      	subs	r7, r0, #1
 8009116:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800911a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800911e:	428b      	cmp	r3, r1
 8009120:	d014      	beq.n	800914c <__ieee754_rem_pio2f+0x134>
 8009122:	6022      	str	r2, [r4, #0]
 8009124:	ed94 7a00 	vldr	s14, [r4]
 8009128:	ee30 0a47 	vsub.f32	s0, s0, s14
 800912c:	2e00      	cmp	r6, #0
 800912e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009132:	ed84 0a01 	vstr	s0, [r4, #4]
 8009136:	da9c      	bge.n	8009072 <__ieee754_rem_pio2f+0x5a>
 8009138:	eeb1 7a47 	vneg.f32	s14, s14
 800913c:	eeb1 0a40 	vneg.f32	s0, s0
 8009140:	ed84 7a00 	vstr	s14, [r4]
 8009144:	ed84 0a01 	vstr	s0, [r4, #4]
 8009148:	4240      	negs	r0, r0
 800914a:	e792      	b.n	8009072 <__ieee754_rem_pio2f+0x5a>
 800914c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009150:	15eb      	asrs	r3, r5, #23
 8009152:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8009156:	2d08      	cmp	r5, #8
 8009158:	dde3      	ble.n	8009122 <__ieee754_rem_pio2f+0x10a>
 800915a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800926c <__ieee754_rem_pio2f+0x254>
 800915e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009270 <__ieee754_rem_pio2f+0x258>
 8009162:	eef0 6a40 	vmov.f32	s13, s0
 8009166:	eee6 6a27 	vfma.f32	s13, s12, s15
 800916a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800916e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8009172:	eef0 7a40 	vmov.f32	s15, s0
 8009176:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800917a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800917e:	ee15 2a90 	vmov	r2, s11
 8009182:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009186:	1a5b      	subs	r3, r3, r1
 8009188:	2b19      	cmp	r3, #25
 800918a:	dc04      	bgt.n	8009196 <__ieee754_rem_pio2f+0x17e>
 800918c:	edc4 5a00 	vstr	s11, [r4]
 8009190:	eeb0 0a66 	vmov.f32	s0, s13
 8009194:	e7c6      	b.n	8009124 <__ieee754_rem_pio2f+0x10c>
 8009196:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009280 <__ieee754_rem_pio2f+0x268>
 800919a:	eeb0 0a66 	vmov.f32	s0, s13
 800919e:	eea6 0a25 	vfma.f32	s0, s12, s11
 80091a2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80091a6:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009284 <__ieee754_rem_pio2f+0x26c>
 80091aa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80091ae:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80091b2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80091b6:	ed84 7a00 	vstr	s14, [r4]
 80091ba:	e7b3      	b.n	8009124 <__ieee754_rem_pio2f+0x10c>
 80091bc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80091c0:	db06      	blt.n	80091d0 <__ieee754_rem_pio2f+0x1b8>
 80091c2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80091c6:	edc0 7a01 	vstr	s15, [r0, #4]
 80091ca:	edc0 7a00 	vstr	s15, [r0]
 80091ce:	e733      	b.n	8009038 <__ieee754_rem_pio2f+0x20>
 80091d0:	15ea      	asrs	r2, r5, #23
 80091d2:	3a86      	subs	r2, #134	; 0x86
 80091d4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80091e0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009288 <__ieee754_rem_pio2f+0x270>
 80091e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091ec:	ed8d 7a03 	vstr	s14, [sp, #12]
 80091f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80091f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80091f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009200:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009204:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009208:	eef5 7a40 	vcmp.f32	s15, #0.0
 800920c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009210:	edcd 7a05 	vstr	s15, [sp, #20]
 8009214:	d11e      	bne.n	8009254 <__ieee754_rem_pio2f+0x23c>
 8009216:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800921a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921e:	bf14      	ite	ne
 8009220:	2302      	movne	r3, #2
 8009222:	2301      	moveq	r3, #1
 8009224:	4919      	ldr	r1, [pc, #100]	; (800928c <__ieee754_rem_pio2f+0x274>)
 8009226:	9101      	str	r1, [sp, #4]
 8009228:	2102      	movs	r1, #2
 800922a:	9100      	str	r1, [sp, #0]
 800922c:	a803      	add	r0, sp, #12
 800922e:	4621      	mov	r1, r4
 8009230:	f000 f892 	bl	8009358 <__kernel_rem_pio2f>
 8009234:	2e00      	cmp	r6, #0
 8009236:	f6bf af1c 	bge.w	8009072 <__ieee754_rem_pio2f+0x5a>
 800923a:	edd4 7a00 	vldr	s15, [r4]
 800923e:	eef1 7a67 	vneg.f32	s15, s15
 8009242:	edc4 7a00 	vstr	s15, [r4]
 8009246:	edd4 7a01 	vldr	s15, [r4, #4]
 800924a:	eef1 7a67 	vneg.f32	s15, s15
 800924e:	edc4 7a01 	vstr	s15, [r4, #4]
 8009252:	e779      	b.n	8009148 <__ieee754_rem_pio2f+0x130>
 8009254:	2303      	movs	r3, #3
 8009256:	e7e5      	b.n	8009224 <__ieee754_rem_pio2f+0x20c>
 8009258:	3f490fd8 	.word	0x3f490fd8
 800925c:	4016cbe3 	.word	0x4016cbe3
 8009260:	3fc90f80 	.word	0x3fc90f80
 8009264:	3fc90fd0 	.word	0x3fc90fd0
 8009268:	37354443 	.word	0x37354443
 800926c:	37354400 	.word	0x37354400
 8009270:	2e85a308 	.word	0x2e85a308
 8009274:	43490f80 	.word	0x43490f80
 8009278:	3f22f984 	.word	0x3f22f984
 800927c:	0800a0a8 	.word	0x0800a0a8
 8009280:	2e85a300 	.word	0x2e85a300
 8009284:	248d3132 	.word	0x248d3132
 8009288:	43800000 	.word	0x43800000
 800928c:	0800a128 	.word	0x0800a128

08009290 <__ieee754_sqrtf>:
 8009290:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009294:	4770      	bx	lr
	...

08009298 <__kernel_cosf>:
 8009298:	ee10 3a10 	vmov	r3, s0
 800929c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092a0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80092a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80092a8:	da05      	bge.n	80092b6 <__kernel_cosf+0x1e>
 80092aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80092ae:	ee17 2a90 	vmov	r2, s15
 80092b2:	2a00      	cmp	r2, #0
 80092b4:	d03d      	beq.n	8009332 <__kernel_cosf+0x9a>
 80092b6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80092ba:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009338 <__kernel_cosf+0xa0>
 80092be:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800933c <__kernel_cosf+0xa4>
 80092c2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009340 <__kernel_cosf+0xa8>
 80092c6:	4a1f      	ldr	r2, [pc, #124]	; (8009344 <__kernel_cosf+0xac>)
 80092c8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80092cc:	4293      	cmp	r3, r2
 80092ce:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009348 <__kernel_cosf+0xb0>
 80092d2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80092d6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800934c <__kernel_cosf+0xb4>
 80092da:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80092de:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009350 <__kernel_cosf+0xb8>
 80092e2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80092e6:	eeb0 7a66 	vmov.f32	s14, s13
 80092ea:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80092ee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80092f2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80092f6:	ee67 6a25 	vmul.f32	s13, s14, s11
 80092fa:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80092fe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009302:	dc04      	bgt.n	800930e <__kernel_cosf+0x76>
 8009304:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009308:	ee36 0a47 	vsub.f32	s0, s12, s14
 800930c:	4770      	bx	lr
 800930e:	4a11      	ldr	r2, [pc, #68]	; (8009354 <__kernel_cosf+0xbc>)
 8009310:	4293      	cmp	r3, r2
 8009312:	bfda      	itte	le
 8009314:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009318:	ee06 3a90 	vmovle	s13, r3
 800931c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8009320:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009324:	ee36 0a66 	vsub.f32	s0, s12, s13
 8009328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800932c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009330:	4770      	bx	lr
 8009332:	eeb0 0a46 	vmov.f32	s0, s12
 8009336:	4770      	bx	lr
 8009338:	ad47d74e 	.word	0xad47d74e
 800933c:	310f74f6 	.word	0x310f74f6
 8009340:	3d2aaaab 	.word	0x3d2aaaab
 8009344:	3e999999 	.word	0x3e999999
 8009348:	b493f27c 	.word	0xb493f27c
 800934c:	37d00d01 	.word	0x37d00d01
 8009350:	bab60b61 	.word	0xbab60b61
 8009354:	3f480000 	.word	0x3f480000

08009358 <__kernel_rem_pio2f>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	ed2d 8b04 	vpush	{d8-d9}
 8009360:	b0d9      	sub	sp, #356	; 0x164
 8009362:	4688      	mov	r8, r1
 8009364:	9002      	str	r0, [sp, #8]
 8009366:	49bb      	ldr	r1, [pc, #748]	; (8009654 <__kernel_rem_pio2f+0x2fc>)
 8009368:	9866      	ldr	r0, [sp, #408]	; 0x198
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009370:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8009374:	1e59      	subs	r1, r3, #1
 8009376:	1d13      	adds	r3, r2, #4
 8009378:	db27      	blt.n	80093ca <__kernel_rem_pio2f+0x72>
 800937a:	f1b2 0b03 	subs.w	fp, r2, #3
 800937e:	bf48      	it	mi
 8009380:	f102 0b04 	addmi.w	fp, r2, #4
 8009384:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8009388:	1c45      	adds	r5, r0, #1
 800938a:	00ec      	lsls	r4, r5, #3
 800938c:	1a47      	subs	r7, r0, r1
 800938e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8009664 <__kernel_rem_pio2f+0x30c>
 8009392:	9403      	str	r4, [sp, #12]
 8009394:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8009398:	eb0a 0c01 	add.w	ip, sl, r1
 800939c:	ae1c      	add	r6, sp, #112	; 0x70
 800939e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80093a2:	2400      	movs	r4, #0
 80093a4:	4564      	cmp	r4, ip
 80093a6:	dd12      	ble.n	80093ce <__kernel_rem_pio2f+0x76>
 80093a8:	9b01      	ldr	r3, [sp, #4]
 80093aa:	ac1c      	add	r4, sp, #112	; 0x70
 80093ac:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80093b0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80093b4:	f04f 0c00 	mov.w	ip, #0
 80093b8:	45d4      	cmp	ip, sl
 80093ba:	dc27      	bgt.n	800940c <__kernel_rem_pio2f+0xb4>
 80093bc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80093c0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009664 <__kernel_rem_pio2f+0x30c>
 80093c4:	4627      	mov	r7, r4
 80093c6:	2600      	movs	r6, #0
 80093c8:	e016      	b.n	80093f8 <__kernel_rem_pio2f+0xa0>
 80093ca:	2000      	movs	r0, #0
 80093cc:	e7dc      	b.n	8009388 <__kernel_rem_pio2f+0x30>
 80093ce:	42e7      	cmn	r7, r4
 80093d0:	bf5d      	ittte	pl
 80093d2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80093d6:	ee07 3a90 	vmovpl	s15, r3
 80093da:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80093de:	eef0 7a47 	vmovmi.f32	s15, s14
 80093e2:	ece6 7a01 	vstmia	r6!, {s15}
 80093e6:	3401      	adds	r4, #1
 80093e8:	e7dc      	b.n	80093a4 <__kernel_rem_pio2f+0x4c>
 80093ea:	ecf9 6a01 	vldmia	r9!, {s13}
 80093ee:	ed97 7a00 	vldr	s14, [r7]
 80093f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80093f6:	3601      	adds	r6, #1
 80093f8:	428e      	cmp	r6, r1
 80093fa:	f1a7 0704 	sub.w	r7, r7, #4
 80093fe:	ddf4      	ble.n	80093ea <__kernel_rem_pio2f+0x92>
 8009400:	eceb 7a01 	vstmia	fp!, {s15}
 8009404:	f10c 0c01 	add.w	ip, ip, #1
 8009408:	3404      	adds	r4, #4
 800940a:	e7d5      	b.n	80093b8 <__kernel_rem_pio2f+0x60>
 800940c:	ab08      	add	r3, sp, #32
 800940e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009412:	eddf 8a93 	vldr	s17, [pc, #588]	; 8009660 <__kernel_rem_pio2f+0x308>
 8009416:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800965c <__kernel_rem_pio2f+0x304>
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8009420:	4656      	mov	r6, sl
 8009422:	00b3      	lsls	r3, r6, #2
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	ab58      	add	r3, sp, #352	; 0x160
 8009428:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800942c:	ac08      	add	r4, sp, #32
 800942e:	ab44      	add	r3, sp, #272	; 0x110
 8009430:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8009434:	46a4      	mov	ip, r4
 8009436:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800943a:	4637      	mov	r7, r6
 800943c:	2f00      	cmp	r7, #0
 800943e:	f1a0 0004 	sub.w	r0, r0, #4
 8009442:	dc4f      	bgt.n	80094e4 <__kernel_rem_pio2f+0x18c>
 8009444:	4628      	mov	r0, r5
 8009446:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800944a:	f000 fd49 	bl	8009ee0 <scalbnf>
 800944e:	eeb0 8a40 	vmov.f32	s16, s0
 8009452:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009456:	ee28 0a00 	vmul.f32	s0, s16, s0
 800945a:	f000 fcf9 	bl	8009e50 <floorf>
 800945e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009462:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009466:	2d00      	cmp	r5, #0
 8009468:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800946c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009470:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009474:	ee17 9a90 	vmov	r9, s15
 8009478:	ee38 8a40 	vsub.f32	s16, s16, s0
 800947c:	dd44      	ble.n	8009508 <__kernel_rem_pio2f+0x1b0>
 800947e:	f106 3cff 	add.w	ip, r6, #4294967295
 8009482:	ab08      	add	r3, sp, #32
 8009484:	f1c5 0e08 	rsb	lr, r5, #8
 8009488:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800948c:	fa47 f00e 	asr.w	r0, r7, lr
 8009490:	4481      	add	r9, r0
 8009492:	fa00 f00e 	lsl.w	r0, r0, lr
 8009496:	1a3f      	subs	r7, r7, r0
 8009498:	f1c5 0007 	rsb	r0, r5, #7
 800949c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80094a0:	4107      	asrs	r7, r0
 80094a2:	2f00      	cmp	r7, #0
 80094a4:	dd3f      	ble.n	8009526 <__kernel_rem_pio2f+0x1ce>
 80094a6:	f04f 0e00 	mov.w	lr, #0
 80094aa:	f109 0901 	add.w	r9, r9, #1
 80094ae:	4673      	mov	r3, lr
 80094b0:	4576      	cmp	r6, lr
 80094b2:	dc6b      	bgt.n	800958c <__kernel_rem_pio2f+0x234>
 80094b4:	2d00      	cmp	r5, #0
 80094b6:	dd04      	ble.n	80094c2 <__kernel_rem_pio2f+0x16a>
 80094b8:	2d01      	cmp	r5, #1
 80094ba:	d078      	beq.n	80095ae <__kernel_rem_pio2f+0x256>
 80094bc:	2d02      	cmp	r5, #2
 80094be:	f000 8081 	beq.w	80095c4 <__kernel_rem_pio2f+0x26c>
 80094c2:	2f02      	cmp	r7, #2
 80094c4:	d12f      	bne.n	8009526 <__kernel_rem_pio2f+0x1ce>
 80094c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80094ca:	ee30 8a48 	vsub.f32	s16, s0, s16
 80094ce:	b353      	cbz	r3, 8009526 <__kernel_rem_pio2f+0x1ce>
 80094d0:	4628      	mov	r0, r5
 80094d2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80094d6:	f000 fd03 	bl	8009ee0 <scalbnf>
 80094da:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80094de:	ee38 8a40 	vsub.f32	s16, s16, s0
 80094e2:	e020      	b.n	8009526 <__kernel_rem_pio2f+0x1ce>
 80094e4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80094e8:	3f01      	subs	r7, #1
 80094ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094f2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80094f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80094fa:	ecac 0a01 	vstmia	ip!, {s0}
 80094fe:	ed90 0a00 	vldr	s0, [r0]
 8009502:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009506:	e799      	b.n	800943c <__kernel_rem_pio2f+0xe4>
 8009508:	d105      	bne.n	8009516 <__kernel_rem_pio2f+0x1be>
 800950a:	1e70      	subs	r0, r6, #1
 800950c:	ab08      	add	r3, sp, #32
 800950e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8009512:	11ff      	asrs	r7, r7, #7
 8009514:	e7c5      	b.n	80094a2 <__kernel_rem_pio2f+0x14a>
 8009516:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800951a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800951e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009522:	da31      	bge.n	8009588 <__kernel_rem_pio2f+0x230>
 8009524:	2700      	movs	r7, #0
 8009526:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800952a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952e:	f040 809b 	bne.w	8009668 <__kernel_rem_pio2f+0x310>
 8009532:	1e74      	subs	r4, r6, #1
 8009534:	46a4      	mov	ip, r4
 8009536:	2000      	movs	r0, #0
 8009538:	45d4      	cmp	ip, sl
 800953a:	da4a      	bge.n	80095d2 <__kernel_rem_pio2f+0x27a>
 800953c:	2800      	cmp	r0, #0
 800953e:	d07a      	beq.n	8009636 <__kernel_rem_pio2f+0x2de>
 8009540:	ab08      	add	r3, sp, #32
 8009542:	3d08      	subs	r5, #8
 8009544:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 8081 	beq.w	8009650 <__kernel_rem_pio2f+0x2f8>
 800954e:	4628      	mov	r0, r5
 8009550:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009554:	00a5      	lsls	r5, r4, #2
 8009556:	f000 fcc3 	bl	8009ee0 <scalbnf>
 800955a:	aa44      	add	r2, sp, #272	; 0x110
 800955c:	1d2b      	adds	r3, r5, #4
 800955e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009660 <__kernel_rem_pio2f+0x308>
 8009562:	18d1      	adds	r1, r2, r3
 8009564:	4622      	mov	r2, r4
 8009566:	2a00      	cmp	r2, #0
 8009568:	f280 80ae 	bge.w	80096c8 <__kernel_rem_pio2f+0x370>
 800956c:	4622      	mov	r2, r4
 800956e:	2a00      	cmp	r2, #0
 8009570:	f2c0 80cc 	blt.w	800970c <__kernel_rem_pio2f+0x3b4>
 8009574:	a944      	add	r1, sp, #272	; 0x110
 8009576:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800957a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009658 <__kernel_rem_pio2f+0x300>
 800957e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009664 <__kernel_rem_pio2f+0x30c>
 8009582:	2000      	movs	r0, #0
 8009584:	1aa1      	subs	r1, r4, r2
 8009586:	e0b6      	b.n	80096f6 <__kernel_rem_pio2f+0x39e>
 8009588:	2702      	movs	r7, #2
 800958a:	e78c      	b.n	80094a6 <__kernel_rem_pio2f+0x14e>
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	b94b      	cbnz	r3, 80095a4 <__kernel_rem_pio2f+0x24c>
 8009590:	b118      	cbz	r0, 800959a <__kernel_rem_pio2f+0x242>
 8009592:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8009596:	6020      	str	r0, [r4, #0]
 8009598:	2001      	movs	r0, #1
 800959a:	f10e 0e01 	add.w	lr, lr, #1
 800959e:	3404      	adds	r4, #4
 80095a0:	4603      	mov	r3, r0
 80095a2:	e785      	b.n	80094b0 <__kernel_rem_pio2f+0x158>
 80095a4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80095a8:	6020      	str	r0, [r4, #0]
 80095aa:	4618      	mov	r0, r3
 80095ac:	e7f5      	b.n	800959a <__kernel_rem_pio2f+0x242>
 80095ae:	1e74      	subs	r4, r6, #1
 80095b0:	a808      	add	r0, sp, #32
 80095b2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80095b6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80095ba:	f10d 0c20 	add.w	ip, sp, #32
 80095be:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80095c2:	e77e      	b.n	80094c2 <__kernel_rem_pio2f+0x16a>
 80095c4:	1e74      	subs	r4, r6, #1
 80095c6:	a808      	add	r0, sp, #32
 80095c8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80095cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80095d0:	e7f3      	b.n	80095ba <__kernel_rem_pio2f+0x262>
 80095d2:	ab08      	add	r3, sp, #32
 80095d4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80095d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095dc:	4318      	orrs	r0, r3
 80095de:	e7ab      	b.n	8009538 <__kernel_rem_pio2f+0x1e0>
 80095e0:	f10c 0c01 	add.w	ip, ip, #1
 80095e4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80095e8:	2c00      	cmp	r4, #0
 80095ea:	d0f9      	beq.n	80095e0 <__kernel_rem_pio2f+0x288>
 80095ec:	9b05      	ldr	r3, [sp, #20]
 80095ee:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80095f2:	eb0d 0003 	add.w	r0, sp, r3
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	18f4      	adds	r4, r6, r3
 80095fa:	ab1c      	add	r3, sp, #112	; 0x70
 80095fc:	1c77      	adds	r7, r6, #1
 80095fe:	384c      	subs	r0, #76	; 0x4c
 8009600:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009604:	4466      	add	r6, ip
 8009606:	42be      	cmp	r6, r7
 8009608:	f6ff af0b 	blt.w	8009422 <__kernel_rem_pio2f+0xca>
 800960c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009610:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009614:	ee07 3a90 	vmov	s15, r3
 8009618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800961c:	f04f 0c00 	mov.w	ip, #0
 8009620:	ece4 7a01 	vstmia	r4!, {s15}
 8009624:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009664 <__kernel_rem_pio2f+0x30c>
 8009628:	46a1      	mov	r9, r4
 800962a:	458c      	cmp	ip, r1
 800962c:	dd07      	ble.n	800963e <__kernel_rem_pio2f+0x2e6>
 800962e:	ece0 7a01 	vstmia	r0!, {s15}
 8009632:	3701      	adds	r7, #1
 8009634:	e7e7      	b.n	8009606 <__kernel_rem_pio2f+0x2ae>
 8009636:	9804      	ldr	r0, [sp, #16]
 8009638:	f04f 0c01 	mov.w	ip, #1
 800963c:	e7d2      	b.n	80095e4 <__kernel_rem_pio2f+0x28c>
 800963e:	ecfe 6a01 	vldmia	lr!, {s13}
 8009642:	ed39 7a01 	vldmdb	r9!, {s14}
 8009646:	f10c 0c01 	add.w	ip, ip, #1
 800964a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800964e:	e7ec      	b.n	800962a <__kernel_rem_pio2f+0x2d2>
 8009650:	3c01      	subs	r4, #1
 8009652:	e775      	b.n	8009540 <__kernel_rem_pio2f+0x1e8>
 8009654:	0800a46c 	.word	0x0800a46c
 8009658:	0800a440 	.word	0x0800a440
 800965c:	43800000 	.word	0x43800000
 8009660:	3b800000 	.word	0x3b800000
 8009664:	00000000 	.word	0x00000000
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	eeb0 0a48 	vmov.f32	s0, s16
 800966e:	1a98      	subs	r0, r3, r2
 8009670:	f000 fc36 	bl	8009ee0 <scalbnf>
 8009674:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800965c <__kernel_rem_pio2f+0x304>
 8009678:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800967c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009680:	db19      	blt.n	80096b6 <__kernel_rem_pio2f+0x35e>
 8009682:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009660 <__kernel_rem_pio2f+0x308>
 8009686:	ee60 7a27 	vmul.f32	s15, s0, s15
 800968a:	aa08      	add	r2, sp, #32
 800968c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009690:	1c74      	adds	r4, r6, #1
 8009692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009696:	3508      	adds	r5, #8
 8009698:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800969c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80096a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80096a4:	ee10 3a10 	vmov	r3, s0
 80096a8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80096ac:	ee17 3a90 	vmov	r3, s15
 80096b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80096b4:	e74b      	b.n	800954e <__kernel_rem_pio2f+0x1f6>
 80096b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80096ba:	aa08      	add	r2, sp, #32
 80096bc:	ee10 3a10 	vmov	r3, s0
 80096c0:	4634      	mov	r4, r6
 80096c2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80096c6:	e742      	b.n	800954e <__kernel_rem_pio2f+0x1f6>
 80096c8:	a808      	add	r0, sp, #32
 80096ca:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80096ce:	9001      	str	r0, [sp, #4]
 80096d0:	ee07 0a90 	vmov	s15, r0
 80096d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096d8:	3a01      	subs	r2, #1
 80096da:	ee67 7a80 	vmul.f32	s15, s15, s0
 80096de:	ee20 0a07 	vmul.f32	s0, s0, s14
 80096e2:	ed61 7a01 	vstmdb	r1!, {s15}
 80096e6:	e73e      	b.n	8009566 <__kernel_rem_pio2f+0x20e>
 80096e8:	ecfc 6a01 	vldmia	ip!, {s13}
 80096ec:	ecb6 7a01 	vldmia	r6!, {s14}
 80096f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80096f4:	3001      	adds	r0, #1
 80096f6:	4550      	cmp	r0, sl
 80096f8:	dc01      	bgt.n	80096fe <__kernel_rem_pio2f+0x3a6>
 80096fa:	4288      	cmp	r0, r1
 80096fc:	ddf4      	ble.n	80096e8 <__kernel_rem_pio2f+0x390>
 80096fe:	a858      	add	r0, sp, #352	; 0x160
 8009700:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009704:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009708:	3a01      	subs	r2, #1
 800970a:	e730      	b.n	800956e <__kernel_rem_pio2f+0x216>
 800970c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800970e:	2a02      	cmp	r2, #2
 8009710:	dc09      	bgt.n	8009726 <__kernel_rem_pio2f+0x3ce>
 8009712:	2a00      	cmp	r2, #0
 8009714:	dc2a      	bgt.n	800976c <__kernel_rem_pio2f+0x414>
 8009716:	d043      	beq.n	80097a0 <__kernel_rem_pio2f+0x448>
 8009718:	f009 0007 	and.w	r0, r9, #7
 800971c:	b059      	add	sp, #356	; 0x164
 800971e:	ecbd 8b04 	vpop	{d8-d9}
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009728:	2b03      	cmp	r3, #3
 800972a:	d1f5      	bne.n	8009718 <__kernel_rem_pio2f+0x3c0>
 800972c:	ab30      	add	r3, sp, #192	; 0xc0
 800972e:	442b      	add	r3, r5
 8009730:	461a      	mov	r2, r3
 8009732:	4619      	mov	r1, r3
 8009734:	4620      	mov	r0, r4
 8009736:	2800      	cmp	r0, #0
 8009738:	f1a1 0104 	sub.w	r1, r1, #4
 800973c:	dc51      	bgt.n	80097e2 <__kernel_rem_pio2f+0x48a>
 800973e:	4621      	mov	r1, r4
 8009740:	2901      	cmp	r1, #1
 8009742:	f1a2 0204 	sub.w	r2, r2, #4
 8009746:	dc5c      	bgt.n	8009802 <__kernel_rem_pio2f+0x4aa>
 8009748:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8009664 <__kernel_rem_pio2f+0x30c>
 800974c:	3304      	adds	r3, #4
 800974e:	2c01      	cmp	r4, #1
 8009750:	dc67      	bgt.n	8009822 <__kernel_rem_pio2f+0x4ca>
 8009752:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8009756:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800975a:	2f00      	cmp	r7, #0
 800975c:	d167      	bne.n	800982e <__kernel_rem_pio2f+0x4d6>
 800975e:	edc8 6a00 	vstr	s13, [r8]
 8009762:	ed88 7a01 	vstr	s14, [r8, #4]
 8009766:	edc8 7a02 	vstr	s15, [r8, #8]
 800976a:	e7d5      	b.n	8009718 <__kernel_rem_pio2f+0x3c0>
 800976c:	aa30      	add	r2, sp, #192	; 0xc0
 800976e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8009664 <__kernel_rem_pio2f+0x30c>
 8009772:	4413      	add	r3, r2
 8009774:	4622      	mov	r2, r4
 8009776:	2a00      	cmp	r2, #0
 8009778:	da24      	bge.n	80097c4 <__kernel_rem_pio2f+0x46c>
 800977a:	b34f      	cbz	r7, 80097d0 <__kernel_rem_pio2f+0x478>
 800977c:	eef1 7a47 	vneg.f32	s15, s14
 8009780:	edc8 7a00 	vstr	s15, [r8]
 8009784:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8009788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800978c:	aa31      	add	r2, sp, #196	; 0xc4
 800978e:	2301      	movs	r3, #1
 8009790:	429c      	cmp	r4, r3
 8009792:	da20      	bge.n	80097d6 <__kernel_rem_pio2f+0x47e>
 8009794:	b10f      	cbz	r7, 800979a <__kernel_rem_pio2f+0x442>
 8009796:	eef1 7a67 	vneg.f32	s15, s15
 800979a:	edc8 7a01 	vstr	s15, [r8, #4]
 800979e:	e7bb      	b.n	8009718 <__kernel_rem_pio2f+0x3c0>
 80097a0:	aa30      	add	r2, sp, #192	; 0xc0
 80097a2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8009664 <__kernel_rem_pio2f+0x30c>
 80097a6:	4413      	add	r3, r2
 80097a8:	2c00      	cmp	r4, #0
 80097aa:	da05      	bge.n	80097b8 <__kernel_rem_pio2f+0x460>
 80097ac:	b10f      	cbz	r7, 80097b2 <__kernel_rem_pio2f+0x45a>
 80097ae:	eef1 7a67 	vneg.f32	s15, s15
 80097b2:	edc8 7a00 	vstr	s15, [r8]
 80097b6:	e7af      	b.n	8009718 <__kernel_rem_pio2f+0x3c0>
 80097b8:	ed33 7a01 	vldmdb	r3!, {s14}
 80097bc:	3c01      	subs	r4, #1
 80097be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097c2:	e7f1      	b.n	80097a8 <__kernel_rem_pio2f+0x450>
 80097c4:	ed73 7a01 	vldmdb	r3!, {s15}
 80097c8:	3a01      	subs	r2, #1
 80097ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097ce:	e7d2      	b.n	8009776 <__kernel_rem_pio2f+0x41e>
 80097d0:	eef0 7a47 	vmov.f32	s15, s14
 80097d4:	e7d4      	b.n	8009780 <__kernel_rem_pio2f+0x428>
 80097d6:	ecb2 7a01 	vldmia	r2!, {s14}
 80097da:	3301      	adds	r3, #1
 80097dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097e0:	e7d6      	b.n	8009790 <__kernel_rem_pio2f+0x438>
 80097e2:	edd1 7a00 	vldr	s15, [r1]
 80097e6:	edd1 6a01 	vldr	s13, [r1, #4]
 80097ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80097ee:	3801      	subs	r0, #1
 80097f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097f4:	ed81 7a00 	vstr	s14, [r1]
 80097f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097fc:	edc1 7a01 	vstr	s15, [r1, #4]
 8009800:	e799      	b.n	8009736 <__kernel_rem_pio2f+0x3de>
 8009802:	edd2 7a00 	vldr	s15, [r2]
 8009806:	edd2 6a01 	vldr	s13, [r2, #4]
 800980a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800980e:	3901      	subs	r1, #1
 8009810:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009814:	ed82 7a00 	vstr	s14, [r2]
 8009818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800981c:	edc2 7a01 	vstr	s15, [r2, #4]
 8009820:	e78e      	b.n	8009740 <__kernel_rem_pio2f+0x3e8>
 8009822:	ed33 7a01 	vldmdb	r3!, {s14}
 8009826:	3c01      	subs	r4, #1
 8009828:	ee77 7a87 	vadd.f32	s15, s15, s14
 800982c:	e78f      	b.n	800974e <__kernel_rem_pio2f+0x3f6>
 800982e:	eef1 6a66 	vneg.f32	s13, s13
 8009832:	eeb1 7a47 	vneg.f32	s14, s14
 8009836:	edc8 6a00 	vstr	s13, [r8]
 800983a:	ed88 7a01 	vstr	s14, [r8, #4]
 800983e:	eef1 7a67 	vneg.f32	s15, s15
 8009842:	e790      	b.n	8009766 <__kernel_rem_pio2f+0x40e>

08009844 <__kernel_sinf>:
 8009844:	ee10 3a10 	vmov	r3, s0
 8009848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800984c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009850:	da04      	bge.n	800985c <__kernel_sinf+0x18>
 8009852:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009856:	ee17 3a90 	vmov	r3, s15
 800985a:	b35b      	cbz	r3, 80098b4 <__kernel_sinf+0x70>
 800985c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009860:	eddf 7a15 	vldr	s15, [pc, #84]	; 80098b8 <__kernel_sinf+0x74>
 8009864:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80098bc <__kernel_sinf+0x78>
 8009868:	eea7 6a27 	vfma.f32	s12, s14, s15
 800986c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80098c0 <__kernel_sinf+0x7c>
 8009870:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009874:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80098c4 <__kernel_sinf+0x80>
 8009878:	eea7 6a87 	vfma.f32	s12, s15, s14
 800987c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80098c8 <__kernel_sinf+0x84>
 8009880:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009884:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009888:	b930      	cbnz	r0, 8009898 <__kernel_sinf+0x54>
 800988a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80098cc <__kernel_sinf+0x88>
 800988e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009892:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009896:	4770      	bx	lr
 8009898:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800989c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80098a0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80098a4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80098a8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80098d0 <__kernel_sinf+0x8c>
 80098ac:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80098b0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	2f2ec9d3 	.word	0x2f2ec9d3
 80098bc:	b2d72f34 	.word	0xb2d72f34
 80098c0:	3638ef1b 	.word	0x3638ef1b
 80098c4:	b9500d01 	.word	0xb9500d01
 80098c8:	3c088889 	.word	0x3c088889
 80098cc:	be2aaaab 	.word	0xbe2aaaab
 80098d0:	3e2aaaab 	.word	0x3e2aaaab

080098d4 <with_errnof>:
 80098d4:	b513      	push	{r0, r1, r4, lr}
 80098d6:	4604      	mov	r4, r0
 80098d8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80098dc:	f7fe f906 	bl	8007aec <__errno>
 80098e0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80098e4:	6004      	str	r4, [r0, #0]
 80098e6:	b002      	add	sp, #8
 80098e8:	bd10      	pop	{r4, pc}

080098ea <xflowf>:
 80098ea:	b130      	cbz	r0, 80098fa <xflowf+0x10>
 80098ec:	eef1 7a40 	vneg.f32	s15, s0
 80098f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80098f4:	2022      	movs	r0, #34	; 0x22
 80098f6:	f7ff bfed 	b.w	80098d4 <with_errnof>
 80098fa:	eef0 7a40 	vmov.f32	s15, s0
 80098fe:	e7f7      	b.n	80098f0 <xflowf+0x6>

08009900 <__math_uflowf>:
 8009900:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009908 <__math_uflowf+0x8>
 8009904:	f7ff bff1 	b.w	80098ea <xflowf>
 8009908:	10000000 	.word	0x10000000

0800990c <__math_oflowf>:
 800990c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009914 <__math_oflowf+0x8>
 8009910:	f7ff bfeb 	b.w	80098ea <xflowf>
 8009914:	70000000 	.word	0x70000000

08009918 <atan>:
 8009918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	ec55 4b10 	vmov	r4, r5, d0
 8009920:	4bc3      	ldr	r3, [pc, #780]	; (8009c30 <atan+0x318>)
 8009922:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009926:	429e      	cmp	r6, r3
 8009928:	46ab      	mov	fp, r5
 800992a:	dd18      	ble.n	800995e <atan+0x46>
 800992c:	4bc1      	ldr	r3, [pc, #772]	; (8009c34 <atan+0x31c>)
 800992e:	429e      	cmp	r6, r3
 8009930:	dc01      	bgt.n	8009936 <atan+0x1e>
 8009932:	d109      	bne.n	8009948 <atan+0x30>
 8009934:	b144      	cbz	r4, 8009948 <atan+0x30>
 8009936:	4622      	mov	r2, r4
 8009938:	462b      	mov	r3, r5
 800993a:	4620      	mov	r0, r4
 800993c:	4629      	mov	r1, r5
 800993e:	f7f6 fc69 	bl	8000214 <__adddf3>
 8009942:	4604      	mov	r4, r0
 8009944:	460d      	mov	r5, r1
 8009946:	e006      	b.n	8009956 <atan+0x3e>
 8009948:	f1bb 0f00 	cmp.w	fp, #0
 800994c:	f300 8131 	bgt.w	8009bb2 <atan+0x29a>
 8009950:	a59b      	add	r5, pc, #620	; (adr r5, 8009bc0 <atan+0x2a8>)
 8009952:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009956:	ec45 4b10 	vmov	d0, r4, r5
 800995a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995e:	4bb6      	ldr	r3, [pc, #728]	; (8009c38 <atan+0x320>)
 8009960:	429e      	cmp	r6, r3
 8009962:	dc14      	bgt.n	800998e <atan+0x76>
 8009964:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009968:	429e      	cmp	r6, r3
 800996a:	dc0d      	bgt.n	8009988 <atan+0x70>
 800996c:	a396      	add	r3, pc, #600	; (adr r3, 8009bc8 <atan+0x2b0>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	ee10 0a10 	vmov	r0, s0
 8009976:	4629      	mov	r1, r5
 8009978:	f7f6 fc4c 	bl	8000214 <__adddf3>
 800997c:	4baf      	ldr	r3, [pc, #700]	; (8009c3c <atan+0x324>)
 800997e:	2200      	movs	r2, #0
 8009980:	f7f7 f88e 	bl	8000aa0 <__aeabi_dcmpgt>
 8009984:	2800      	cmp	r0, #0
 8009986:	d1e6      	bne.n	8009956 <atan+0x3e>
 8009988:	f04f 3aff 	mov.w	sl, #4294967295
 800998c:	e02b      	b.n	80099e6 <atan+0xce>
 800998e:	f000 f963 	bl	8009c58 <fabs>
 8009992:	4bab      	ldr	r3, [pc, #684]	; (8009c40 <atan+0x328>)
 8009994:	429e      	cmp	r6, r3
 8009996:	ec55 4b10 	vmov	r4, r5, d0
 800999a:	f300 80bf 	bgt.w	8009b1c <atan+0x204>
 800999e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80099a2:	429e      	cmp	r6, r3
 80099a4:	f300 80a0 	bgt.w	8009ae8 <atan+0x1d0>
 80099a8:	ee10 2a10 	vmov	r2, s0
 80099ac:	ee10 0a10 	vmov	r0, s0
 80099b0:	462b      	mov	r3, r5
 80099b2:	4629      	mov	r1, r5
 80099b4:	f7f6 fc2e 	bl	8000214 <__adddf3>
 80099b8:	4ba0      	ldr	r3, [pc, #640]	; (8009c3c <atan+0x324>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	f7f6 fc28 	bl	8000210 <__aeabi_dsub>
 80099c0:	2200      	movs	r2, #0
 80099c2:	4606      	mov	r6, r0
 80099c4:	460f      	mov	r7, r1
 80099c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7f6 fc21 	bl	8000214 <__adddf3>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4630      	mov	r0, r6
 80099d8:	4639      	mov	r1, r7
 80099da:	f7f6 fefb 	bl	80007d4 <__aeabi_ddiv>
 80099de:	f04f 0a00 	mov.w	sl, #0
 80099e2:	4604      	mov	r4, r0
 80099e4:	460d      	mov	r5, r1
 80099e6:	4622      	mov	r2, r4
 80099e8:	462b      	mov	r3, r5
 80099ea:	4620      	mov	r0, r4
 80099ec:	4629      	mov	r1, r5
 80099ee:	f7f6 fdc7 	bl	8000580 <__aeabi_dmul>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4680      	mov	r8, r0
 80099f8:	4689      	mov	r9, r1
 80099fa:	f7f6 fdc1 	bl	8000580 <__aeabi_dmul>
 80099fe:	a374      	add	r3, pc, #464	; (adr r3, 8009bd0 <atan+0x2b8>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	4606      	mov	r6, r0
 8009a06:	460f      	mov	r7, r1
 8009a08:	f7f6 fdba 	bl	8000580 <__aeabi_dmul>
 8009a0c:	a372      	add	r3, pc, #456	; (adr r3, 8009bd8 <atan+0x2c0>)
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f7f6 fbff 	bl	8000214 <__adddf3>
 8009a16:	4632      	mov	r2, r6
 8009a18:	463b      	mov	r3, r7
 8009a1a:	f7f6 fdb1 	bl	8000580 <__aeabi_dmul>
 8009a1e:	a370      	add	r3, pc, #448	; (adr r3, 8009be0 <atan+0x2c8>)
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	f7f6 fbf6 	bl	8000214 <__adddf3>
 8009a28:	4632      	mov	r2, r6
 8009a2a:	463b      	mov	r3, r7
 8009a2c:	f7f6 fda8 	bl	8000580 <__aeabi_dmul>
 8009a30:	a36d      	add	r3, pc, #436	; (adr r3, 8009be8 <atan+0x2d0>)
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	f7f6 fbed 	bl	8000214 <__adddf3>
 8009a3a:	4632      	mov	r2, r6
 8009a3c:	463b      	mov	r3, r7
 8009a3e:	f7f6 fd9f 	bl	8000580 <__aeabi_dmul>
 8009a42:	a36b      	add	r3, pc, #428	; (adr r3, 8009bf0 <atan+0x2d8>)
 8009a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a48:	f7f6 fbe4 	bl	8000214 <__adddf3>
 8009a4c:	4632      	mov	r2, r6
 8009a4e:	463b      	mov	r3, r7
 8009a50:	f7f6 fd96 	bl	8000580 <__aeabi_dmul>
 8009a54:	a368      	add	r3, pc, #416	; (adr r3, 8009bf8 <atan+0x2e0>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f6 fbdb 	bl	8000214 <__adddf3>
 8009a5e:	4642      	mov	r2, r8
 8009a60:	464b      	mov	r3, r9
 8009a62:	f7f6 fd8d 	bl	8000580 <__aeabi_dmul>
 8009a66:	a366      	add	r3, pc, #408	; (adr r3, 8009c00 <atan+0x2e8>)
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	4680      	mov	r8, r0
 8009a6e:	4689      	mov	r9, r1
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	f7f6 fd84 	bl	8000580 <__aeabi_dmul>
 8009a78:	a363      	add	r3, pc, #396	; (adr r3, 8009c08 <atan+0x2f0>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f7f6 fbc7 	bl	8000210 <__aeabi_dsub>
 8009a82:	4632      	mov	r2, r6
 8009a84:	463b      	mov	r3, r7
 8009a86:	f7f6 fd7b 	bl	8000580 <__aeabi_dmul>
 8009a8a:	a361      	add	r3, pc, #388	; (adr r3, 8009c10 <atan+0x2f8>)
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f7f6 fbbe 	bl	8000210 <__aeabi_dsub>
 8009a94:	4632      	mov	r2, r6
 8009a96:	463b      	mov	r3, r7
 8009a98:	f7f6 fd72 	bl	8000580 <__aeabi_dmul>
 8009a9c:	a35e      	add	r3, pc, #376	; (adr r3, 8009c18 <atan+0x300>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	f7f6 fbb5 	bl	8000210 <__aeabi_dsub>
 8009aa6:	4632      	mov	r2, r6
 8009aa8:	463b      	mov	r3, r7
 8009aaa:	f7f6 fd69 	bl	8000580 <__aeabi_dmul>
 8009aae:	a35c      	add	r3, pc, #368	; (adr r3, 8009c20 <atan+0x308>)
 8009ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab4:	f7f6 fbac 	bl	8000210 <__aeabi_dsub>
 8009ab8:	4632      	mov	r2, r6
 8009aba:	463b      	mov	r3, r7
 8009abc:	f7f6 fd60 	bl	8000580 <__aeabi_dmul>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	f7f6 fba4 	bl	8000214 <__adddf3>
 8009acc:	4622      	mov	r2, r4
 8009ace:	462b      	mov	r3, r5
 8009ad0:	f7f6 fd56 	bl	8000580 <__aeabi_dmul>
 8009ad4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	d14b      	bne.n	8009b76 <atan+0x25e>
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7f6 fb95 	bl	8000210 <__aeabi_dsub>
 8009ae6:	e72c      	b.n	8009942 <atan+0x2a>
 8009ae8:	ee10 0a10 	vmov	r0, s0
 8009aec:	4b53      	ldr	r3, [pc, #332]	; (8009c3c <atan+0x324>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7f6 fb8d 	bl	8000210 <__aeabi_dsub>
 8009af6:	4b51      	ldr	r3, [pc, #324]	; (8009c3c <atan+0x324>)
 8009af8:	4606      	mov	r6, r0
 8009afa:	460f      	mov	r7, r1
 8009afc:	2200      	movs	r2, #0
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 fb87 	bl	8000214 <__adddf3>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	f7f6 fe61 	bl	80007d4 <__aeabi_ddiv>
 8009b12:	f04f 0a01 	mov.w	sl, #1
 8009b16:	4604      	mov	r4, r0
 8009b18:	460d      	mov	r5, r1
 8009b1a:	e764      	b.n	80099e6 <atan+0xce>
 8009b1c:	4b49      	ldr	r3, [pc, #292]	; (8009c44 <atan+0x32c>)
 8009b1e:	429e      	cmp	r6, r3
 8009b20:	da1d      	bge.n	8009b5e <atan+0x246>
 8009b22:	ee10 0a10 	vmov	r0, s0
 8009b26:	4b48      	ldr	r3, [pc, #288]	; (8009c48 <atan+0x330>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	f7f6 fb70 	bl	8000210 <__aeabi_dsub>
 8009b30:	4b45      	ldr	r3, [pc, #276]	; (8009c48 <atan+0x330>)
 8009b32:	4606      	mov	r6, r0
 8009b34:	460f      	mov	r7, r1
 8009b36:	2200      	movs	r2, #0
 8009b38:	4620      	mov	r0, r4
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	f7f6 fd20 	bl	8000580 <__aeabi_dmul>
 8009b40:	4b3e      	ldr	r3, [pc, #248]	; (8009c3c <atan+0x324>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	f7f6 fb66 	bl	8000214 <__adddf3>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	4639      	mov	r1, r7
 8009b50:	f7f6 fe40 	bl	80007d4 <__aeabi_ddiv>
 8009b54:	f04f 0a02 	mov.w	sl, #2
 8009b58:	4604      	mov	r4, r0
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	e743      	b.n	80099e6 <atan+0xce>
 8009b5e:	462b      	mov	r3, r5
 8009b60:	ee10 2a10 	vmov	r2, s0
 8009b64:	4939      	ldr	r1, [pc, #228]	; (8009c4c <atan+0x334>)
 8009b66:	2000      	movs	r0, #0
 8009b68:	f7f6 fe34 	bl	80007d4 <__aeabi_ddiv>
 8009b6c:	f04f 0a03 	mov.w	sl, #3
 8009b70:	4604      	mov	r4, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	e737      	b.n	80099e6 <atan+0xce>
 8009b76:	4b36      	ldr	r3, [pc, #216]	; (8009c50 <atan+0x338>)
 8009b78:	4e36      	ldr	r6, [pc, #216]	; (8009c54 <atan+0x33c>)
 8009b7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009b7e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009b82:	e9da 2300 	ldrd	r2, r3, [sl]
 8009b86:	f7f6 fb43 	bl	8000210 <__aeabi_dsub>
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	f7f6 fb3f 	bl	8000210 <__aeabi_dsub>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009b9a:	f7f6 fb39 	bl	8000210 <__aeabi_dsub>
 8009b9e:	f1bb 0f00 	cmp.w	fp, #0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	460d      	mov	r5, r1
 8009ba6:	f6bf aed6 	bge.w	8009956 <atan+0x3e>
 8009baa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bae:	461d      	mov	r5, r3
 8009bb0:	e6d1      	b.n	8009956 <atan+0x3e>
 8009bb2:	a51d      	add	r5, pc, #116	; (adr r5, 8009c28 <atan+0x310>)
 8009bb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bb8:	e6cd      	b.n	8009956 <atan+0x3e>
 8009bba:	bf00      	nop
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	54442d18 	.word	0x54442d18
 8009bc4:	bff921fb 	.word	0xbff921fb
 8009bc8:	8800759c 	.word	0x8800759c
 8009bcc:	7e37e43c 	.word	0x7e37e43c
 8009bd0:	e322da11 	.word	0xe322da11
 8009bd4:	3f90ad3a 	.word	0x3f90ad3a
 8009bd8:	24760deb 	.word	0x24760deb
 8009bdc:	3fa97b4b 	.word	0x3fa97b4b
 8009be0:	a0d03d51 	.word	0xa0d03d51
 8009be4:	3fb10d66 	.word	0x3fb10d66
 8009be8:	c54c206e 	.word	0xc54c206e
 8009bec:	3fb745cd 	.word	0x3fb745cd
 8009bf0:	920083ff 	.word	0x920083ff
 8009bf4:	3fc24924 	.word	0x3fc24924
 8009bf8:	5555550d 	.word	0x5555550d
 8009bfc:	3fd55555 	.word	0x3fd55555
 8009c00:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c04:	bfa2b444 	.word	0xbfa2b444
 8009c08:	52defd9a 	.word	0x52defd9a
 8009c0c:	3fadde2d 	.word	0x3fadde2d
 8009c10:	af749a6d 	.word	0xaf749a6d
 8009c14:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c18:	fe231671 	.word	0xfe231671
 8009c1c:	3fbc71c6 	.word	0x3fbc71c6
 8009c20:	9998ebc4 	.word	0x9998ebc4
 8009c24:	3fc99999 	.word	0x3fc99999
 8009c28:	54442d18 	.word	0x54442d18
 8009c2c:	3ff921fb 	.word	0x3ff921fb
 8009c30:	440fffff 	.word	0x440fffff
 8009c34:	7ff00000 	.word	0x7ff00000
 8009c38:	3fdbffff 	.word	0x3fdbffff
 8009c3c:	3ff00000 	.word	0x3ff00000
 8009c40:	3ff2ffff 	.word	0x3ff2ffff
 8009c44:	40038000 	.word	0x40038000
 8009c48:	3ff80000 	.word	0x3ff80000
 8009c4c:	bff00000 	.word	0xbff00000
 8009c50:	0800a498 	.word	0x0800a498
 8009c54:	0800a478 	.word	0x0800a478

08009c58 <fabs>:
 8009c58:	ec51 0b10 	vmov	r0, r1, d0
 8009c5c:	ee10 2a10 	vmov	r2, s0
 8009c60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c64:	ec43 2b10 	vmov	d0, r2, r3
 8009c68:	4770      	bx	lr
 8009c6a:	0000      	movs	r0, r0
 8009c6c:	0000      	movs	r0, r0
	...

08009c70 <nan>:
 8009c70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c78 <nan+0x8>
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	00000000 	.word	0x00000000
 8009c7c:	7ff80000 	.word	0x7ff80000

08009c80 <atanf>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	ee10 5a10 	vmov	r5, s0
 8009c86:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009c8a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009c8e:	eef0 7a40 	vmov.f32	s15, s0
 8009c92:	db10      	blt.n	8009cb6 <atanf+0x36>
 8009c94:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009c98:	dd04      	ble.n	8009ca4 <atanf+0x24>
 8009c9a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009ddc <atanf+0x15c>
 8009ca8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009de0 <atanf+0x160>
 8009cac:	2d00      	cmp	r5, #0
 8009cae:	bfd8      	it	le
 8009cb0:	eef0 7a40 	vmovle.f32	s15, s0
 8009cb4:	e7f3      	b.n	8009c9e <atanf+0x1e>
 8009cb6:	4b4b      	ldr	r3, [pc, #300]	; (8009de4 <atanf+0x164>)
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	dc10      	bgt.n	8009cde <atanf+0x5e>
 8009cbc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009cc0:	da0a      	bge.n	8009cd8 <atanf+0x58>
 8009cc2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009de8 <atanf+0x168>
 8009cc6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd6:	dce2      	bgt.n	8009c9e <atanf+0x1e>
 8009cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cdc:	e013      	b.n	8009d06 <atanf+0x86>
 8009cde:	f000 f8a3 	bl	8009e28 <fabsf>
 8009ce2:	4b42      	ldr	r3, [pc, #264]	; (8009dec <atanf+0x16c>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	dc4f      	bgt.n	8009d88 <atanf+0x108>
 8009ce8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009cec:	429c      	cmp	r4, r3
 8009cee:	dc41      	bgt.n	8009d74 <atanf+0xf4>
 8009cf0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009cf4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009cf8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009d0c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009df0 <atanf+0x170>
 8009d10:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009df4 <atanf+0x174>
 8009d14:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009df8 <atanf+0x178>
 8009d18:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009d1c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009d20:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009dfc <atanf+0x17c>
 8009d24:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d28:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009e00 <atanf+0x180>
 8009d2c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d30:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009e04 <atanf+0x184>
 8009d34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d38:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009e08 <atanf+0x188>
 8009d3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d40:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009e0c <atanf+0x18c>
 8009d44:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009d48:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009e10 <atanf+0x190>
 8009d4c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009d50:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009e14 <atanf+0x194>
 8009d54:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009d58:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009e18 <atanf+0x198>
 8009d5c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009d60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009d64:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009d68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009d6c:	d121      	bne.n	8009db2 <atanf+0x132>
 8009d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d72:	e794      	b.n	8009c9e <atanf+0x1e>
 8009d74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009d78:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009d7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d80:	2301      	movs	r3, #1
 8009d82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d86:	e7be      	b.n	8009d06 <atanf+0x86>
 8009d88:	4b24      	ldr	r3, [pc, #144]	; (8009e1c <atanf+0x19c>)
 8009d8a:	429c      	cmp	r4, r3
 8009d8c:	dc0b      	bgt.n	8009da6 <atanf+0x126>
 8009d8e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d96:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da4:	e7af      	b.n	8009d06 <atanf+0x86>
 8009da6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009daa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009dae:	2303      	movs	r3, #3
 8009db0:	e7a9      	b.n	8009d06 <atanf+0x86>
 8009db2:	4a1b      	ldr	r2, [pc, #108]	; (8009e20 <atanf+0x1a0>)
 8009db4:	491b      	ldr	r1, [pc, #108]	; (8009e24 <atanf+0x1a4>)
 8009db6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009dba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009dbe:	ed93 0a00 	vldr	s0, [r3]
 8009dc2:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009dc6:	ed92 0a00 	vldr	s0, [r2]
 8009dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dce:	2d00      	cmp	r5, #0
 8009dd0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009dd4:	bfb8      	it	lt
 8009dd6:	eef1 7a67 	vneglt.f32	s15, s15
 8009dda:	e760      	b.n	8009c9e <atanf+0x1e>
 8009ddc:	3fc90fdb 	.word	0x3fc90fdb
 8009de0:	bfc90fdb 	.word	0xbfc90fdb
 8009de4:	3edfffff 	.word	0x3edfffff
 8009de8:	7149f2ca 	.word	0x7149f2ca
 8009dec:	3f97ffff 	.word	0x3f97ffff
 8009df0:	3c8569d7 	.word	0x3c8569d7
 8009df4:	3d4bda59 	.word	0x3d4bda59
 8009df8:	bd6ef16b 	.word	0xbd6ef16b
 8009dfc:	3d886b35 	.word	0x3d886b35
 8009e00:	3dba2e6e 	.word	0x3dba2e6e
 8009e04:	3e124925 	.word	0x3e124925
 8009e08:	3eaaaaab 	.word	0x3eaaaaab
 8009e0c:	bd15a221 	.word	0xbd15a221
 8009e10:	bd9d8795 	.word	0xbd9d8795
 8009e14:	bde38e38 	.word	0xbde38e38
 8009e18:	be4ccccd 	.word	0xbe4ccccd
 8009e1c:	401bffff 	.word	0x401bffff
 8009e20:	0800a4b8 	.word	0x0800a4b8
 8009e24:	0800a4c8 	.word	0x0800a4c8

08009e28 <fabsf>:
 8009e28:	ee10 3a10 	vmov	r3, s0
 8009e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e30:	ee00 3a10 	vmov	s0, r3
 8009e34:	4770      	bx	lr

08009e36 <finitef>:
 8009e36:	b082      	sub	sp, #8
 8009e38:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009e3c:	9801      	ldr	r0, [sp, #4]
 8009e3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009e42:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009e46:	bfac      	ite	ge
 8009e48:	2000      	movge	r0, #0
 8009e4a:	2001      	movlt	r0, #1
 8009e4c:	b002      	add	sp, #8
 8009e4e:	4770      	bx	lr

08009e50 <floorf>:
 8009e50:	ee10 3a10 	vmov	r3, s0
 8009e54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009e58:	3a7f      	subs	r2, #127	; 0x7f
 8009e5a:	2a16      	cmp	r2, #22
 8009e5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e60:	dc2a      	bgt.n	8009eb8 <floorf+0x68>
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	da11      	bge.n	8009e8a <floorf+0x3a>
 8009e66:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009ec8 <floorf+0x78>
 8009e6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e76:	dd05      	ble.n	8009e84 <floorf+0x34>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	da23      	bge.n	8009ec4 <floorf+0x74>
 8009e7c:	4a13      	ldr	r2, [pc, #76]	; (8009ecc <floorf+0x7c>)
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	bf18      	it	ne
 8009e82:	4613      	movne	r3, r2
 8009e84:	ee00 3a10 	vmov	s0, r3
 8009e88:	4770      	bx	lr
 8009e8a:	4911      	ldr	r1, [pc, #68]	; (8009ed0 <floorf+0x80>)
 8009e8c:	4111      	asrs	r1, r2
 8009e8e:	420b      	tst	r3, r1
 8009e90:	d0fa      	beq.n	8009e88 <floorf+0x38>
 8009e92:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009ec8 <floorf+0x78>
 8009e96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea2:	ddef      	ble.n	8009e84 <floorf+0x34>
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	bfbe      	ittt	lt
 8009ea8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009eac:	fa40 f202 	asrlt.w	r2, r0, r2
 8009eb0:	189b      	addlt	r3, r3, r2
 8009eb2:	ea23 0301 	bic.w	r3, r3, r1
 8009eb6:	e7e5      	b.n	8009e84 <floorf+0x34>
 8009eb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009ebc:	d3e4      	bcc.n	8009e88 <floorf+0x38>
 8009ebe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ec2:	4770      	bx	lr
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e7dd      	b.n	8009e84 <floorf+0x34>
 8009ec8:	7149f2ca 	.word	0x7149f2ca
 8009ecc:	bf800000 	.word	0xbf800000
 8009ed0:	007fffff 	.word	0x007fffff

08009ed4 <nanf>:
 8009ed4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009edc <nanf+0x8>
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	7fc00000 	.word	0x7fc00000

08009ee0 <scalbnf>:
 8009ee0:	ee10 3a10 	vmov	r3, s0
 8009ee4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009ee8:	d025      	beq.n	8009f36 <scalbnf+0x56>
 8009eea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009eee:	d302      	bcc.n	8009ef6 <scalbnf+0x16>
 8009ef0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ef4:	4770      	bx	lr
 8009ef6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009efa:	d122      	bne.n	8009f42 <scalbnf+0x62>
 8009efc:	4b2a      	ldr	r3, [pc, #168]	; (8009fa8 <scalbnf+0xc8>)
 8009efe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009fac <scalbnf+0xcc>
 8009f02:	4298      	cmp	r0, r3
 8009f04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009f08:	db16      	blt.n	8009f38 <scalbnf+0x58>
 8009f0a:	ee10 3a10 	vmov	r3, s0
 8009f0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009f12:	3a19      	subs	r2, #25
 8009f14:	4402      	add	r2, r0
 8009f16:	2afe      	cmp	r2, #254	; 0xfe
 8009f18:	dd15      	ble.n	8009f46 <scalbnf+0x66>
 8009f1a:	ee10 3a10 	vmov	r3, s0
 8009f1e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009fb0 <scalbnf+0xd0>
 8009f22:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009fb4 <scalbnf+0xd4>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	eeb0 7a67 	vmov.f32	s14, s15
 8009f2c:	bfb8      	it	lt
 8009f2e:	eef0 7a66 	vmovlt.f32	s15, s13
 8009f32:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009f36:	4770      	bx	lr
 8009f38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009fb8 <scalbnf+0xd8>
 8009f3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009f40:	4770      	bx	lr
 8009f42:	0dd2      	lsrs	r2, r2, #23
 8009f44:	e7e6      	b.n	8009f14 <scalbnf+0x34>
 8009f46:	2a00      	cmp	r2, #0
 8009f48:	dd06      	ble.n	8009f58 <scalbnf+0x78>
 8009f4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f4e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009f52:	ee00 3a10 	vmov	s0, r3
 8009f56:	4770      	bx	lr
 8009f58:	f112 0f16 	cmn.w	r2, #22
 8009f5c:	da1a      	bge.n	8009f94 <scalbnf+0xb4>
 8009f5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009f62:	4298      	cmp	r0, r3
 8009f64:	ee10 3a10 	vmov	r3, s0
 8009f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f6c:	dd0a      	ble.n	8009f84 <scalbnf+0xa4>
 8009f6e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009fb0 <scalbnf+0xd0>
 8009f72:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009fb4 <scalbnf+0xd4>
 8009f76:	eef0 7a40 	vmov.f32	s15, s0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	bf18      	it	ne
 8009f7e:	eeb0 0a47 	vmovne.f32	s0, s14
 8009f82:	e7db      	b.n	8009f3c <scalbnf+0x5c>
 8009f84:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009fb8 <scalbnf+0xd8>
 8009f88:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009fbc <scalbnf+0xdc>
 8009f8c:	eef0 7a40 	vmov.f32	s15, s0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	e7f3      	b.n	8009f7c <scalbnf+0x9c>
 8009f94:	3219      	adds	r2, #25
 8009f96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009f9e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009fc0 <scalbnf+0xe0>
 8009fa2:	ee07 3a10 	vmov	s14, r3
 8009fa6:	e7c4      	b.n	8009f32 <scalbnf+0x52>
 8009fa8:	ffff3cb0 	.word	0xffff3cb0
 8009fac:	4c000000 	.word	0x4c000000
 8009fb0:	7149f2ca 	.word	0x7149f2ca
 8009fb4:	f149f2ca 	.word	0xf149f2ca
 8009fb8:	0da24260 	.word	0x0da24260
 8009fbc:	8da24260 	.word	0x8da24260
 8009fc0:	33000000 	.word	0x33000000

08009fc4 <_init>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	bf00      	nop
 8009fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fca:	bc08      	pop	{r3}
 8009fcc:	469e      	mov	lr, r3
 8009fce:	4770      	bx	lr

08009fd0 <_fini>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr
